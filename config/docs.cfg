// This CubeScript file has been automatically generated from AssaultCube's ./docs/reference.xml
// DO NOT MODIFY THIS FILE - Instead, modify ./docs/reference.xml and generate this file automatically.
// To generate this file automatically, please carefully read the comment at the top of reference.xml

docsection [CubeScript]
docident [-] [Performs a subtraction.];
docargument [A] [the minuend] [] [0];
docargument [B] [the subtrahend] [] [0];
docident [-=] [Subtracts a value from an alias.];
docargument [A] [the alias to subtract from] [] [0];
docargument [B] [value to be subtracted] [] [0];
docremark [Example: -= foo 1337];
docident [-=f] [Subtracts a floating-point value from an alias.];
docargument [A] [the alias to subtract from] [] [0];
docargument [B] [value to be subtracted] [] [0];
docremark [Example: -=f foo 13.37];
docident [-f] [Subtracts two floating-point numbers.];
docargument [A] [the minuend] [float] [0];
docargument [B] [the subtrahend] [float] [0];
docident [!] [Performs a negation.];
docargument [A] [argument] [] [0];
docident [!=] [Determines if two values are not equal.];
docargument [A] [first value] [] [0];
docargument [B] [second value] [] [0];
docident [!=f] [Determines if the first floating-point value is not equal to the second floating-point value.];
docargument [A] [the first value] [] [0];
docargument [B] [the second value] [] [0];
docident [!b] [Performs the operation NOT using binary arithmetic on integer values (32-bit signed).];
docargument [A] [argument] [] [0];
docremark [Integer values are 32-bit signed values, so for example "echo (!b 1)" returns "-2".];
docref [&b];
docref [|b];
docref [^b];
docident [*] [Performs a multiplication 2 or more numbers.];
docargument [A] [the multiplicand] [] [0];
docargument [B] [the multiplier(s)] [] [0];
docident [*=] [Multiplies an alias by a value.];
docargument [A] [the alias to be multiplied] [] [0];
docargument [B] [the multiplier] [] [0];
docremark [Example: *= foo 1337];
docident [*=f] [Multiplies an alias by a floating-point value.];
docargument [A] [the alias to be multiplied] [] [0];
docargument [B] [the multiplier] [] [0];
docremark [Example: *=f foo 13.37];
docident [*f] [Performs a floating point multiplication 2 or more numbers.];
docargument [A] [the multiplicand] [] [0];
docargument [B] [the multiplier(s)] [] [0];
docident [\f] [Adds color to a string.];
docargument [N] [color id] [0-9, A-Z] [0];
docremark [The whole string has to be included in quotes.];
docexample [echo "\f3Hello \f0world!"] [Output: a red "Hello" and a green "world!"];
docref [cncolumncolor];
docident [&&] [Logical AND.];
docargument [A] [first value] [] [0];
docargument [B] [second value] [] [0];
docexample [echo (&& 1 1)] [Output: 1];
docexample [echo (&& 1 0)] [Output: 0];
docident [&b] [Performs the operation AND using binary arithmetic on integer values (32-bit signed).];
docargument [A] [the first argument] [] [0];
docargument [B] [the second argument] [] [0];
docref [|b];
docref [^b];
docref [!b];
docident [^b] [Performs the operation XOR using binary arithmetic on integer values (32-bit signed).];
docargument [A] [the first argument] [] [0];
docargument [B] [the second argument] [] [0];
docref [&b];
docref [|b];
docref [!b];
docident [+] [Performs an addition 2 or more numbers.];
docargument [A] [the first summand] [] [0];
docargument [B] [the summand(s)] [] [0];
docremark [Example: echo the sum of x and y is (+ $x $y)];
docident [+=] [Adds a value to an alias.];
docargument [A] [the alias to add to] [] [0];
docargument [B] [value to be added] [] [0];
docremark [Example: += foo 1337];
docident [+=f] [Adds a floating-point value to an alias.];
docargument [A] [the alias to add to] [] [0];
docargument [B] [value to be added] [] [0];
docremark [Example: +=f foo 13.37];
docident [+f] [Adds up two or more floating-point numbers.];
docargument [A] [the first summand] [float] [0];
docargument [B] [the summand(s)] [float] [0];
docident [<] [Determines if a value is smaller than a second value.];
docargument [A] [the first value] [] [0];
docargument [B] [the second value] [] [0];
docident [<=] [Determines if a values is less than or equal to a second value.];
docargument [A] [the first value] [] [0];
docargument [B] [the second value] [] [0];
docident [<=f] [Compares if a particular floating-point value is less than or equal to another floating-point value.];
docargument [A] [The first value.] [] [0];
docargument [B] [The second value.] [] [0];
docident [<f] [Compares if a particular floating-point value is smaller than another floating-point value.];
docargument [A] [The first value.] [] [0];
docargument [B] [The second value.] [] [0];
docident [=] [Determines if two values are equal.];
docargument [A] [first value] [] [0];
docargument [B] [second value] [] [0];
docexample [echo there are only (concatword (= 1 1) (= 1 0)) types of people in the world] [Output: there are only 10 types of people in the world];
docident [=f] [Compares if a particular floating-point value is equal to another floating-point value.];
docargument [A] [The first value.] [] [0];
docargument [B] [The second value.] [] [0];
docident [>] [Determines if a value is bigger than a second value.];
docargument [A] [the first value] [] [0];
docargument [B] [the second value] [] [0];
docident [>=] [Determines if a values is greater than or equal to a second value.];
docargument [A] [the first value] [] [0];
docargument [B] [the second value] [] [0];
docident [>=f] [Determines if the first floating-point value is greater than or equal to the second floating-point value.];
docargument [A] [the first value] [] [0];
docargument [B] [the second value] [] [0];
docident [>f] [Determines if the first floating-point value is greater than the second floating-point value.];
docargument [A] [the first value] [] [0];
docargument [B] [the second value] [] [0];
docident [||] [Logical OR.];
docargument [A] [first value] [] [0];
docargument [B] [second value] [] [0];
docexample [echo (|| 1 0)] [output: 1];
docexample [echo (|| 0 0)] [output: 0];
docident [|b] [Performs the operation OR using binary arithmetic on integer values (32-bit signed).];
docargument [A] [the first argument] [] [0];
docargument [B] [the second argument] [] [0];
docref [&b];
docref [^b];
docref [!b];
docident [add2alias] [This will append the passed 2nd argument to any existing content of the alias named in the 1st argument.];
docargument [A] [the alias to add to] [] [0];
docargument [E] [the new element to add] [] [0];
docremark [Several popular aliases have predefined shortcuts using this scriptalias: addOnLoadOnce, addOnLoadAlways. Check config/scripts.cfg for possible omissions in that list.];
docexample [foo = "one" add2alias foo two echo foo] [Output: one two];
docref [add2bind];
docref [add2list];
docident [add2list] [Appends a new element to a list.];
docargument [A] [the alias (list) to add to] [] [0];
docargument [E] [the new element to add] [] [0];
docexample [tmp_list = []; add2list tmp_list Hello; add2list tmp_list world!; echo $tmp_list] [Output: Hello world!];
docref [add2alias];
docref [add2bind];
docident [addpunct] [Injects cubescript punctuation.];
docargument [S] [a string] [] [0];
docargument [N] [ID or name] [0 (quotes), 1 (brackets), 2 (parenthesis), 3 (_$_), 4 (quote), 5 (percent)] [0];
docexample [echo (addpunct hello)] [Output: "hello"];
docexample [echo (addpunct hello 1)] [Output: [hello]];
docexample [echo (addpunct hello 2)] [Output: (hello)];
docexample [echo (addpunct hello 3)] [Output: $hello];
docexample [test = (concat echo (addpunct fov 3)); test] [Output: 90.0];
docident [alias] [Binds a name to commands.];
docargument [N] [the name of the alias] [string, must not contain '$'] [0];
docargument [A] [the commands] [string] [0];
docexample [alias myalias [ echo "hello world"; alias myalias [ echo "I already said hello" ] ]] [It is possible to re-bind an alias, even during its evaluation.];
docexample [test = [ echo "successful" ]] [There is also the shorthand version of defining an alias via the "=" sign.];
docref [const];
docref [tempalias];
docref [isconst];
docref [checkalias];
docref [persistidents];
docident [aliasinit] [Initializes a group of aliases using checkinit.];
docargument [L] [the list of aliases to check for] [] [0];
docargument [B] [the block of code to ensure the aliases contain] [] [0];
docref [checkalias];
docref [checkinit];
docref [check2init];
docref [check2initlist];
docident [at] [Grabs a word out of a string.];
docargument [S] [the string] [] [0];
docargument [N] [the index of the word] [] [0];
docremark [Negative index number returns "".];
docexample [echo (at "zero one two three" 2)] [output: two];
docident [break] [Aborts a loop created with a 'loop', 'looplist' or 'while' command.];
docexample [loop i 10 [ if (= $i 4) [ break ]; echo $i]] [output: 0 1 2 3];
docref [continue];
docref [loop];
docref [while];
docident [ceil] [Upper value of a float number.];
docargument [F] [the float number to get the ceil from] [] [0];
docident [check2init] [Defines an alias only if it does not already exist.];
docargument [A] [alias name] [] [0];
docargument [V] [alias value] [] [0];
docref [check2initlist];
docref [checkalias];
docref [checkinit];
docref [aliasinit];
docident [check2initlist] [Uses check2init on a list of aliases.];
docargument [L] [list of alias names] [] [0];
docargument [V] [alias value] [] [0];
docref [checkalias];
docref [checkinit];
docref [aliasinit];
docref [check2init];
docident [checkalias] [Determines if the argument given is an existing alias or not.];
docargument [A] [the alias to check for] [] [0];
docexample [hello = ""; echo (checkalias hello)] [Output: 1];
docexample [echo (checkalias oMgThIsAlIaSpRoLlYdOeSnTeXiSt)] [Output: 0];
docref [checkinit];
docref [aliasinit];
docident [checkinit] [Ensures the initialization of an alias.];
docargument [A] [the alias to check for] [] [0];
docargument [B] [the block of code to ensure that the alias contains] [] [0];
docexample [checkinit mapstartalways] [Output: if alias mapstartalways does not exist, this command initializes it.];
docexample [checkinit mapstartalways [ echo New map, good luck! ]] [Output: if alias mapstartalways does not exist, it is initialized, and if the block of code "[ echo New map, good luck! ]" does not exist within the aliases contents, this command adds it.];
docref [checkalias];
docref [aliasinit];
docref [check2init];
docref [check2initlist];
docident [concat] [Concatenates multiple strings with spaces inbetween.];
docargument [S] [the first string] [] [0];
docargument [...] [collection of strings to concatenate] [] [1];
docexample [alias a "hello"; echo (concat $a "world")] [output: hello world];
docident [concatword] [Concatenates multiple strings.];
docargument [S] [the first string] [] [0];
docargument [...] [collection of strings to concatenate] [] [1];
docremark [The newly created string is saved to the alias 's'.];
docexample [alias a "Cube"; echo (concatword $a "Script")] [output: CubeScript];
docident [const] [Set an alias as a constant.];
docargument [N] [the name of the alias] [string, must not contain '$'] [0];
docargument [A] [the value] [string] [0];
docremark [A constant cannot be redefined in the same AC session: its value cannot be changed. To get rid of a constant, use "delalias".];
docremark [Constant alias is temporary that will not be written to saved.cfg, and thus will not persist after quitting.];
docexample [myalias = myvalue; const myalias;] [Set "myalias" value to "myvalue" then "lock" it as a constant.];
docexample [const myalias myvalue;] [You can directly set a value for your alias when you define it as a constant.];
docexample [const myalias myvalue; myalias = anothervalue;] [Assigning a value to a const will throw you an error. Output: myalias is already defined as a constant];
docref [alias];
docref [tempalias];
docref [isconst];
docident [continue] [Skip current loop iteration.];
docexample [loop i 5 [ if (= $i 2) [ continue ]; echo $i]] [output: 0 1 3 4];
docref [break];
docref [loop];
docref [while];
docident [delalias] [Deletes the passed alias.];
docargument [N] [the name of the alias] [string, must not contain '$'] [0];
docident [div] [Performs an integer division.];
docargument [A] [the dividend] [] [0];
docargument [B] [the divisor] [] [0];
docident [div=] [Divides an alias by a value.];
docargument [A] [the alias to be divided] [] [0];
docargument [B] [the divisor] [] [0];
docremark [Example: div= foo 1337];
docident [div=f] [Divides an alias by a floating-point value.];
docargument [A] [the alias to be divided] [] [0];
docargument [B] [the divisor] [] [0];
docremark [Example: div=f foo 13.37];
docident [divf] [Performs a division with floating-point precision.];
docargument [A] [] [the dividend] [0];
docargument [B] [] [the divisor] [0];
docident [editalias] [Interactively edits an alias in the console buffer.];
docargument [A] [alias to edit] [the alias name, without $] [0];
docremark [This takes the current value of the alias, and inserts it into the command line / text entry box.];
docremark [If the alias doesn't exist, it is created.];
docexample [alias test "Hello World"; editalias test] [Result: edit test: Hello World];
docref [editsvar];
docref [inputcommand];
docident [editsvar] [Interactively edits an existing alias in the console buffer.];
docargument [A] [alias to edit] [the alias name, without $] [0];
docremark [This takes the current value of the existing alias, and inserts it into the command line / text entry box.];
docexample [alias test "Hello World"; editsvar test] [Result: edit test: Hello World];
docref [editalias];
docref [inputcommand];
docident [enumalias] [Lists all persistent aliases that start with prefix.];
docremark [Returns a table with two entries per alias: 1) full name and 2) name without prefix.];
docref [alias];
docident [escape] [Replaces control characters in a string with escaped sequences.];
docargument [S] [string to escape] [] [0];
docexample [echo (escape (concat (c 3) "Hello World"))] [Output: "\f3Hello World"];
docident [execute] [Executes the specified string as cubescript.];
docargument [S] [the string to execute] [] [0];
docexample [execute (concat echo (addpunct fov 3))] [Example output: 90.0];
docident [findlist] [Searches a list for a specified value.];
docargument [L] [the list] [] [0];
docargument [I] [the item to find] [] [0];
docident [floor] [Floor value of a float number.];
docargument [F] [the float number to get the floor from] [] [0];
docident [forceinit] [Forcibly sets a list of aliases to a specified value.];
docargument [L] [list of alias names] [] [0];
docargument [V] [alias value] [] [0];
docexample [alias1 = 0; alias2 = 0; alias3 = 0; alias4 = 0; alias 5 = 0] [Can be written as:];
docexample [forceinit [alias1 alias2 alias3 alias4 alias5] 0] [];
docident [format] [Replaces "%" format specifiers in the string by the values specified in subsequent arguments.];
docargument [F] [format] [use %1..%9 for the values] [0];
docargument [V] [value(s)] [] [0];
docremark [In addition, it allows access to more than nine parameters. Parameter numbers of 10 and higher have to be prefixed with an additional zero. For example "%010" accesses parameter number ten.];
docexample [echo (format "%1 bottles of %2 on the %3, %1 bottles of %2!" 99 beer wall)] [output: 99 bottles of beer on the wall, 99 bottles of beer!];
docref [format2];
docident [format2] [Replaces "%" format specifiers in the string by the values specified in subsequent arguments.];
docargument [F] [format] [use %1..%9 for the values] [0];
docargument [V] [value(s)] [] [0];
docremark [Like "format" command, but all parameters are treated as lists and are exploded first.];
docremark [In addition, it allows access to more than nine parameters. Parameter numbers of 10 and higher have to be prefixed with an additional zero. For example "%010" accesses parameter number ten.];
docexample [echo (format "_%1_%2_%3_%4_%5_" "A B C" D E F)] [output: _A B C_D_E_F__];
docexample [echo (format2 "_%1_%2_%3_%4_%5_" "A B C" D E F)] [output: _A_B_C_D_E_];
docref [format];
docident [getalias] [Returns the value of the alias.];
docargument [N] [alias name] [] [0];
docref [storesets];
docref [getvarrange];
docident [getvarrange] [Gets range attribute for builtin variable.];
docargument [W] [what] [min, max, default] [0];
docargument [N] [the name of any builtin variable (integer or float)] [] [0];
docref [getalias];
docident [h0] [Returns value as string of hexadecimal digits, padded with leading zeros to a given minimum length (precision).];
docargument [P] [precision] [] [0];
docargument [V] [value] [] [0];
docexample [echo (h0 2 1024)] [Output: 400];
docexample [echo (h0 4 1024)] [Output: 0400];
docexample [echo (h0 6 1024)] [Output: 000400];
docexample [echo (h0 0 (&b 0xe 0x3))] [Output: 2];
docexample [echo (h0 0 (|b 0xe 0x3))] [Output: f];
docexample [echo (h0 0 (^b 0xe 0x3))] [Output: d];
docexample [echo (h0 0 (!b 0xe))] [Output: fffffff1];
docexample [echo (h0 0 (* -1 0xe))] [Output: fffffff2];
docref [l0];
docident [if] [Controls the script flow based on a boolean expression.];
docargument [cond] [the condition] [0 (false) or anything else (true)] [0];
docargument [true] [the body to execute if the condition is true] [] [0];
docargument [false] [the body to execute if the condition is false] [] [0];
docexample [if (> $x 10) [ echo x is bigger than 10 ] [ echo x too small ]] [];
docident [inputcommand] [Makes an input perform a certain command.];
docargument [I] [input] [] [0];
docargument [C] [command] [] [0];
docargument [P] [prompt] [] [0];
docargument [N] [nopersist] [] [0];
docremark [It opens a custom console buffer with custom prompt, initial buffer text and execution script (which gets the input buffer content in alias cmdbuf). If "nopersist" is not zero, the command will not be stored in console history.];
docref [complete];
docref [listcomplete];
docref [saycommand];
docident [isconst] [Determines if the argument given is a constant or not.];
docargument [A] [the alias to check for] [] [0];
docexample [const hello ""; echo (isconst hello)] [Output: 1];
docexample [hello = value; echo (isconst hello)] [Output: 0];
docref [const];
docident [isIdent] [Returns whether or not there is an identifier by that name.];
docargument [N] [identifier name] [] [0];
docident [isolatecontext] [Isolates the given context.];
docargument [C] [context (integer or name)] [CORE (0), CFG (1), PROMPT (2), MAPCFG (3), MDLCFG(4)] [0];
docremark [This disables access from this context to identifiers located in other contexts, also it removes all aliases created in this context once the running context changes.];
docref [scriptcontext];
docref [sealcontexts];
docident [l0] [Leading zeros for the number V to make it W chars wide.];
docargument [W] [width] [] [0];
docargument [V] [value] [] [0];
docremark [It may look like 10 - which might be considered a mnemonic - but it's lowercase-L and 0!];
docexample [echo (l0 5 1000)] [Output: 01000];
docexample [echo (l0 3 1000)] [Output: 1000];
docref [h0];
docident [listaverage] [Returns the average of a list of numbers.];
docargument [L] [the list of numbers] [supports ints and floats] [0];
docexample [echo (listaverage "2 5 5")] [Output: 4.0];
docident [listlen] [returns the element count of the given list.];
docargument [L] [the list] [] [0];
docident [listoptions] [Lists the argument options for several argument types.];
docexample [echo (listoptions)] [Output: "entities ents weapons teamnames teamnames-abbrv punctuations crosshairnames menufilesortorders texturestacktypes cubetypes"];
docexample [echo (listoptions teamnames)] [Output: "CLA RVSF CLA-SPECT RVSF-SPECT SPECTATOR"];
docident [loop] [Loops the specified body.];
docargument [V] [the alias used as counter] [] [0];
docargument [N] [the amount of loops] [] [0];
docargument [body] [the body to execute on each iteration] [] [0];
docremark [This command sets the alias you choose, as first argument, from 0 to N-1 for every iteration.];
docexample [loop i 10 [ echo $i ]] [];
docref [break];
docref [continue];
docref [while];
docref [looplist];
docident [looplist] [Browses a list and executes a body for each element.];
docargument [V] [the list to browse] [] [0];
docargument [N] [the alias(es) containing the current element value] [] [0];
docargument [body] [the body to execute on each iteration] [] [0];
docremark [It works optionally with several variables.];
docexample [looplist "zero one two three" number [echo $number]] [];
docexample [looplist [0 "is knife" 1 "is pistol"] [n w] [echo weapon $n $w]] [];
docref [break];
docref [continue];
docref [loop];
docref [looplisti];
docident [looplisti] [Browses a list and executes a body for each element.];
docargument [V] [the list to browse] [] [0];
docargument [N] [the alias(es) containing the current element value] [] [0];
docargument [body] [the body to execute on each iteration] [] [0];
docremark [The same as looplist, but it automatically counts the loops in "i", starting with 0. It works optionally with several variables.];
docexample [a = [u v w]; b = [x y z]; looplisti $a m [echo $m (at $b $i) $i]] [Output: u x 0 , v y 1 , w z 2];
docref [break];
docref [continue];
docref [loop];
docref [looplist];
docident [mod] [Performs a modulo operation.];
docargument [A] [the dividend] [] [0];
docargument [B] [the divisor] [] [0];
docident [modf] [Performs a floating-point modulo operation.];
docargument [A] [the dividend] [] [0];
docargument [B] [the divisor] [] [0];
docexample [echo (modf 7.5 12.5)] [Output: 7.5];
docexample [echo (modf 17.5 12.5)] [Output: 5.0];
docident [numargs] [The number of arguments passed to the current alias.];
docargument [] [numargs] [ read-only];
docident [persistidents] [Controls whether aliases defined afterwards will be saved (1) or not (0).];
docargument [B] [control option] [1: persistent, 0: not persistent] [0];
docremark [Rules:];
docremark [* aliases created by "const" and "tempalias" are never persistent;];
docremark [* aliases created or altered by "alias" or "=" become persistent, if the "persistidents" flag is set during that operation;];
docremark [* "persistidents" is false during the execution of almost all config files during game start - those files can create aliases with default values which will not be persistent (until changed later while the flag is set);];
docremark [* before saved.cfg is executed, the flag is set and stays set all throughout the game - which means, that all changes (for example from menus or in console) will change the altered alias to "persistent";];
docremark [* exceptions for map or model config files are unnecessary, since those run restricted and can't create aliases anyway;];
docremark [* exceptions are necessary for "late run" config files like those in config/opt/ folder.];
docremark [This command may be used to manually set or clear the flag. It also returns the current state of the flag. If used in a config file, the flag is restored to its original value when the file ends execution.];
docremark [In short: only late-run config files (meaning: run after saved.cfg was restored) may need to manually set/reset the flag. Use "const" and "tempalias" where appropriate and clear "persistidents" before creating an alias with a not-to-save default value that may be changed and made persistent later.];
docexample [persistidents 0; foo = [ echo "bar"]] [foo will not be saved and has to be redefined when restarting AC.];
docexample [persistidents 1; bar = [ echo "foo"]] [bar will be saved and persistent across sessions.];
docref [alias];
docident [pop] [Resets a previously pushed alias to it's original value.];
docargument [A] [alias] [] [0];
docremark [It is allowed to use multiple arguments for "pop". So instead of "pop var_a ; pop var_b" you can write "pop var_a var_b". Also, "pop" will now give back the removed value of the first alias from the argument list. This allows using the pop'd value one last time.];
docexample [p = 1; push p 2; pop p; echo $p] [Output: 1];
docref [push];
docident [powf] [Returns A raised to the power of B (floating-point).];
docargument [A] [the mantissa] [] [0];
docargument [B] [the exponent] [] [0];
docident [push] [Temporarily redefines the value of an alias.];
docargument [N] [alias name] [] [0];
docargument [A] [action] [] [0];
docexample [p = 1; push p 2; echo $p] [Output: 2];
docref [pop];
docident [resetsleeps] [Resets all current "sleep".];
docident [result] [Sets the result value of a cubescript block.];
docargument [R] [the result] [] [0];
docref [execute];
docident [rnd] [Random value.];
docargument [A] [the upper limit of the random value] [] [0];
docident [round] [Rounds the given float.];
docargument [F] [the float number to round] [] [0];
docident [scriptcontext] [];
docargument [C] [context (integer or name)] [CORE (0), CFG (1), PROMPT (2), MAPCFG (3), MDLCFG(4)] [0];
docargument [N] [id name] [] [0];
docref [isolatecontext];
docref [sealcontexts];
docident [sealcontexts] [Secures this configuration for the rest of the game.];
docref [scriptcontext];
docref [isolatecontext];
docident [sleep] [Executes a command after specified time period.];
docargument [N] [the amount of milliseconds] [] [0];
docargument [C] [the command to execute] [] [0];
docargument [P] [ignore map change] [] [0];
docexample [sleep 1000 [ echo foo ]] [Prints 'foo' to the screen after 1 second.];
docident [sortlist] [Returns a sorted version of a list.];
docargument [L] [list to sort] [] [0];
docexample [echo (sortlist [1 3 2])] [Output: 1 2 3];
docident [storesets] [Generates an alias (list) of the current values for the given aliases/CVARs.];
docargument [L] [the list of aliases/CVARs] [] [0];
docargument [A] [the alias to store them in] [] [0];
docexample [storesets "sensitivity hudgun fov" tmp] [Example result: stores "3.000 1 120" into alias "tmp".];
docref [getalias];
docident [strcmp] [Determines if two strings are equal.];
docargument [A] [the first string] [] [0];
docargument [B] [the second string] [] [0];
docexample [if (strcmp yes yes) [echo the two strings are equal] [echo the two strings are not equal]] [Output: the two strings are equal];
docref [strstr];
docident [strlen] [Returns the length (in characters, including whitespace) of string S.];
docargument [S] [string] [] [0];
docexample [echo (strlen "Hello world!")] [Output: 12];
docref [substr];
docident [strreplace] [Returns a string, with a portion of it replaced with a new sub-string.];
docargument [S] [the original string to modify] [] [0];
docargument [T] [the target sub-string to replace] [] [0];
docargument [N] [the new sub-string to replace the target] [] [0];
docexample [echo (strreplace "Hello cruel world" cruel "")] [Output: Hello world];
docref [substr];
docident [strstr] [Determines if string B was found in string A.];
docargument [A] [the first string] [] [0];
docargument [B] [the second string] [] [0];
docremark [It returns position of string B in string A (counting from 1) or zero, if not found.];
docexample [if (strstr "Hello world!" Hello) [echo found Hello in Hello world!] [echo did not find Hello in Hello world!]] [Output: found Hello in Hello world!];
docref [strcmp];
docident [substr] [Copies a substring out of the original.];
docargument [S] [the original string] [] [0];
docargument [A] [start position] [] [0];
docargument [L] [substring length] [] [0];
docremark [Character indexes begins at 0. If "start position" is negative, the reference is the end of the string. It also counts negative length from total length, if "substring length" parameter is negative.];
docexample [echo (substr abcdefgh 2 5)] [Output: cdefg];
docexample [echo (substr abcdefgh -3 2)] [Output: fg];
docexample [echo (substr abcdefgh 2)] [Output: cdefgh];
docexample [echo (substr abcdefgh 1 -2)] [Output: bcdefg];
docref [strlen];
docref [strreplace];
docref [parsestring];
docident [switch] [Takes an integer argument to determine what block of code to execute.];
docargument [I] [integer] [] [0];
docargument [C] [a variable number of 'case' arguments...] [] [0];
docremark [This command can only handle up to 23 'cases' (because of cubescript's 24 argument limit).];
docexample [switch 2 [echo case 0] [echo case 1] [echo case 2] [echo case 3] [echo case 4]] [Output: case 2];
docident [tempalias] [Creates a temporary alias that will not be written to saved.cfg, and thus will not persist after quitting.];
docargument [N] [temporary alias name] [] [0];
docargument [C] [cubescript command(s)] [] [0];
docref [alias];
docref [const];
docident [testchar] [Tests a character argument for various things.];
docargument [C] [the character to test] [] [0];
docargument [N] [type of test to run] [min 0/max 7/default 0] [0];
docremark [See the following c++ functions for more information about the usage of this command:];
docremark [isalpha(), isalnum(), isdigit(), islower(), isprint(), ispunct(), isupper(), and isspace()];
docexample [echo (testchar 1)] [Output: 1 // It is a 0-9 digit];
docexample [echo (testchar a 1)] [Output: 1 // It is a a-z or A-Z character];
docexample [echo (testchar z 2)] [Output: 1 // It is a a-z or A-Z character or 0-9 digit];
docexample [echo (testchar b 3)] [Output: 1 // It is a lowercase a-z character];
docexample [echo (testchar B 4)] [Output: 1 // It is a uppercase A-Z character];
docexample [echo (testchar , 5)] [Output: 1 // It is a printable character];
docexample [echo (testchar . 6)] [Output: 1 // It is a punctuation character];
docexample [echo (testchar " " 7)] [Output: 1 // It is a whitespace character];
docident [tolower] [Converts a string to all lowercase characters.];
docargument [S] [a string] [] [0];
docexample [echo (tolower HELLO)] [Output: hello];
docref [toupper];
docident [toupper] [Converts a string to all uppercase characters.];
docargument [S] [a string] [] [0];
docexample [echo (toupper hello)] [Output: HELLO];
docref [tolower];
docident [while] [Loops the specified body while the condition evaluates to true.];
docargument [cond] [the condition] [the code evaluated before each iteration] [0];
docargument [body] [the body to execute on each iteration] [] [0];
docremark [This command sets the alias "i" from 0 to N-1 for every iteration. Note that the condition here has to have [], otherwise it would only be evaluated once.];
docexample [alias i 0; while [ (< $i 10) ] [ echo $i; alias i (+ $i 1) ]] [];
docref [break];
docref [continue];
docref [loop];
docsection [General]
docident [addpckserver] [Adds a packages source server where to download custom content from.];
docargument [S] [The server address. Trailing slash not needed.] [] [0];
docargument [P] [priority of the server] [] [0];
docremark [Only add servers you trust.];
docremark [The list of servers is saved into config/pcksources.cfg on game quit.];
docremark [If a priority is given, it influences the sorting of servers. Servers with higher priority are queried first. If servers have the same priority, they are sorted by ping. Default priority is zero.];
docexample [addpckserver http://packages.ac-akimbo.net] [];
docref [resetpckservers];
docref [autodownload];
docref [getpckserver];
docident [addzipmod] [Add the zip package file "mods/zipname.zip" to the virtual file system.];
docargument [N] [the name of the zip mod] [] [0];
docremark [Add the zip package file "mods/zipname.zip" to the virtual file system. Only files below the path "packages/" are added (and also files below "config/", if zipname starts with "###"). If the size of the zip file is below "zipcachemaxsize", the whole zip file is cached in memory. (Un-cached zip files are kept open at all time, so caching keeps the number of simultaneously opened files lower.)];
docref [getmod];
docref [zipcachemaxsize];
docref [zipmodremove];
docref [zipmodclear];
docref [zipmodlist];
docref [zipmodgetdesc];
docref [zipmodgetfiles];
docref [zipmodgetrevision];
docident [afterinit] [If defined, this will be executed after saved.cfg is loaded.];
docident [allowhudechos] [Enables or disables the ability of hudecho to output text to the heads up display.];
docargument [N] [0 off, 1 on] [min 0/max 1/default 1];
docref [hudecho];
docident [applydialog] [Toggles the showing of the "Apply changes now?" menu when changing certain graphical settings.];
docargument [N] [1 = show, 0 = don't show] [min 0/max 1/default 1];
docident [autodownload] [Determines if the game should try to download missing packages such as textures or mapmodels on the fly.];
docargument [V] [Note: This is turned on by default] [min 0/max 1/default 1];
docident [autodownloaddebug] [When the variable autodownloaddebug is set to 1 and/or in debug binaries, more debug output is produced.];
docargument [V] [Add debug info to autodownload] [min 0/max 1/default 0];
docident [autoexec] [If defined, this will be executed after autoexec.cfg is loaded.];
docident [autogetmap] [Determines if the current played map should be automatically downloaded if it is not available locally.];
docargument [B] [enable auto map download] [min 0/max 1/default 1];
docident [autogetnewmaprevisions] [Automatically get new map revisions from the server.];
docargument [N] [0: no, 1: yes] [min 0/max 1/default 0];
docident [autoscreenshot] [Toggle for taking an automatic screenshot during intermission.];
docargument [B] [0=Off, 1=On] [min 0/max 1/default 1];
docident [cleanshot] [Takes a "clean" screenshot with no HUD items.];
docremark [Your current HUD configuration is stored into a buffer, and is re-enabled afterwards.];
docref [screenshot];
docref [blankouthud];
docident [clockerror] [Sets the correction value for clockfix.];
docargument [V] [correction value] [min 990000/max 1010000/default 1000000];
docremark [Engine source-code snippet (main.cpp): if(clockfix) millis = int(millis*(double(clockerror)/1000000));];
docref [clockfix];
docident [clockfix] [Enables correction of the system clock.];
docargument [B] [enable correction] [min 0/max 1/default 0];
docref [clockerror];
docident [complete] [];
docargument [C] [command] [any command or alias] [0];
docargument [P] [path] [path to search] [0];
docargument [E] [extension] [extension to match] [0];
docremark [The completion will work on the first word of your console input.];
docexample [complete demo "demos" dmo] [If you enter "/demo " and press TAB you will cycle through all available demos.];
docexample [alias mapcomplete [complete $arg1 "packages/maps" cgz]] [Helper alias for quickly adding complete-definitions for all gamemodes - see config/script.cfg (below "Auto-completions").];
docref [saycommand];
docref [listcomplete];
docident [conline] [Returns text from the last line in the console.];
docident [connected] [Indicates if a connection to a server exists.];
docargument [] [the connection state] [1 (connected), 0 (disconnected) read-only];
docident [conopen] [Indicates the state of the console.];
docargument [] [console state] [0: closed, 1: open in an alternate size, 2: open regularly read-only];
docref [altconsize];
docref [toggleconsole];
docident [conskip] [Allows to browse through the console history by offsetting the console output.];
docargument [N] [the offset] [] [0];
dockey [KP_MINUS] [- on the keypad] [scrolls backwards the console (conskip 5)];
dockey [KP_PLUS] [+ on the keypad] [scrolls forwards the console (conskip -5)];
dockey [KP_MULTIPLY] [* on the keypad] [resets the console (conskip -1000)];
dockey [HASH|BACKSLASH+MOUSE4|MOUSE5] ['# or \' + mouse scroll] [scrolls the console];
docident [current_version] [Compare given version to current version.];
docargument [s] [newest available version] [] [0];
docremark [Will show update notifications if the given version is higher than the running one.];
docident [datestring] [Representation of date.];
docremark [Format: Www Mmm dd hh:mm:ss yyyy];
docremark [Use timestamp to create your own formatting.];
docexample [echo (datestring) "Sat Jun 7 17:08:35 2008"] [];
docident [dbgzip] [Output statistics and errors when handling zip compressed data.];
docargument [B] [boolean] [1:yes min 0/max 1/default 0];
docremark [Advanced usage: may be helpful in debugging map files not loading.];
docident [debugargs] [Dumps all command arguments to STDOUT.];
docargument [...] [...] [] [1];
docident [debugevents] [Whether or not to output input events.];
docargument [T] [threshhold] [0:off,1/2:on min 0/max 2/default 0];
docremark [If set to at least 1 all events will output their type number. Window events and mouse button/wheel events will output status information.];
docremark [If set to 2 the KEYUP, TEXTINPUT and MOUSEMOVE events will trigger status output too.];
docref [];
docident [demonameformat] [Sets the formatstring for demo filenames.];
docargument [S] [string] [] [0];
docremark [we use the following internal mapping of formatchars:];
docremark [%g : gamemode (int) ; %G : gamemode (chr) ; %F : gamemode (full) ;];
docremark [%m : minutes remaining ; %M : minutes played ;];
docremark [%s : seconds remaining ; %S : seconds played ;];
docremark [%h : IP of server ; %H : hostname of server (client only) ;];
docremark [%n : mapname ;];
docremark [%w : timestamp "when" (formatted by demotimeformat) .];
docref [demotimeformat];
docident [demotimeformat] [Sets the formatstring for demo timestamp.];
docargument [S] [string] [strftime format] [0];
docremark [If the string starts with 'U', UTC is used - otherwise local time.];
docremark [The same format options as in strftime().];
docref [demonameformat];
docident [disconnectonmaperror] [Disconnect from a server making us load an incompatible map.];
docargument [B] [boolean] [1:yes min 0/max 1/default 1];
docremark [Maps that have not been converted to the new entity attribute scaling map format can cause this.];
docremark [Edit it offline and make use of the config/opt/convmap.cfg.];
docident [echo] [Outputs text to the console.];
docargument [L] [List of strings] [] [0];
docref [hudecho];
docident [enumfiles] [Lists files in a directory.];
docargument [P] [path to directory] [] [0];
docargument [E] [extension] [] [0];
docremark [If extension is specified, only files of that extension are listed.];
docremark [If the extension is "dir", only directories are listed.];
docident [exec] [Executes all commands in a specified config file.];
docargument [C] [the config file] [] [0];
docremark [It also allows to pass arguments to and deliver results from script files - when a script file is executed, any additional arguments are passed as execarg1..execargX to the script. The number of arguments is in execnumargs and if the script in the file sets the value of execresult, the exec command returns that value.];
docremark [Example:];
docremark [if there is a file testscript.cfg with this content: execresult = (* $execarg1 $execarg2)];
docremark [then the command: "echo (exec testscript.cfg 6 7)" will output "42".];
docident [execdir] [Executes all commands in all config files in the specified directory.];
docargument [s] [the directory path from the assaultcube root] [] [0];
docexample [execdir scripts] [];
docref [exec];
docident [getEngineState] [Returns a list of values describing the current engine (rendering) state.];
docremark [It will only be filled after the first frame was drawn.];
docremark [The list is: FPS LOD WQD WVT EVT];
docremark [FPS = Frames Per Second];
docremark [LOD = Level Of Detail];
docremark [WQD = World QuaD Count];
docremark [WVT = World VerTex Count];
docremark [EVT = Extra VerTex Count (HUD & menu)];
docexample [echo (getEngineState)] [];
docident [getpckserver] [Returns a table with four columns of all configured package servers.];
docremark [The columns are: host name, priority, ping and resolved. "resolved" is a flag, indicating, if the server answered the ping during game start.];
docref [addpckserver];
docref [autodownload];
docref [resetpckservers];
docident [getscrext] [Returns the file extension of the client's current screenshottype setting.];
docexample [echo (getscrext)] [Example output: .jpg];
docref [screenshottype];
docident [groupvariables] [Controls how many variables (with similar names) are grouped together on one line in saved.cfg.];
docargument [N] [Variables per line] [min 0/max 10/default 4];
docremark [This only pertains to commented variables in saved.cfg caused by omitunchangeddefaults being 0.];
docref [omitunchangeddefaults];
docident [history] [Executes the specified command in the command line history.];
docargument [N] [the N'th command from the history] [] [0];
docremark [For example, binding "history 1" to a key allows you to quickly repeat the last command typed in (useful for placing many identical entities etc.)];
docident [hudecho] [Outputs text to the console and heads up display.];
docargument [L] [List of strings] [] [0];
docref [allowhudechos];
docref [echo];
docident [jpegquality] [Sets the JPEG screenshot image quality.];
docargument [N] [Compression level] [min 10/max 100/default 70];
docremark [The image quality is set by it's compression level, a value of 10 sets maximum compression and a small file size but results in a bad quality image];
docremark [while a value of 100 results in a large file but gives the best quality image.];
docident [lang] [Sets the language for which a translated server MOTD will be fetched, if the server has one for this language.];
docargument [L] [the language code] [min /max /default ];
docremark [This is always a two-letter language code as defined in the ISO 639 standard, three-letter codes are currently not allowed.];
docremark [If lang is not set, or if the server does not have a matching MOTD file, it will fall back to English.];
docremark [Note: this does not affect the client language, which is derived from the system settings (e.g. on many *nix systems, it may be changed via the "LANG" environment variable).];
docexample [en, de, fr, ...] [];
docident [listcomplete] [];
docref [saycommand];
docref [complete];
docident [mapshot] [Saves an image of the entire radar-overview of the map.];
docident [maxcon] [Sets the total number of text lines from the console to store as history.];
docargument [V] [] [min 10/max 1000/default 200];
docident [maxhistory] [Sets how many typed console commands to store.];
docargument [N] [Total of stored commands] [min 0/max 10000/default 1000];
docremark [This value sets how many command lines to store in memory, everytime a command is entered it gets store so it can be recalled using the "/" key along with the arrow keys to scroll back and forth through the list.];
docident [millis] [Returns the number of milliseconds since engine start.];
docexample [echo (millis)] [];
docident [networkdebug] [Enables output of processed network packets.];
docargument [B] [enable network debugging] [min 0/max 1/default 0];
docremark [This variable only has an effect if the client binary is compiled in debug mode.];
docident [numconlines] [Hold the current number of lines on the console.];
docident [omitunchangeddefaultbinds] [Omit unchanged default binds from saved.cfg.];
docargument [N] [0 = print; 1 = print, but commented out; 2 = omit] [min 0/max 2/default 1];
docref [omitunchangeddefaults];
docident [omitunchangeddefaults] [Omit variables with unchanged default values from saved.cfg.];
docargument [N] [0 = print, but commented out; 1 = omit] [min 0/max 1/default 1];
docremark [If this value is 1, variables that are at their default values are omitted from saved.cfg. If 0, the variables are written to saved.cfg, but commented out.];
docref [groupvariables];
docref [omitunchangeddefaultbinds];
docident [physinterp] [Toggles physics interpolation.];
docargument [B] [] [min 0/max 1/default 1];
docident [pngcompress] [Sets the PNG screenshot file compression.];
docargument [N] [Compression level] [min 0/max 9/default 9];
docremark [A value of 9 sets maximum data compression and a smaller file size while a value of 0 results in a large file image, quality is always the same since PNG its a loosless format.];
docident [protocol] [Gets an integer representing the game protocol. READ ONLY];
docremark [As example, the protocol of version 1.2.0.2 is represented as value 1201.];
docident [quit] [Quits the game without asking.];
docident [resetcfg] [Determines if all settings should be reset when the game quits.];
docargument [B] [enable reset] [min 0/max 1/default 0];
docremark [It is recommended to quit the game immediately after enabling this setting. Note that the reset happens only once as the value of this variable is reset as well.];
docref [resetbinds];
docref [quit];
docident [resetpckservers] [Resets the list of packages source servers where to download custom content from.];
docremark [Restart AssaultCube to take the effect.];
docref [addpckserver];
docref [autodownload];
docref [getpckserver];
docident [resetsecuremaps] [Clears the list of secured maps.];
docref [securemap];
docident [run] [Executes a config file within "config" folder.];
docargument [N] [the file name (without extension)] [] [0];
docident [saycommand] [Puts a prompt on screen.];
docargument [S...] [the text to display in the prompt] [] [1];
docremark [This puts a prompt on screen that you can type into, and will capture all keystrokes until you press return (or ESC to cancel). If what you typed started with a "/", the rest of it will be executed as a command, otherwise its something you "say" to all players.];
dockey [T] [] [opens empty prompt];
dockey [BACKQUOTE|SLASH|CARET] [` or / or ^] [opens a command prompt /];
dockey [Y] [] [opens a command prompt % (for team chat)];
dockey [TAB] [Tab] [autocompletes forwards commands/variables/aliases];
dockey [LSHIFT+TAB] [left Shift + Tab] [autocompletes backwards commands/variables/aliases];
dockey [LSHIFT+ESCAPE] [left Shift + Esc] [resets the commandline to the state before using TAB-completion];
dockey [UP] [Up Arrow] [browse forwards command history];
dockey [DOWN] [Down Arrow] [browse backwards command history];
docref [complete];
docref [listcomplete];
docref [inputcommand];
docident [screenshot] [Takes a screenshot.];
docremark [Screenshots are saved to "screenshots/[date]_[time]_[map]_[mode].[ext]", where [ext] is the image type selected.];
dockey [F12] [] [];
docref [cleanshot];
docident [screenshotscale] [Scales screenshots by the given factor before saving. 1 = original size, 0.5 = half size, etc.];
docargument [S] [Scale] [min 0.1/max 1/default 1];
docident [screenshottype] [Toggle format of screenshot image. Your choice is for BMP (0), JPEG (1) or PNG (2).];
docargument [T] [0=BMP, 1=JPEG, 2=PNG] [min 0/max 2/default 1];
docref [getscrext];
docident [securemap] [Adds a map to the list of secured maps.];
docargument [S] [the name of the map] [] [0];
docremark [Secured maps can not be overwritten by the commands sendmap and getmap.];
docref [resetsecuremaps];
docref [sendmap];
docref [getmap];
docident [setclipboardtext] [];
docargument [T] [Text to put in the clipboard.] [] [0];
docident [systime] [Seconds since the epoch (00:00:00 UTC on January 1, 1970).];
docexample [echo (systime)] [];
docident [throttle_accel] [Determines how fast network throttling accelerates.];
docargument [V] [acceleration] [min 0/max 32/default 2];
docref [throttle_interval];
docref [throttle_decel];
docident [throttle_decel] [Determines how fast network throttling decelerates.];
docargument [V] [deceleration] [min 0/max 32/default 2];
docref [throttle_accel];
docref [throttle_interval];
docident [throttle_interval] [Determines the interval of re-evaluating network throttling.];
docargument [V] [interval] [seconds min 0/max 30/default 5];
docref [throttle_accel];
docref [throttle_decel];
docident [timestamp] [A list of values for current time.];
docremark [Format: YYYY mm dd HH MM SS];
docexample [echo (timestamp) "2008 08 08 08 08 08"] [];
docexample [echo (timestamp) "2063 04 05 12 00 00"] [];
docexample [echo (at (timestamp) 0) (at (timestamp) 2) (at (timestamp) 1) "2063 05 04"] [];
docident [timestring] [The current time in (H)H:MM:SS format.];
docexample [echo (timestring) "12:34:56"] [];
docexample [echo (timestring) "1:02:03"] [];
docident [version] [Gets an integer representing the game version. READ ONLY];
docremark [As example, version 1.2.0.2 is represented as value 1202.];
docref [current_version];
docident [writecfg] [Writes current configuration to config/saved.cfg - automatic on quit.];
docident [zipcachemaxsize] [Maximal size of the file, which is cached in memory.];
docargument [S] [size [kB]] [min 0/max 1024/default 512];
docremark [If the size of the zip file is below "zipcachemaxsize", then during loading the whole zip file is cached in memory. When the size is greater, then zip is just opened as a file and read from disk.];
docref [addzipmod];
docident [zipmodclear] [Removes all zip files from the virtual file system.];
docref [addzipmod];
docref [zipmodremove];
docident [zipmodgetdesc] [Reads and returns the first 11 lines from the file "desc.txt" in the named zip file.];
docargument [N] [the name of the zip mod] [] [0];
docremark [The first line is supposed to contain a descriptive title for the zip (for use in menus) and the next 10 lines should contain a more detailed description (also for use in menus). The command also unpacks "preview.jpg" from the zip and mounts it as a temporary file under the name "packages/modpreviews/zipname.jpg".];
docref [getmod];
docref [addzipmod];
docref [zipmodlist];
docref [zipmodgetfiles];
docref [zipmodgetrevision];
docident [zipmodgetfiles] [Returns the list of files contained in a zip file.];
docargument [N] [the name of the zip mod] [] [0];
docref [getmod];
docref [addzipmod];
docref [zipmodlist];
docref [zipmodgetdesc];
docref [zipmodgetrevision];
docident [zipmodgetrevision] [Returns the revision number of the zip file.];
docargument [N] [the name of the zip mod] [] [0];
docremark [The number is supposed to be part of a filename: "revision_n". If no such file is found in the zip file, the return value is zero. The content of the revision file is not relevant and a file size of zero is recommended.];
docref [getmod];
docref [addzipmod];
docref [zipmodlist];
docref [zipmodgetdesc];
docref [zipmodgetfiles];
docident [zipmodlist] [Lists zip files in "mods/".];
docargument [W] [what] [all, active, inactive] [0];
docremark [By default or if "what" is "all", all zips are listed. If "what" is "active", only those zips, that are already in use, are listed. If "what" is "inactive", only the unused zip files are listed.];
docref [getmod];
docref [addzipmod];
docref [zipmodgetdesc];
docref [zipmodgetfiles];
docref [zipmodgetrevision];
docident [zipmodremove] [Removes one zip file from the virtual file system.];
docargument [N] [the name of the zip mod] [] [0];
docref [addzipmod];
docref [zipmodclear];
docsection [Gameplay]
docident [akimboautoswitch] [Whether or not to automatically switch to akimbo upon pickup.];
docargument [B] [boolean] [1:yes min 0/max 1/default 1];
docremark [If you are brandishing your pistol while walking over the pickup you will switch to akimbo every time.];
docident [akimboendaction] [Sets the behavior of weapon switching upon akimbo expiration.];
docargument [] [] [0 (switch to knife)] [0];
docargument [] [] [1 (stay with pistol)] [0];
docargument [] [] [2 (switch to grenades)] [0];
docargument [] [] [3 (switch to primary)] [0];
docargument [N] [akimbo end action] [min 0/max 3/default 3];
docremark [If no ammunition is detected for the target weapon, it will fallback to the previous weapon until it finds a weapon with ammunition to use.];
docident [attack] [Fires the current weapon.];
dockey [MOUSE1] [left mouse button] [];
docident [autoreload] [Indicates if the weapons should be reloaded automatically.];
docargument [B] [the autoreload state] [0: off, 1: on min 0/max 1/default 1];
docref [reload];
docident [backward] [Moves the player backward.];
dockey [S|DOWN] [S or Down Arrow] [];
docident [benchme] [Moves from active team to spectator during match.];
docident [burstshots] [Sets the firing mode of automatic weapons between full auto mode and burst fire mode.];
docargument [N] [the weapon number or name] [4 (subgun), 6 (assault), 8 (akimbo)] [0];
docargument [S] [shots per burst] [Special values: 0: set weapon to full auto, -1: don't set, instead check and return shots per burst] [0];
docident [changefollowplayer] [];
docargument [D] [delta] [how many players to shift +/-] [0];
docref [setfollowplayer];
docident [changeteam] [Swaps your player to the enemy team.];
docref [team];
docident [checkmag] [Determines if you have any ammunition available for the specified weapon. (uses magcontent and magreserve)];
docargument [N] [the weapon number or name] [0 (knife), 1 (pistol), 2 (carbine), 3 (shotgun), 4 (subgun), 5 (sniper), 6 (assault), 7 (grenades), 8 (akimbo)] [0];
docref [magcontent];
docref [magreserve];
docident [clearignored] [Clear list of ignored players.];
docargument [A] [client number, or -1 to clear the whole list] [] [0];
docremark [Omit the client number to clear the whole list.];
docident [clearmuted] [Clears a list of muted players.];
docargument [A] [client number, or -1 to clear the whole list] [] [0];
docremark [Omit the client number to clear the whole list.];
docident [connect] [Connects to a server.];
docargument [N] [the address of the server (hostname or IP)] [] [0];
docargument [O] [the port] [] [0];
docargument [P] [the server password] [] [0];
docremark [If the server name is omitted, the client will try to connect to an available server in the LAN. If the port is omitted or set to 0, the default port will be used.];
docexample [connect 127.0.0.1 555 myServerPassword] [];
docref [connectadmin];
docref [disconnect];
docref [reconnect];
docident [connectadmin] [Connects to a server and tries to claim admin state.];
docargument [N] [the address of the server (hostname or IP)] [] [0];
docargument [O] [the port] [] [0];
docargument [P] [the admin password] [] [0];
docremark [This command will connect to a server just like the command 'connect' and try to claim admin state. If the specified password is correct, the admin will be able to connect even if he is locked out by ban, private master mode or taken client slots. If successfully connected, bans assigned to the admin's host will be removed automatically. If all client slots are taken a random client will be kicked to let the admin in.];
docremark [If the server name ist omitted, the client will try to connect to an available server in the LAN. If the port is omitted or set to 0, the default port will be used.];
docexample [connectadmin 127.0.0.1 777 myAdminPassword] [connect as admin on port 777 of localhost];
docexample [connectadmin "" 0 myAdminPassword] [will try to connect to a LAN server on the default port as admin with the given password of "myAdminPassword".];
docref [connect];
docref [disconnect];
docref [reconnect];
docident [crouch] [Triggers a crouch.];
dockey [LSHIFT] [left Shift] [];
docident [curautoteam] [Returns the server's current autoteam state.];
docident [curdemofile] [Returns the name of played demo.];
docref [demo];
docident [curmap] [Returns the current map being played.];
docref [gamemode];
docref [map];
docref [mode];
docident [curmaprevision] [Current map revision number.];
docident [curmastermode] [Returns the server's current mastermode state.];
docident [curname] [Returns the nick name of the local player.];
docref [name];
docident [curpausemode] [Returns the server's current pause state (1=paused, 0=resumed).];
docident [curplayers] [Returns the size of the players vector.];
docremark [The return value includes the local player "(you)" and works in both singleplayer and multiplayer scenarios. It can be used, for example, in a loop to find all valid clients (players) on server. Note: it DOESN'T return current number of players.];
docref [isclient];
docident [currentprimary] [Returns the weapon-index the local player currently has selected as primary.];
docremark [This is not the same as curweapon - which could be a grenade or the knife.];
docref [nextprimary];
docref [curweapon];
docref [prevweapon];
docref [weapon];
docref [magcontent];
docref [magreserve];
docref [hasprimary];
docident [curserver] [Returns information on the current server - if you're connected to one.];
docargument [I] [info] [0, 1, 2, 3, 4, 5, 6, 7, 8] [0];
docremark [If I is 0 (omitted or any other value than the ones below) you will get a string with 'IP PORT'];
docremark [If I is 1,2 or 3 you will get the IP, HostName or port respectively.];
docremark [If I is 4 you get a string representing the current state of the peer - usually this should be 'connected'.];
docremark [If I is 5 you will get a server name.];
docremark [If I is 6 or 7 you will get a server description.];
docremark [If I is 8, you will get a serverbrowser-line with the server - this is handled with caution, sometimes empty, #8 will be outdated w/o serverbrowser open.];
docexample [echo [I am (curserver 4) to (curserver 2)]] [Output: I am connected to ctf-only.assault-servers.net];
docexample [last_server = "" remember_server = [ if (strcmp (curserver 4) "connected") [ last_server = (curserver 0) echo "I'm remembering:" $last_server ] [ echo "you are not 'connected' - you" (concatword "are '" (curserver 4) "' !") ] ] bind PRINT [ if (strcmp $last_server "") [ remember_server ] [ say (concat "^L2I was just ^Lfon^L3" $last_server) last_server = "" ] ]] [This will either remember or retrieve the last server you pressed the PrintScreen-key on.];
docident [curweapon] [Returns the weapon-index the local player is currently holding.];
docref [currentprimary];
docref [nextprimary];
docref [prevweapon];
docref [weapon];
docref [magcontent];
docref [magreserve];
docref [hasprimary];
docident [demo] [Plays a recorded demo.];
docargument [S] [the demo name] [] [0];
docremark [Playback is interpolated for the player whose perspective you view.];
docref [setmr];
docref [rewind];
docref [curdemofile];
docident [disconnect] [Leaves a server.];
docref [reconnect];
docref [connect];
docref [connectadmin];
docident [dlmap] [Downloads and loads the specified map from an available packages source server.];
docargument [S] [the name of the map] [] [0];
docref [getmap];
docref [sendmap];
docident [drawzone] [Draws a zone marker with the specified color and dimensions on the minimap/radar.];
docargument [X1] [X-coordinate - top-left corner] [] [0];
docargument [X2] [X-coordinate - bottom-right corner] [] [0];
docargument [Y1] [Y-coordinate - top-left corner] [] [0];
docargument [Y2] [Y-coordinate - bottom-right corner] [] [0];
docargument [C] [a color for the zone, in hexadecimal notation] [default: 0x00FF00 (green)] [0];
docremark [This is primarily intended for the survival mode.];
docremark [You can draw a few zones at a time. They will be reset (i.e. removed) once a new game starts.];
docremark [Note that the coordinates must be specified as integers, not as floating-point values.];
docref [resetzones];
docref [survival];
docident [dropflag] [Drops the taken flag.];
dockey [BACKSPACE] [Backspace] [];
docident [findcn] [Finds client number (cn) of player with given name.];
docargument [N] [player name] [] [0];
docident [flyspeed] [Determines by how much to multiply the fly speeds by.];
docargument [N] [the multiplier] [min 1.0/max 5.0/default 2.0];
docident [forward] [Moves the player forward.];
dockey [W|UP] [W or Up Arrow] [];
docident [fragmessage] [Sets the frag message corresponding to a weapon (appearing on the hud).];
docargument [N] [the weapon number or name] [0 (knife), 1 (pistol), 2 (carbine), 3 (shotgun), 4 (subgun), 5 (sniper), 6 (assault), 7 (grenades), 8 (akimbo)] [0];
docargument [M] [the message you want to appear] [example: sniped] [0];
docexample [fragmessage sniper sniped] [It will display "you sniped unarmed" on the hud when you frag unarmed with sniper.];
docref [gibmessage];
docref [weapon];
docident [gamespeed] [Sets the gamespeed in percent.];
docargument [N] [the game speed] [min 10/max 1000/default 100];
docremark [This does not work in multiplayer.];
docident [gametimecurrent] [Returns the time (in milliseconds) of the currently played game. READ ONLY];
docexample [showtime = [ if (> $lastgametimeupdate 0) [ gmr = (- $gametimemaximum (+ $gametimecurrent (- (millis) $lastgametimeupdate))) gsr = (div $gmr 1000) gts = (mod $gsr 60) if (< $gts 10) [ gts = (concatword 0 $gts) ] [ ] gtm = (div $gsr 60) if (< $gtm 10) [ gtm = (concatword 0 $gtm) ] [ ] echo (concatword $gtm : $gts) remaining ] [ echo gametime not updated yet ] ]] [];
docref [minutesremaining];
docref [gametimemaximum];
docref [lastgametimeupdate];
docref [millis];
docident [gametimemaximum] [Returns the maximum time (in milliseconds) of the currently played game. READ ONLY];
docref [minutesremaining];
docref [gametimecurrent];
docref [lastgametimeupdate];
docref [millis];
docident [gametimestart] [Returns the time (in milliseconds) when the last map was loaded.];
docref [minutesremaining];
docref [gametimecurrent];
docref [lastgametimeupdate];
docref [millis];
docident [getdemo] [Gets the recorded demo from a game on the server.];
docargument [X] [number in list] [] [0];
docargument [P] [subpath] [] [0];
docremark [If F10 is pressed earlier than two minutes into the game, the last game will be downloaded.];
docremark [If F10 is pressed later than two minutes into the game, the current game is scheduled to be automatically downloaded when it ends.];
docref [listdemos];
docident [getmap] [Retrieves the last map that was sent to the server using 'sendmap'.];
docargument [S] [the name of the map] [] [0];
docargument [C] [cubescript to execute once map is installed] [] [0];
docremark [If the command is passed an argument, different than the map being played, the game tries to download the specified map from an available packages source server.];
docref [sendmap];
docref [dlmap];
docident [getmod] [Try to download mods/modname.zip from all configured package servers.];
docargument [N] [the name of the mod] [] [0];
docremark [Does not automatically activate the mod.];
docref [addzipmod];
docident [gibmessage] [Sets the gib message corresponding to a weapon (appearing on the hud).];
docargument [N] [the weapon number or name] [0 (knife), 1 (pistol), 2 (carbine), 3 (shotgun), 4 (subgun), 5 (sniper), 6 (assault), 7 (grenades), 8 (akimbo)] [0];
docargument [M] [the message you want to appear] [example: slashed] [0];
docremark [This command is identical to fragmessage, please see it.];
docref [fragmessage];
docref [weapon];
docident [gndtoggle] [Toggles between your primary weapon and grenades (must be bound to a key).];
docref [sndtoggle];
docref [knftoggle];
docident [gonext] [Go to the next match in the servers rotation for the desired gamemode.];
docargument [M] [gamemode] [0:TDM,5:CTF,10:OSOK] [0];
docremark [TODO: elaborate];
docident [grenades] [Switches to grenades, if available (must be bound to a key).];
docremark [See also "quicknadethrow" command.];
dockey [3] [] [switches to grenades];
docref [primary];
docref [secondary];
docref [melee];
docref [quicknadethrow];
docident [hasprimary] [Determines if the local player (you) are currently carrying a primary weapon.];
docremark [Returns 0 (false) or 1 (true).];
docexample [add2bind MOUSE1 [ if (hasprimary) [ echo you attacked with a primary weapon ] ]] [Everytime you press the left mouse button, assuming you are carrying your primary weapon, the above echo will be executed.];
docref [currentprimary];
docref [curweapon];
docref [checkmag];
docident [highestcn] [Returns the highest valid client number available.];
docident [ignore] [Ignore a player.];
docargument [A] [client number] [] [0];
docremark [You won't see any further game chat or hear any more voice com messages from that player.];
docident [ignoreall] [Ignore all clients currently on the server.];
docref [unignoreall];
docref [ignoreteam];
docref [ignoreenemy];
docident [ignoreenemy] [Ignore all clients on the enemy team.];
docref [ignoreall];
docref [unignoreall];
docref [ignoreteam];
docident [ignoreteam] [Ignore all clients on the specified team.];
docargument [T] [the team to ignore] [0 or 1 || cla or rvsf] [0];
docref [ignoreall];
docref [unignoreall];
docref [ignoreenemy];
docident [isclient] [Determines if the client number given is a valid client (player).];
docargument [C] [client number] [] [0];
docexample [echo (isclient 0)] [Example output: 1];
docexample [echo (isclient 32)] [Example output: 0];
docref [curplayers];
docident [jump] [Triggers a jump.];
dockey [SPACE|RCTRL] [Space or right Ctrl] [];
docident [knftoggle] [Toggles between your primary weapon and knife (must be bound to a key).];
docref [sndtoggle];
docref [gndtoggle];
docident [lanconnect] [Tries to connect to a LAN server.];
docident [lastgametimeupdate] [Returns the last time (in milliseconds) the gametime was updated. READ ONLY];
docref [minutesremaining];
docref [gametimecurrent];
docref [gametimemaximum];
docref [millis];
docident [lastpm] [Holds the CN of the last client who sent you a private message.];
docremark [If you haven't recieved any private messages, 'lastpm' is -1];
docref [pm];
docref [quickanswer];
docident [left] [Moves the player left.];
dockey [A|LEFT] [A or Left Arrow] [];
docident [listdemos] [Get the game demos listing from the server we are currently connected.];
docref [getdemo];
docref [cleardemo];
docident [listignored] [Print a list of all players that you are currently ignoring.];
docident [listmuted] [Prints a list of all players that you have muted.];
docident [loadcrosshair] [Loads a crosshair for given type.];
docargument [T] [type] [default, teammate, scope, edit, knife, pistol, carbine, shotgun, subgun, sniper, assault, grenade, akimbo, reset] [0];
docargument [I] [image] [] [0];
docexample [loadcrosshair red_dot.png] [Loads the red_dot.png crosshair for all weapons.];
docexample [loadcrosshair default red_dot.png] [Same as above. Loads the red_dot.png crosshair for all weapons.];
docexample [loadcrosshair knife red_dot.png] [Loads the red_dot.png crosshair for your knife only.];
docexample [loadcrosshair assault red_dot.png] [Loads the red_dot.png crosshair for your assault rifle only.];
docexample [loadcrosshair scope red_dot.png] [Loads the red_dot.png crosshair for your sniper rifle scope only.];
docexample [loadcrosshair reset] [Loads all default crosshairs (including teammate and scope).];
docident [loadmap] [Loads a map directly in the current gamemode (singleplayer only).];
docargument [M] [map name] [] [0];
docref [map];
docref [votemap];
docref [mode];
docident [magcontent] [Returns contents of current magazine.];
docargument [N] [the weapon number or name] [0 (knife), 1 (pistol), 2 (carbine), 3 (shotgun), 4 (subgun), 5 (sniper), 6 (assault), 7 (grenades), 8 (akimbo)] [0];
docremark [A knife will always return 1.];
docremark [Weapons that aren't available will return -1.];
docref [curweapon];
docref [currentprimary];
docref [nextprimary];
docref [prevweapon];
docref [weapon];
docref [magreserve];
docident [magreserve] [Returns contents of magazine reserve.];
docargument [N] [the weapon number or name] [0 (knife), 1 (pistol), 2 (carbine), 3 (shotgun), 4 (subgun), 5 (sniper), 6 (assault), 7 (grenades), 8 (akimbo)] [0];
docref [curweapon];
docref [currentprimary];
docref [nextprimary];
docref [prevweapon];
docref [weapon];
docref [magcontent];
docident [map] [Loads up a map in the gamemode set previously by the 'mode' command.];
docargument [M] [Name of the map to load] [string] [0];
docremark [If connected to a multiplayer server, it votes to load the map (others will have to type "map M" as well to agree with loading this map). To vote for a map with a specific mode, set the mode before you issue the map command.];
docremark [A map given as "blah" refers to "packages/maps/blah.cgz", "mypackage/blah" refers to "packages/mypackage/blah.cgz". At every map load, "config/default_map_settings.cfg" is loaded which sets up all texture definitions, etc. Everything defined there can be overridden per package or per map by creating a "mapname.cfg" which contains whatever you want to do differently from the default.];
docremark [When the map finishes it will load the next map when one is defined, otherwise it reloads the current map. You can define what map follows a particular map by making an alias like (in the map script): alias nextmap_blah1 blah2 (loads "blah2" after "blah1").];
docref [votemap];
docref [loadmap];
docref [mode];
docident [mapstartalways] [If this alias exists it will be run every time the game starts a new map.];
docexample [mapstartalways = [ echo "------------------------------" ]] [This will output the string and override any other actions that might've been defined.];
docexample [addOnLoadAlways [ echo "------------------------------" ]] [This will output the string after any previously defined actions have run.];
docref [add2alias];
docref [mapstartonce];
docref [onNewMap];
docident [mapstartonce] [If this alias exists it will be run when the game starts a new map, then it is deleted.];
docexample [mapstartonce = [ echo "------------------------------" ]] [This will output the string and override any other actions that might've been defined.];
docexample [addOnLoadOnce [ echo "------------------------------" ]] [This will output the string after any previously defined actions have run.];
docref [add2alias];
docref [mapstartalways];
docref [onNewMap];
docident [me] [Action chat message.];
docargument [...] [...] [] [1];
docident [melee] [Switches to knife (must be bound to a key).];
dockey [4] [] [switches to knife];
dockey [MOUSE3] [middle mouse button] [switches to knife and attacks (if the key is held)];
docref [primary];
docref [secondary];
docref [grenades];
docident [minutesremaining] [Returns the remaining minutes of the currently played game. READ ONLY];
docref [gametimecurrent];
docref [gametimemaximum];
docref [lastgametimeupdate];
docref [millis];
docident [modconnect] [Connects to a modded server.];
docargument [A] [IP] [] [0];
docargument [B] [port] [] [0];
docargument [C] [password] [] [0];
docremark [The modified server needs to use the original client-server protocol. The protocol version number will be the negated value of an unmodded server.];
docident [modconnectadmin] [Connects to a modded server and tries to claim admin state.];
docargument [A] [IP] [] [0];
docargument [B] [port] [] [0];
docargument [C] [admin password] [] [0];
docremark [The modified server needs to use the original client-server protocol. The protocol version number will be the negated value of an unmodded server.];
docident [modlanconnect] [Tries to connect to a modified LAN server.];
docremark [The modified server needs to use the original client-server protocol. The protocol version number will be the negated value of an unmodded server.];
docident [muteplayer] [Mutes a player.];
docargument [A] [client number] [] [0];
docremark [You won't hear any further voice com messages from that player.];
docident [name] [Sets the nick name for the local player.];
docargument [N] [the name] [] [0];
docref [curname];
docident [nextprimary] [Sets the primary weapon on next respawn.];
docargument [A] [the weapon number or name] [2 (carbine), 3 (shotgun), 4 (subgun), 5 (sniper), 6 (assault)] [0];
docident [nickcomplete] [Adds a command to complete nicknames on.];
docremark [Your own nick will be ignored.];
docexample [nickgreet = [ say (concat "Hello," (concatword $arg1 "!")) ]; nickcomplete nickgreet] [with this you can enter "/nickgreet " and cycle via TAB to the nickname you want to greet.];
docref [complete];
docident [onAttack] [If defined, this will be executed each time you shot a bullet, throw a grenade or use your knife.];
docargument [weapon] [The weapon that was used] [] [0];
docremark [Remark: it works only in singleplayer.];
docident [onCallVote] [If this alias exists it will be run every time a vote is called.];
docref [onChangeVote];
docref [onVoteEnd];
docident [onChangeVote] [If this alias exists it will be run every time a vote is changed.];
docref [onCallVote];
docref [onVoteEnd];
docident [onConnect] [If defined, this will be executed when you or another player join(s) a server.];
docargument [player] [The client number of the player who connected] [integer (-1 for local player)] [0];
docident [onDisconnect] [If defined, this will be executed when you or another player disconnect(s) from a server.];
docargument [player] [The client number of the player who disconnected] [integer (-1 for local player)] [0];
docident [onFlag] [If defined, this will be executed each time a flag action occurs.];
docargument [action] [The action that occured] [integer (0 = stolen, 1 = dropped, 2 = lost, 3 = returned, 4 = scored, 5 = ktfscore, 6 = failed to score, 7 = reset)] [0];
docargument [actor] [The client number of the actor] [integer] [0];
docargument [flag] [The flag owner team] [integer (0 = CLA, 1 = RVSF)] [0];
docremark [Remark: it works only in singleplayer.];
docident [onHit] [If it's defined, this alias will be executed each time a damage is done.];
docargument [actor] [The client number of the actor] [integer] [0];
docargument [target] [The client number of the target] [integer] [0];
docargument [damage] [The damage done] [integer] [0];
docargument [gun] [The number of the gun used] [integer] [0];
docargument [gib] [Is it a gib or a normal frag] [integer (0 or 1)] [0];
docremark [Remark: it works only in singleplayer.];
docident [onKill] [If it exists, this alias will be executing when any player get killed, receiving a few arguments.];
docargument [actor] [The client number of the actor] [integer] [0];
docargument [target] [The client number of the target] [integer] [0];
docargument [gun] [The number of the gun used] [integer] [0];
docargument [gib] [Is it a gib or a normal frag] [integer (0 or 1)] [0];
docremark [Remark: it works only in singleplayer.];
docident [onLastMin] [If this alias exists, it will be automatically executed on the last minute remaining mark.];
docident [onNameChange] [If defined, this will be executed when you or another player change(s) his name.];
docargument [player] [The client number of the player who changed name] [integer] [0];
docargument [new name] [The new name of the client] [string] [0];
docremark [The alias is executed before the name is effectively changed, so you can still get the previous name of the client from this alias.];
docremark [Remark: it works only in singleplayer.];
docident [onPickup] [If defined, this will be executed each time you pick up an item.];
docargument [item] [The item that was picked up] [integer (0 = pistol clips, 1 = ammo box, 2 = grenade, 3 = health, 4 = helmet, 5 = armour, 6 = akimbo)] [0];
docargument [q] [The quantity that was received] [] [0];
docremark [Remark: it works only in singleplayer.];
docident [onPM] [If defined, this will be executed when another player sent you private message.];
docargument [player] [The client number who sent you private message] [integer] [0];
docargument [message] [The private message] [string] [0];
docident [onReload] [If defined, this will be executed each time you reload a weapon.];
docargument [B] [was autoreload?] [0 (false), 1 (true)] [0];
docremark [Remark: it works only in singleplayer.];
docident [onSpawn] [If defined, this will be executed each time a player spawns.];
docargument [player] [The client number of the player who spawned] [integer] [0];
docremark [Remark: it works only in singleplayer.];
docident [onVoteEnd] [If this alias exists it will be run every time a vote passes or fails.];
docref [onCallVote];
docref [onChangeVote];
docident [onWeaponSwitch] [If defined, this will be executed each time you switch to a different weapon.];
docargument [W] [The weapon number that you switched to] [] [0];
docremark [Remark: it works only in singleplayer.];
docident [pause] [Vote to pause or resume the match.];
docargument [P] [pause or resume] [1 (pause) or 0 (resume)] [0];
docremark [This command is only supported on servers that are in 'match' mastermode.];
docremark [You can use the alias 'togglepause' to switch between pause and resume.];
docref [mastermode];
docident [paused] [Determines if the singleplayer game should be paused.];
docargument [B] [pause game] [min 0/max 1/default 0];
dockey [PAUSE] [Pause] [];
docident [player] [Retrieve an attribute of a player identified by clientnum.];
docargument [C] [clientnum] [1,2,3,..] [0];
docargument [A] [attribute] [magcontent, ammo, primary, ..] [0];
docremark [If the clientnum does not match a valid player the result will be empty, just as without an attribute passed.];
docremark [The following attributes can be retrieved: magcontent, ammo, primary, curweapon, nextprimary, health, armour, attacking, scoping, x, y, z, name, team, ping, pj, state, role, frags, flags, deaths, tks, alive, spect, cn, skin_cla, skin_rvsf, skin, ip];
docref [player1];
docident [player1] [Retrieve an attribute of yourself.];
docargument [A] [attribute] [magcontent, ammo, primary, ..] [0];
docremark [See player for all retrievable attributes.];
docref [player];
docident [pm] [Sends a private message to a specified client.];
docargument [C] [Client number] [] [0];
docargument [L] [List of strings] [] [0];
docref [say];
docref [quickanswer];
docref [lastpm];
docident [prevweapon] [Returns the weapon-index the local player was previously holding.];
docref [currentprimary];
docref [nextprimary];
docref [curweapon];
docref [weapon];
docref [magcontent];
docref [magreserve];
docident [primary] [Switches to your current primary weapon (must be bound to a key).];
dockey [1] [] [];
docref [secondary];
docref [melee];
docref [grenades];
docident [pstat_weap] [Returns the shot statistics for the player with the given clientnumber.];
docargument [C] [client] [0..N] [0];
docremark [The list is:];
docremark [knife/atk dmg pistol/atk dmg carbine/atk dmg shotgun/atk dmg smg/atk dmg sniper/atk dmg assault/atk dmg nade/atk dmg akimbo/atk dmg];
docexample [echo (pstat_weap 0)] [Output: 0 0 0 0 0 0 0 0 0 0 1 240 15 312 0 0 3 112 0 0];
docref [start_intermission];
docref [pstat_score];
docref [weapon];
docident [quickanswer] [Easily respond the last client who sent you a private message.];
dockey [N] [] [];
docref [pm];
docref [lastpm];
docident [quicknadethrow] [Switches to grenades, if available (must be bound to a key).];
docremark [If grenades are already selected or the key is held, it throws a grenade and switches back to previous weapon.];
dockey [G] [] [for all weapons];
dockey [MOUSE2] [right mouse button] [for all weapons except sniper rifle];
docref [grenades];
docident [reconnect] [Disconnects then reconnects you to the current server.];
docargument [P] [the server password] [] [0];
docref [disconnect];
docref [connect];
docref [connectadmin];
docident [reload] [Reloads the weapon.];
docargument [A] [] [value] [0];
dockey [R] [] [];
docref [autoreload];
docident [resetzones] [Reset all drawn zones.];
docref [drawzone];
docref [survival];
docident [rewind] [Rewind the current demo to S seconds ago.];
docargument [S] [the number of seconds to rewind] [] [0];
docremark [Note: you can use a negative value to forward.];
docref [demo];
docref [setmr];
docident [right] [Moves the player right.];
dockey [D|RIGHT] [D or Right Arrow] [];
docident [say] [Outputs text to other players.];
docargument [S...] [the text] [] [1];
docremark [If the text begins with a percent character (%), only team mates will receive the message.];
docident [scopefov] [Determines the FOV when scoping.];
docargument [V] [] [min 5/max 60/default 50];
docref [fov];
docident [secondary] [Switches to your secondary weapon (must be bound to a key).];
dockey [2] [] [];
docref [primary];
docref [melee];
docref [grenades];
docident [setfollowplayer] [];
docargument [C] [clientnum] [which player to follow] [0];
docref [changefollowplayer];
docref [spectatecn];
docident [setmr] [Go to a predefined number of minutes before the end of the game while watching a demo.];
docargument [M] [the minutes remaining to skip to] [] [0];
docref [demo];
docref [rewind];
docident [setnext] [Call a vote for mode and map.];
docargument [G] [gamemode] [0:TDM,5:CTF,10:OSOK] [0];
docargument [M] [map] [ac_mines,ac_douze,megamap] [0];
docremark [TODO: elaborate];
docident [setscope] [Displays a scope for the sniper-rifle.];
docargument [Y] [scope on?] [0 or 1] [0];
docremark [It is used in the zoom-script (config/scripts.cfg: "const zoom").];
dockey [MOUSE2] [right mouse button] [];
docident [shiftweapon] [Shifts your selected weapon by a given delta.];
docargument [D] [delta] [-N..-1,+1..N] [0];
docremark [By default the mouse-wheel shifts one up or down according to your scroll direction.];
dockey [MOUSE4] [] [cycle one up];
dockey [MOUSE5] [] [cycle one down];
docident [sndtoggle] [Toggles between your primary weapon and secondary weapon (must be bound to a key).];
docref [knftoggle];
docref [gndtoggle];
docident [spectate] [Toggles spectator mode.];
docref [spectatemode];
docref [spectatepersistent];
docident [spectatecn] [Returns client number of spectated player.];
docref [setfollowplayer];
docident [spectatemode] [Sets the desired spectating mode.];
docargument [M] [the mode] [2 (1st-person), 3 (3rd-person), 4 (3rd-person transparent), 5 (free flying)] [0];
dockey [SPACE] [] [switch spectator mode];
docref [spectate];
docident [spectatepersistent] [Enables persistent spectating concrete player.];
docargument [N] [0: enabled in non-arena modes, 1: always enabled] [min 0/max 1/default 1];
docremark [For "spectatepersistent" = 1 persistent spectating is enabled in all game modes in multiplayer (that means, that spectated player isn't changed after his death), for "0" it is enabled only in non-arena modes.];
docref [spectate];
docident [start_intermission] [If this alias exists it will be run when the game reaches intermission.];
docexample [start_intermission = [ echo "INTERMISSION - STATISTICS TIME" loop p 255 [ pn = (player $p name) if (strcmp $pn "") [ ] [ echo (concatword Player $p ":") (pstat_score $p) ":" (pstat_weap $p) ] ] echo "------------------------------" ]] [This will output the full statistics line for all players.];
docref [pstat_score];
docref [pstat_weap];
docident [stopdemo] [Stops demo playback.];
docident [suicide] [Kills your player. You will lose 1 frag point and receive 1 death point when using this command.];
docident [team] [Sets the team for the local player.];
docargument [N] [the team number or name] [0 (CLA), 1 (RVSF), 2 (CLA-SPECT), 3 (RVSF-SPECT), 4 (SPECTATOR)] [0];
docexample [team CLA] [];
docref [changeteam];
docident [teaminfo] [Returns attributes of a team.];
docargument [T] [Team] [cla, rvsf, 0, 1] [0];
docargument [A] [Attribute] [Valid attributes: flags, frags, deaths, points, name, players] [0];
docident [togglespect] [Cycles through all available spectator modes.];
docremark [These modes are: Follow-1stPerson, Follow-3rdPerson, Follow-3rdPerson-transparent and Fly.];
dockey [SPACE] [] [cycle spectator modes];
docident [unignoreall] [Unignore all clients currently on the server.];
docref [ignoreall];
docref [ignoreteam];
docref [ignoreenemy];
docident [voicecom] [];
docargument [S] [sound] [must be a registered voicecom-sound] [0];
docargument [T] [text] [] [0];
dockey [V] [] [opens the voicecom menu, use number keys for your choice];
docident [voicecomsounds] [Enables or disables voicecom audio.];
docargument [] [] [0 (off)] [0];
docargument [] [] [1 (always play voicecom audio)] [0];
docargument [] [] [2 (only play voicecom audio from you and your teammates)] [0];
docargument [N] [voicecom sounds] [min 0/max 2/default 1];
docident [vote] [Agree or disagree to the currently running vote.];
docargument [V] [vote value] [1 (yes) OR 2 (no)] [0];
dockey [F1] [] [votes YES];
dockey [F2] [] [votes NO];
docident [votemap] [Sets the next gamemode then calls a vote for a map.];
docargument [I] [mode id] [] [0];
docargument [M] [map name] [] [0];
docref [map];
docref [loadmap];
docref [mode];
docident [votepending] [Determines if there is a vote pending or not.];
docexample [echo $votepending] [Output: if there is currently a vote pending, returns 1, else returns 0.];
docident [watchingdemo] [Returns 1 when the current game is being played from a demo, else 0.];
docexample [echo I am (at [not now] (watchingdemo)) watching a demo. "so, are you?"] [];
docident [weapon] [Changes the weapon (must be bound to a key).];
docargument [N] [the number/name of available weapon] [0 (knife), 1 (pistol), 2 (carbine), 3 (shotgun), 4 (subgun), 5 (sniper), 6 (assault), 7 (grenades), 8 (akimbo)] [0];
docident [whereami] [Prints the local client's (x,y) coordinates.];
docident [whois] [Get the IP address of a given clientnumber - only admins get shown the last octet.];
docargument [C] [clientnum] [] [0];
docident [winners] [Returns the team number with the highest score, or if in a non-team mode, returns the CN of the player with the highest score.];
docsection [Keyboard and mouse]
docident [_defaultbinds] [Whether or not the next call to _resetallbinds will remove any and all binds; cleaning up before setting the default bindings.];
docargument [B] [boolean] [1:yes min 0/max 1/default 0];
docremark [Internal – used in config/resetbinds.cfg];
docref [_resetallbinds];
docident [_resetallbinds] [Clears all binds for all keys and all modes, including self-assigned ones.];
docremark [Do not use the command manually.];
docref [resetbinds];
docref [_defaultbinds];
docident [add2bind] [Adds a block of code, if it does not already exist, to a keybind.];
docargument [K] [the key to add to] [] [0];
docargument [C] [the code to add] [] [0];
docref [add2alias];
docref [add2list];
docident [autoscopesens] [Switches between scopesensscale and autoscopesensscale.];
docargument [N] [auto on/off] [min 0 (scopesensscale)/max 1 (autoscopesens)/default 0];
docremark [Determines how to calculate scoped sensitivity if scopesens is zero. If enabled, derives scoped sensitivity from scopefov and fov.];
docref [sensitivity];
docref [sensitivityscale];
docref [scopesens];
docref [scopesensscale];
docident [bind] [Binds a key to a command.];
docargument [K] [the key to bind] [string] [0];
docargument [A] [the command] [string, usually an alias] [0];
docremark [To find out what key names and their default bindings are, look at config/keymap.cfg, then add bind commands to your autoexec.cfg.];
docref [editbind];
docref [specbind];
docref [megabind];
docref [onrelease];
docident [editbind] [Similar to bind, but is only active while editing, where it overrides the regular bind for the specified key.];
docargument [K] [the key to bind] [string] [0];
docargument [A] [the command] [string, usually an alias] [0];
docref [bind];
docref [specbind];
docident [findkey] [Returns the name of a key via a specified code.];
docargument [I] [integer] [] [0];
docremark [Returns -255 if the key does not exist.];
docremark [See /config/keymap.cfg for a full list of valid key codes.];
docexample [echo (findkey 8)] [Output: BACKSPACE];
docexample [echo (findkey 280)] [Output: PAGEUP];
docref [keybind];
docref [findkeycode];
docident [findkeycode] [Returns the integer code of a key.];
docargument [K] [the name of the key] [] [0];
docremark [Returns -255 if the key does not exist.];
docremark [See /config/keymap.cfg for a full list of valid key names.];
docexample [echo (findkeycode BACKSPACE)] [Output: 8];
docexample [echo (findkeycode PAGEUP)] [Output: 280];
docref [keybind];
docref [findkey];
docident [invmouse] [Sets mouse to "flight sim" mode.];
docargument [B] [sets invmouse] [1:inverted Y-axis min 0/max 1/default 0];
docremark [Inverts movement on the y-axis.];
docident [keybind] [Returns the contents of a keybind, bound with 'bind'.];
docargument [K] [name of key] [] [0];
docref [bind];
docref [findkey];
docref [findkeycode];
docref [keyeditbind];
docref [keyspecbind];
docident [keyeditbind] [Returns the contents of a keybind, bound with 'editbind'.];
docargument [K] [name of key] [] [0];
docref [editbind];
docref [keybind];
docref [keyspecbind];
docident [keymap] [Sets up the keymap for the specified key.];
docargument [K] [the key to map] [] [0];
docargument [N] [the name for the key] [] [0];
docargument [A] [the default action] [] [0];
docremark [You should never have to use this command manually, use "bind" instead.];
docref [bind];
docident [KEYPRESS] [If defined, this will be executed every time you press a key.];
docargument [I] [integer key code] [] [0];
docexample [checkinit KEYPRESS [echo You pressed key: (findkey $arg1)]] [];
docref [KEYRELEASE];
docref [findkey];
docident [KEYRELEASE] [If defined, this will be executed every time you release a key.];
docargument [I] [integer key code] [] [0];
docexample [checkinit KEYRELEASE [echo You released key: (findkey $arg1)]] [];
docref [KEYPRESS];
docref [findkey];
docident [keyspecbind] [Returns the contents of a keybind, bound with 'specbind'.];
docargument [K] [name of key] [] [0];
docref [keybind];
docref [keyeditbind];
docref [specbind];
docident [megabind] [Binds a key to many different actions depending on the current game state.];
docargument [K] [the key to bind] [string] [0];
docargument [D] [body of code to execute if watching a demo] [a body of code] [0];
docargument [E] [body of code to execute if editing or in coop-edit mode] [a body of code] [0];
docargument [C] [body of code to execute if connected to a server] [a body of code] [0];
docargument [B] [body of code to execute if in a bot mode] [a body of code] [0];
docargument [O] [body of code to execute if none of the other arguments have been met] [a body of code] [0];
docremark [This command requires 6 arguments, no less. Use an empty set of brackets [] for any of the arguments that you want to "do nothing".];
docexample [megabind F9 [echo Demo!] [echo Editing or coop!] [echo Connected!] [echo Bots!] [echo Other!]] [];
docref [bind];
docref [onrelease];
docident [mfilter] [Sets the degree of mouse filtering (0.0 being no filtering).];
docargument [N] [Amount of mouse filtration] [min 0.0/max 6.0/default 0.0];
docident [modkeypressed] [Indicates if a CTRL key is pressed.];
docargument [] [state of the CTRL key] [0: unpressed, 1: pressed read-only];
docident [modkeypressed] [Is the CTRL currently key pressed?];
docremark [Can be used to change the behaviour of keybinds, like the F12 keybind in spectator mode uses it.];
docref [screenshot];
docident [mouseaccel] [Sets the mouse acceleration.];
docargument [N] [acceleration factor] [min 0.0/max 1000.0/default 0.0];
docref [sensitivity];
docident [onrelease] [Executes a command on the release of a key/button.];
docargument [A] [the command] [] [0];
docremark [This command must be placed in an action in a bind or in an alias in a bind.];
docexample [bind CTRL [ echo "key pressed"; onrelease [ echo "key released" ] ]] [];
docref [bind];
docref [megabind];
docident [relativemouse] [The way the mouse movement is handled.];
docargument [B] [boolean] [0:warped, 1:relative min 0/max 1/default 1];
docremark [On Windows this is forced to 1 due to erratic behaviour of SDL_WarpMouseInWindow.];
docremark [If set to 0 the mouse will be warped to center of the screen if appropriate.];
docref [sdl_xgrab_bug];
docident [resetbinds] [Resets all binds back to their default values.];
docremark [This command executes the file /config/resetbinds.cfg which will bind all keys to the values specified in that file, thus resetting the binds to their default values.];
docref [resetcfg];
docref [_resetallbinds];
docident [scopesens] [Mouse sensitivity while scoped.];
docargument [N] [scoped sensitivity] [min 0/max 1000/default 0];
docremark [If zero, autoscopesens determines, how sensitivity is changed during scoping.];
docref [sensitivity];
docref [sensitivityscale];
docref [autoscopesens];
docref [scopesensscale];
docident [scopesensscale] [Change sensitivity when scoping.];
docargument [N] [factor to change sensitivity while scoped] [min 0.001/max 1000.0/default 0.5];
docremark [If used, scoped sens = sensitivity * scopesensscale (roughly). Ignored, if autoscopesens is set.];
docref [sensitivity];
docref [sensitivityscale];
docref [scopesens];
docref [autoscopesens];
docident [sdl_xgrab_bug] [Enable a workaround for buggy SDL X11 pointer grabbing.];
docargument [B] [boolean] [1:use workaround min 0/max 1/default 0];
docremark [On Windows this is variable is not available. X11 is a *nix windowing system.];
docremark [If set to 1 and relativemouse is on too, the workaround using XGrabPointer will be used.];
docref [relativemouse];
docident [searchbinds] [Searches keybinds (bound with 'bind'), returns keys with matching contents.];
docargument [S] [search string] [] [0];
docremark [This is the inverse of 'keybind'];
docexample [echo (searchbinds "reload")] [Output: R];
docref [bind];
docref [keybind];
docident [searcheditbinds] [Searches keybinds (bound with 'editbind'), returns keys with matching contents.];
docargument [s] [search string] [] [0];
docremark [This is the inverse of 'keyeditbind'];
docexample [echo (searcheditbinds "toggleocull")] [Output: F5];
docref [editbind];
docref [keyeditbind];
docident [searchspecbinds] [Searches keybinds (bound with 'specbind'), returns keys with matching contents.];
docargument [s] [search string] [] [0];
docremark [This is the inverse of 'keyspecbind'];
docref [specbind];
docref [keyspecbind];
docident [sensitivity] [Sets the mouse sensitivity.];
docargument [S] [the sensitivity] [floating-point min 0.001/max 1000/default 3.0];
docref [sensitivityscale];
docref [scopesens];
docref [autoscopesens];
docref [scopesensscale];
docident [sensitivityscale] [Scales all mouse sensitivity values.];
docargument [N] [the sensitivity scale] [min 0.001/max 1000.0/default 1.0];
docremark [Changes all sensitivity values. If unsure, keep this at "1".];
docref [sensitivity];
docref [scopesens];
docref [autoscopesens];
docref [scopesensscale];
docident [specbind] [Similar to bind, but is only active while spectating, where it overrides the regular bind for the specified key.];
docargument [K] [the key to bind] [string] [0];
docargument [A] [the command] [string, usually an alias] [0];
docref [bind];
docref [editbind];
docident [togglegrab] [Toggles grabbing of mouse and keyboard input in a game.];
docremark [Grabbing means that the mouse is confined to the AC, and nearly all keyboard input is passed directly to AC, and not interpreted by a window manager, if any. This is only useful when you run AC windowed.];
docsection [Editing]
docident [_ignoreillegalpaths] [Whether or not texture paths are scrutinized.];
docargument [B] [boolean] [1:yes=>ignore min 0/max 1/default 0];
docremark [If during mapload textureslots can't be filled and this is not set to 1 a "missing media" error is raised.];
docremark [It is used in the optional cubescript config/opt/convmap.cfg];
docref [loadnotexture];
docident [_nextentityispasted] [Set to 1 just before calling a newent command where all attributes are meant to be kept.];
docargument [B] [boolean] [1:yes=>keep attribute values min 0/max 1/default 0];
docremark [It is used in the pasteent scripting.];
docremark [When creating a new entity of type mapmodel, playerstart or CTF flag the orientation is taken from your current viewing angle. To disable this behaviour for one call only you set the value to of this to 1 and then issue your newentity call with all attributes given.];
docref [loadnotexture];
docident [addentity] [Adds an entity of the specified type at the current camera position.];
docargument [E] [the entity type or number] [light (1), playerstart (2), pistol (3), ammobox (4), grenades (5), health (6), helmet (7), armour (8), akimbo (9), mapmodel (10), ladder (12), ctf-flag (13), sound (14), clip (15), plclip (16)] [0];
docremark [It also returns the index number of the new entity, so that the other attributes can be set by editentity.];
docref [enumentities];
docref [editentity];
docref [deleteentity];
docident [addselection] [Selects the given area, as if dragged with the mouse holding editmeta.];
docargument [X] [the X coordinate] [] [0];
docargument [Y] [the Y coordinate] [] [0];
docargument [XS] [the length along the X axis] [] [0];
docargument [XY] [the length along the Y axis] [] [0];
docremark [This command is useful for making complex geometry-generating scripts. It adds a selection to the current list of selections. The dimensions of the current selections can be accessed by the commands selx, sely, selxs and selys. These commands return the list of coordinates corresponding to each selection.];
docremark [Coordinates are as follows: after a "newmap 6" the top-left corner (the one where the red dot points) are (8,8), the opposite corner is (56,56) (or (120,120) on a "newmap 7" etc.).];
docref [select];
docref [selectall];
docref [resetselections];
docref [expandselection];
docref [shrinkselection];
docref [enlargevdeltaselections];
docref [selx];
docref [sely];
docref [selxs];
docref [selys];
docref [selectionwalk];
docref [pushselections];
docref [editmeta];
docident [addtodoentity] [Adds the entity #index to the TODO list.];
docargument [I] [index] [] [0];
docargument [C] [comment] [] [0];
docremark [Entity errors during map load are automatically added to the list. The list is saved and restored with xmaps.];
docref [cleartodoentities];
docref [enumtodoentities];
docident [advancemaprevision] [Selects the increment of the map revision number for the next 'savemap'.];
docargument [N] [increment] [min 1/max 100/default 1];
docident [ambient] [Controls the ambient lighting of the map, i.e. how bright areas not affected by any light entities will appear.];
docargument [N] [the ambient color] [min 0x000000/max 0xFFFFFF/default 0];
docident [applymapsoundchanges] [During map editing, drop all mapsounds so they can be re-added.];
docident [arch] [Makes an arch out of the current selection.];
docargument [S] [side delta] [] [0];
docremark [The selection must be a heightfield before this command can be used. Will make the arch in the long direction, i.e when you have 6x2 cubes selected, the arch will span 7 vertices. Optionally, sidedelta specifies the delta to add to the outer rows of vertices in the other direction, i.e. give the impression of an arch that bends 2 ways (try "arch 2" on an selection of at least 2 thick to see the effect). Not all arch sizes are necessarily available, see config/prefabs.cfg.];
docref [archvertex];
docref [enlargearchslopeselections];
docident [archvertex] [Defines a vertex delta for a specific arch span prefab, used by the 'arch' command.];
docargument [S] [span value] [integer] [0];
docargument [V] [vertex value] [integer] [0];
docargument [D] [delta value] [integer] [0];
docremark [It returns the old value of the vertex, and if the vertex argument is omitted, doesn't change it.];
docremark [See config/prefabs.cfg for an example on usage.];
docident [automapconfig] [Enables the "automatic embedded map config data" feature.];
docremark [With the next map save the map config file will get renamed and the map config data stored inside the map file.];
docref [getautomapconfig];
docref [embedconfigfile];
docref [extractconfigfile];
docref [listheaderextras];
docident [calcmipstats] [Counts all the mips in the current map and prints their numbers as 1x1/2x2/4x4/8x8/16x16/32x32/64x64.];
docref [showmip];
docident [cleanedit] [Turns on/off clean edit mode.];
docargument [V] [sets cleanedit on/off] [0 (off), 1 (on)] [0];
docremark [While editing in clean edit mode, objects/guides not normally visible remain invisible.];
docremark [i.e. The grid guidelines, selection borders, entity sparkles, clips, playerstart arrows are hidden];
docref [togglecleanedit];
docident [clearents] [Deletes all entities of said type.];
docargument [T] [the entity type, see command 'newent'] [string] [0];
docref [delent];
docref [deleteentity];
docident [cleartodoentities] [Clears list of TODO entities.];
docargument [I] [index] [] [0];
docremark [The list is also deleted, when a new map is loaded.];
docremark [If an entity number is given as an argument, only entries for this entity are cleared.];
docref [addtodoentity];
docref [enumtodoentities];
docident [clearvantagepoint] [Clears a set parameters of vantage point.];
docref [setvantagepoint];
docref [getvantagepoint];
docref [gotovantagepoint];
docident [closestenttype] [Restricts 'closest entity' display to one entity type.];
docargument [A] [the entity type or number] [light (1), playerstart (2), pistol (3), ammobox (4), grenades (5), health (6), helmet (7), armour (8), akimbo (9), mapmodel (10), ladder (12), ctf-flag (13), sound (14), clip (15), plclip (16)] [0];
docremark [It returns the current value and not change the value if the argument is "-".];
docident [convertclips] [Converts the nearest entity (if its a clip or plclip) to its opposite type.];
docexample [convertclips] [Assuming the nearest entity is a clip, it will be converted to a plclip.];
docexample [convertclips] [Assuming the nearest entity is a plclip, it will be converted to a clip.];
docident [copy] [Copies the current selection into a buffer.];
dockey [C] [] [];
docref [paste];
docref [copyent];
docident [copyent] [Copies the current closest entity into a buffer.];
docremark [It also works with the menu list of copied entities. It works only while in edit mode.];
dockey [MINUS] [- (minus)] [];
docref [pasteent];
docref [copy];
docident [corner] [Makes the current selection into a "corner".];
docremark [Currently there is only one type of corner (a 45 degree one), only works on a single unit (cube) at a time. It can be positioned either next to 2 solid walls or in the middle of 2 higher floorlevels and 2 lower ones forming a diagonal (and similar with ceiling).];
docremark [In both cases, the corner will orient itself automatically depending on its neighbours, behaviour with other configurations than the 2 above is unspecified. Since the latter configuration generates possibly 2 floor and 2 ceiling levels, up to 4 textures are used: for example for the 2 floors the higher one will of the cube itself, and the lower one of a neighbouring low cube. You can make bigger corners at once by issuing "corner" on grid aligned 2x2/4x4/8x8 selections, with equal size solid blocks next to them.];
dockey [K] [] [];
docident [countwalls] [Returns the number of solid walls contained into the current selection.];
docargument [T] [the integer of type of the walls you want to count] [ 0 (solid), 1 (corner), 2 (floor heightfield), 3 (ceil heightfield), 4 (empty cube), 5 (semi solid)] [0];
docexample [echo (concat "The selection contains " (countwalls 0) "solid wall(s)")] [Output: The selection contains 3 solid wall(s)];
docident [delent] [Deletes the entity closest to the player.];
dockey [BACKSPACE] [] [];
docref [undelent];
docref [deleteentity];
docref [clearents];
docident [deleteentity] [Deletes a map entity.];
docargument [N] [entity index/number] [] [0];
docremark [Note: deleting an entity only marks it as unused. It will be completely removed after saving and loading the map.];
docref [delent];
docref [clearents];
docref [enumentities];
docref [addentity];
docref [editentity];
docref [undelent];
docref [getdeletedentities];
docref [unlistdeletedentity];
docident [deletemapmodelslot] [Deletes an unused mapmodel slot.];
docargument [N] [mapmodel slot number] [] [0];
docargument [P] [purge] [] [0];
docremark [If "purge" is specified as second argument, it also deletes an used slot (including all map entities which use that mapmodel).];
docremark [Also it enables automapconfig.];
docref [mapmodel];
docref [mapmodelslotname];
docref [mapmodelslotbyname];
docref [mapmodelslotusage];
docref [editmapmodelslot];
docref [mapmodelchanged];
docident [deletemapsoundslot] [Deletes an unused map sound slot.];
docargument [N] [map sound slot number] [] [0];
docargument [P] [purge] [] [0];
docremark [If "purge" is specified as second argument, it also deletes an used slot (including all map entities which use that sound).];
docremark [Also it enables automapconfig.];
docref [mapsound];
docref [mapsoundslotbyname];
docref [mapsoundslotusage];
docref [editmapsoundslot];
docref [mapsoundchanged];
docident [deletetextureslot] [Deletes an unused texture slot.];
docargument [N] [texture slot number] [0..255] [0];
docargument [P] [delete used slot?] [purge] [0];
docargument [R] [replacement slot] [0..255] [0];
docremark [If "purge" word is put as second argument, it also deletes an used slot. All mapmodels that use that texture as skin are changed to default skin. All world geometry, which uses the texture, is instead set to use slot #255 or a specified replacement slot. Slots below #5 always require "purge", no matter if they are in use (default slots).];
docremark [Also enables automapconfig.];
docref [texture];
docref [textureslotusage];
docref [textureslotusagelist];
docref [textureslotbyname];
docref [edittextureslot];
docref [edittexturestack];
docident [editaxis] [Returns a value for the main axis of player orientation.];
docargument [] [main axis of player orientation] [11 (X), 12 (Y), 13 (Z), 111 (-X), 112 (-Y), 113 (-Z) read-only];
docremark ["100" is added if the player is looking in the negative direction of the axis.];
docident [editentity] [Edits a map entity.];
docargument [N] [entity index/number] [] [0];
docargument [A] [list of attributes] [] [0];
docremark [It edits only parameters given a non-empty value. Returns the type and the values of all attributes (x, y, z, attr1 - attr7). It uses float values for some attributes, return values also may be float.];
docexample [echo (editentity 33)] [Prints all attributes of map entity number 33, for example "light 174 172 12 20 255 200 200 0 0 0"];
docexample [editentity 33 "" 173] [Changes the y-position of entity 33 to 173];
docref [entset];
docref [enumentities];
docref [addentity];
docref [deleteentity];
docident [editheight] [Changes the height of the current selection.];
docargument [T] [an integer denoting the type] [0 (floor), 2 (ceiling)] [0];
docargument [D] [the delta value to move it in] [1 (forwards), -1 (backwards)] [0];
dockey [LEFTBRACKET] [[] [moves downwards the selection in the floor];
dockey [RIGHTBRACKET] []] [moves upwards the selection in the floor];
dockey [O] [] [moves downwards the selection in the ceiling];
dockey [P] [] [moves upwards the selection in the ceiling];
docident [edithideentmask] [Integer variable containing a bitmask of hidden entity types.];
docident [editinfopanelmillis] [Update the edit info panel every N milliseconds.];
docargument [N] [milliseconds] [integer min 5/max 2000/default 80];
docref [updateeditinfopanel];
docref [hideeditinfopanel];
docident [editing] [A variable indicating if the game is in editmode.];
docargument [] [editmode in singleplayer] [1 (true), 0 (false) read-only];
docref [editing_sp];
docident [editing_sp] [A variable indicating if the game is in singleplayer editmode.];
docargument [] [editmode] [1 (true), 0 (false) read-only];
docref [editing];
docident [editingsettingsvisibletime] [How long the temporary bits of showeditingsettings are displayed.];
docargument [T] [time] [time in milliseconds min 750/max 75000/default 7500];
docremark [Slide in/out the boxes and/or text of the showeditingsettings display.];
docref [showeditingsettings];
docident [editmapmodelslot] [Edits the parameters of a mapmodel slot.];
docargument [N] [mapmodel slot number] [integer] [0];
docargument [R] [radius] [integer] [0];
docargument [H] [height] [integer] [0];
docargument [Z] [z-offset] [integer] [0];
docargument [0] [redundant, leave it at zero so you don't break the command] [0] [0];
docargument [P] [mapmodel path] [string] [0];
docremark [Edits the parameters of a mapmodel slot. Only non-empty parameters actually change something.];
docremark [The command returns the resulting data of the mapmodel slot. If only the mapmodel slot number is specified, no changes are made, but the current data is returned (also in non-edit mode). Therefore the command can be used to get and set parameters.];
docremark [If anything is changed, automapconfig is enabled.];
docexample [editmapmodelslot 33 "" "" -5] [sets the z-offset of slot #33 to -5 without affecting other parameters];
docexample [echo (editmapmodelslot 33)] [prints the current parameters of mapmodel slot #33 , for example: 0 0 0 0 "makke/lightbulb"];
docref [mapmodel];
docref [mapmodelslotname];
docref [mapmodelslotbyname];
docref [mapmodelslotusage];
docref [deletemapmodelslot];
docref [mapmodelchanged];
docident [editmapmsg] [Allows to edit the map message.];
docref [mapmsg];
docident [editmapsoundslot] [Edits path/name and maxuses parameters of a mapsound slot.];
docargument [N] [map sound slot number] [] [0];
docargument [P] [map sound path] [] [0];
docargument [M] [maxuses] [] [0];
docremark [Only non-empty parameters actually change something. The command returns the resulting data of the map sound slot. If only the map sound slot number is specified, no changes are made, but the current data is returned (also in non-edit mode). Therefore the command can be used to get and set parameters.];
docremark [If anything is changed, automapconfig is enabled.];
docref [mapsound];
docref [mapsoundslotbyname];
docref [mapsoundslotusage];
docref [deletemapsoundslot];
docref [mapsoundchanged];
docident [editmeta] [First modifier key for editing mode.];
docremark [Go to references mentioned below to see the use.];
dockey [LCTRL] [left Ctrl] [];
docref [addselection];
docref [entproperty];
docref [undelent];
docref [pasteent];
docref [editmetakeydown];
docref [editmeta2];
docident [editmeta2] [Second modifier key for editing mode.];
docremark [Go to references mentioned below to see the use.];
dockey [LCTRL] [left Shift] [];
docref [entproperty];
docref [undelent];
docref [editmeta2down];
docref [editmeta];
docident [editmeta2down] [Indicates if second editmeta key is pressed.];
docargument [] [state of the second editmeta key] [0: unpressed, 1: pressed read-only];
docref [editmeta2];
docident [editmetakeydown] [Indicates if editmeta key is pressed.];
docargument [] [state of the first editmeta key] [0: unpressed, 1: pressed read-only];
docref [editmeta];
docident [edittag] [];
docargument [T] [tag] [integer value] [0];
docident [edittagclip] [Sets tag clip type of all selected cubes.];
docargument [T] [type] [0 (none), 64 (clip), 128 (plclip)] [0];
docremark [Type can be numeric or a keyword.];
dockey [KP1] [1 on the keypad] [sets a tag clip: none];
dockey [KP2] [2 on the keypad] [sets a tag clip: clip];
dockey [KP3] [3 on the keypad] [sets a tag clip: plclip];
docref [transformclipentities];
docident [edittex] [Changes the texture on current selection by browsing through a list of textures directly shown on the cubes.];
docargument [T] [an integer denoting the type] [0 (floor), 1 (lower or wall), 2 (ceiling), 3 (upper wall)] [0];
docargument [D] [the direction you want to cycle the textures in] [1 (forwards), -1 (backwards)] [0];
docremark [Default keys are the six keys above the cursor keys, which each 2 of them cycle one type (and numpad 7/4 for upper-wall).];
docremark [The way this works is slightly strange at first, but allows for very fast texture assignment. All textures are in 3 individual lists for each type (both wall kinds treated the same), and each time a texture is used, it is moved to the top of the list. So after a bit of editing, all your most frequently used textures will come first when pressing these keys, and the most recently used texture is set immediately when you press the forward key for the type. These lists are saved with the map. Make a selection (including wall bits) and press these keys to get a feel for what they do.];
dockey [INSERT] [Insert] [browses forward through floor textures];
dockey [DELETE] [Delete] [browses backward through floor textures];
dockey [HOME] [Home] [browses forward through wall textures];
dockey [END] [End] [browses backward through wall textures];
dockey [PAGEUP] [Page Up] [browses forward through ceiling textures];
dockey [PAGEDOWN] [Page Down] [browses backward through ceiling textures];
dockey [KP4] [7 on the keypad] [browses forward through upper-wall textures];
dockey [KP7] [4 on the keypad] [browses backward through upper-wall textures];
dockey [X+MOUSE4|MOUSE5] [X + mouse scroll] [scrolls wall and upper-wall textures];
dockey [Z+MOUSE4|MOUSE5] [Z + mouse scroll] [scrolls floor or ceiling textures];
docref [hudtexttl];
docident [edittextureslot] [Edits the parameters of a texture slot.];
docargument [N] [texture slot number] [0..255] [0];
docargument [S] [scale] [] [0];
docargument [P] [path] [] [0];
docremark [Only non-empty parameters actually change something. The command returns the resulting data of the texture slot. If only the texture slot number is specified, no changes are made, but the current data is returned (also in non-edit mode). Therefore the command can be used to get and set parameters.];
docremark [If anything is changed, automapconfig is enabled.];
docexample [edittextureslot 33 "" "arcitool/rohbaubims.jpg"] [Sets texture name of slot #33];
docexample [echo (edittextureslot 33)] [Prints the current parameters of texture slot #33, for example: 0 "zastrow/3wood_crate_10.jpg"];
docref [texture];
docref [textureslotusage];
docref [textureslotusagelist];
docref [textureslotbyname];
docref [deletetextureslot];
docref [edittexturestack];
docident [edittexturestack] [Puts a texture slot in a "last used" list up front.];
docargument [S] [surface] [floor, wall or ceiling] [0];
docargument [N] [texture slot number] [0..255] [0];
docremark [The first parameter picks the list, the second parameter is the texture slot number to be used for the next edit.];
docref [texture];
docref [textureslotusage];
docref [textureslotusagelist];
docref [textureslotbyname];
docref [deletetextureslot];
docref [edittextureslot];
docident [edittoggle] [Switches between map edit mode and normal.];
docremark [In map edit mode you can select bits of the map by clicking or dragging your crosshair on the floor or ceiling (using the "attack" identifier, normally MOUSE1), then use the identifiers below to modify the selection. While in edit mode, normal physics and collision don't apply (clips), and key repeat is ON. Note that if you fly outside the map, cube still renders the world as if you were standing on the floor directly below the camera.];
dockey [E] [] [];
docref [select];
docident [embedconfigfile] [Loads the map config file, includes it in the map header and renames the original config file.];
docremark [Embedded config files take precedence over regular config files.];
docref [automapconfig];
docref [extractconfigfile];
docref [listheaderextras];
docident [enlargearchslopeselections] [Automatically enlarge selections after placing arches or slopes.];
docargument [N] [0: don't enlarge selection, 1: enlarge selection] [min 0/max 1/default 0];
docremark [If the variable is set to 1, after placing an arch or a slope, the selection is enlarged, so that the arch or slope can be changed by vdelta increments (for example, to raise an arch in 1/4 cube increments).];
docremark [If the variable is set to 0 (which is default), the selection remains unchanged. This way, for example, the arch can be raised or lowered by regular cube increments.];
docref [arch];
docref [slope];
docident [enlargevdeltaselections] [Enlarges all selections by one cube in x- and y- direction, to change a selection from the "cube area" to the "vdelta area".];
docargument [I] [incremente] [] [0];
docremark [If an argument is given, it is used as increment value, so, for example "enlargevdeltaselections -1" undoes a previous enlargement.];
docref [select];
docref [addselection];
docident [entproperty] [Changes property (attributes) of the closest entity.];
docargument [A] [attribute index] [0..6 (atrr1 - attr7), 11..13 (x, y, z)] [0];
docargument [I] [attribute increment] [] [0];
docargument [U] [unscaled flag] [0 or 1] [0];
docremark [For example 'entproperty 0 2' when executed near a lightsource would increase its radius by 2.];
docremark [Keys 1..7, in combination with the scrollwheel, can be used to alter the new entity attributes (attr1 - attr7). Key "M", in combination with the scrollwheel, can be used to move the entity. Pressing editmeta speeds up the scrolling. Pressing editmeta2 enables unscaled editing of entity attributes.];
docremark [Increment is a float for some attributes. If "unscaled" flag is "1", increment is applied as unscaled integer, which means, it will change float attributes at their highest resolution.];
docremark [If 100 is added to the attribute index parameter, the sign of the increment value is changed.];
docref [getclosestent];
docref [getentattr];
docref [getenttype];
docref [editmeta];
docref [editmeta2];
docident [entset] [Edits the closest entity.];
docargument [E] [the entity type or number] [light (1), playerstart (2), pistol (3), ammobox (4), grenades (5), health (6), helmet (7), armour (8), akimbo (9), mapmodel (10), ladder (12), ctf-flag (13), sound (14), clip (15), plclip (16)] [0];
docargument [attr1] [see newent 'type'] [] [0];
docargument [attr2] [see newent 'type'] [] [0];
docargument [attr3] [see newent 'type'] [] [0];
docargument [attr4] [see newent 'type'] [] [0];
docargument [attr5] [see newent 'type'] [] [0];
docargument [attr6] [see newent 'type'] [] [0];
docargument [attr7] [see newent 'type'] [] [0];
docremark [Overwrites the closest entity with the specified attributes. Some attributes may be specified as floats.];
docref [editentity];
docident [entstats] [Prints some map entity statistics to the console.];
docident [enumentities] [Returns a list of the numbers of all entities of that type.];
docargument [type] [the entity type] [light, sound, clip, plclip, playerstart, pistol, ammobox, grenades, health, armour, akimbo, mapmodel, ladder, ctf-flag, helmet] [0];
docremark [If no such entities exist or the entity type could not be recognised, the list is empty.];
docref [gotoentity];
docref [addentity];
docref [editentity];
docref [deleteentity];
docident [enumtodoentities] [Returns a list of TODO entities.];
docremark [Returns entity index number and comment for every entry.];
docref [addtodoentity];
docref [cleartodoentities];
docref [xmap_list];
docident [equalize] [Levels the floor/ceiling of the selection.];
docargument [T] [an integer denoting the type] [0 (floor), 2 (ceiling)] [0];
dockey [COMMA] [,] [equalizes the selection on the floor];
dockey [PERIOD] [.] [equalizes the selection on the ceiling];
docident [expandselection] [Increases the size of the current selection by N cubes on all sides.];
docargument [N] [number of cubes] [integer] [0];
docremark [Instead of manually executing this command, you can bind "domodifier 11" to a key. While holding this key you can expand/shrink the current selection with the mouse wheel.];
docremark [It works also with multiple selections.];
docref [select];
docref [addselection];
docref [shrinkselection];
docident [extractconfigfile] [Writes an embedded config file to a separate file and removes it from the map header.];
docref [automapconfig];
docref [embedconfigfile];
docident [flrceil] [A variable indicating if the player looks at the floor or at the ceiling.];
docargument [] [flrceil] [0 (floor), 2 (ceiling) read-only];
docident [fullbright] [Sets all light values to fullbright.];
docargument [B] [sets fullbright on or off] [0 (off), 1 (on) min /max /default ];
docremark [Will be reset when you issue a 'recalc'. Only works in edit mode.];
dockey [F7] [] [toggles fullbright];
docident [fullbrightlevel] [Sets the level of brightness to use when using the command "/fullbright 1".];
docargument [V] [Light intensity level] [min 0/max 255/default 176];
docident [getautomapconfig] [Returns "1" if automapconfig is already enabled, "0" otherwise.];
docref [automapconfig];
docident [getclosestent] [Returns the entity index number of the closest entity (or of the pinned entity, if one exists).];
docremark [Returns -1, if no entities are on the map.];
docremark [Returns always exactly the entity, that edit commands like delent will use next.];
docref [toggleclosestentpin];
docref [entproperty];
docref [getentattr];
docref [getenttype];
docident [getdeletedentities] [Returns a list of deleted entities.];
docremark [Each line contains the entity type, the position and all seven attributes.];
docref [undelent];
docref [unlistdeletedentity];
docref [deleteentity];
docident [getentattr] [Returns the value of the selected attribute of the nearest entity.];
docargument [A] [attribute index] [0..6] [0];
docargument [U] [unscaled flag] [0 or 1] [0];
docremark [It returns float values for some attributes. If "unscaled" flag is "1", raw integer values (representing the highest resolution) are returned.];
docref [entproperty];
docref [getenttype];
docident [getenttype] [Returns the entity type of the nearest entity.];
docref [entproperty];
docref [getentattr];
docident [getmapmodelattributes] [Returns values for all attributes to a specific mapmodel.];
docargument [P] [model path] [] [0];
docargument [N] [attribute name] [keywords, desc, defaults, usage, author, license, distribution, version] [0];
docremark [If modelpath is a number, it is interpreted as index for the list of models in the current map config. If no attribute name is specified, all attributes are printed to the console instead.];
docref [mapmodel];
docref [listallmapmodelattributes];
docref [mapmodelregister];
docref [mdlattribute];
docident [getmapsoundlist] [Returns a list of all *.wav and *.ogg files below packages/audio/ambience.];
docref [mapsound];
docref [getmapsoundorigin];
docident [getmapsoundorigin] [Returns the location where the map sound file actually can be found.];
docargument [N] [filename or partial path with filename] [] [0];
docremark [The possibilities are:];
docremark ["official": mapsound file was found in the working directory, which indicates an official mapsound.];
docremark ["custom": mapsound file was found in the profile directory, which means, the mapsound is either manually installed or downloaded.];
docremark ["package dir #x": mapsound file was found in a mod directory.];
docremark ["<file not found>"];
docref [mapsound];
docref [getmapsoundlist];
docident [getmaptimestamp] [Returns the "last written" timestamp of the current map in the requested format.];
docargument [fmt] [format] [strftime format] [0];
docremark [If "fmt" starts with "U", the time is given as UTC, otherwise as local time. If "fmt" is empty, or not given or just the "U", the format defaults to "YYYYMMDD_hh.mm.ss". Use "%c" to get something nicer.];
docremark [The same format options as in strftime().];
docident [gettexturelist] [Returns a table of all texture files fitting a certain description.];
docargument [includes] [Optional list of path prefixes to include in the table.] [] [0];
docargument [excludes] [Optional list of path prefixes to exclude from the table.] [] [0];
docargument [extensions] [Optional list of filename extensions to include in the table.] [] [0];
docremark [All files found under packages/textures are examined.];
docremark [By default, the command returns a list with two columns: path and filename. If "excludes" is exactly one path prefix to exclude, the table gets a third column with path names without that prefix. If "extensions" is exactly one extension which does not start with the character '.', the table gets an additional (third or fourth) column containing file names without that extension.];
docexample [echo (gettexturelist)] [Outputs two columns like "noctua/wall" "wall02.jpg"];
docexample [echo (gettexturelist "" "map_editor skymaps")] [Outputs two columns like "noctua/wall" "wall02.jpg", but omits skymaps and special textures for the editor];
docexample [echo (gettexturelist makke)] [Outputs only textures by makke and adds a third column like "makke/rattrap" "rb_box_03.jpg" "/rattrap"];
docexample [echo (gettexturelist "skymaps/" "" "_ft.jpg")] [Outputs four columns like "skymaps/egypt" "egypt_ft.jpg" "egypt" "egypt", "skymaps/humus" "meadow_ft.jpg" "humus" "meadow"];
docref [texture];
docref [gettextureorigin];
docident [gettextureorigin] [Returns the location where the texture file actually can be found.];
docargument [N] [filename or partial path with filename] [] [0];
docremark [The possibilities are:];
docremark ["official": texture file was found in the working directory, which indicates an official texture.];
docremark ["custom": texture file was found in the profile directory, which means, the texture is either manually installed or downloaded.];
docremark ["package dir #x": texture file was found in a mod directory.];
docremark ["<file not found>"];
docref [texture];
docref [gettexturelist];
docident [getvantagepoint] [Returns string with coordinates of vantage point or empty string, if none is set.];
docref [setvantagepoint];
docref [gotovantagepoint];
docref [clearvantagepoint];
docident [getwatercolour] [Returns a string with the four components of the water colour: red, green, blue and alpha.];
docexample [echo (getwatercolor)] [Output: 20 25 20 178];
docref [watercolour];
docref [setwatercolour];
docident [getxmaplist] [Returns a list of all regular xmaps in memory, or, if 'what' is "bak", the details of a stored backup xmap.];
docargument [w] [what] [bak] [0];
docremark [Each xmap is listed with nickname and description.];
docref [xmap_list];
docident [gonextplayerstart] [Visit next or previous player spawn entity.];
docargument [N] [direction] [none or 1: next, -1: previous] [0];
docref [nextplayerstart];
docident [gotoentity] [Jump to the location of a map entity.];
docargument [N] [the entity number] [] [0];
docremark [You can get the entity number with use "enumentities" command.];
docref [enumentities];
docident [gotoposition] [Only in edit mode: gets and sets camera position.];
docargument [x] [X coordinate] [float] [0];
docargument [y] [Y coordinate] [float] [0];
docargument [z] [Z coordinate] [float] [0];
docargument [yaw] [yaw] [integer] [0];
docargument [pitch] [pitch] [integer] [0];
docremark [Returns x, y, z, yaw and pitch. Sets x, y, z, yaw and pitch, if the parameter is not an empty string.];
docexample [echo (gotoposition)] [Output: 67.7 78.6 5.5 8 0];
docexample [gotoposition "" "" "" 180 0] [Change yaw and pitch to look straight in +y direction.];
docident [gotovantagepoint] [Sets camera position in vantage point.];
docremark [It returns 1, if the map actually has a vantage point set.];
docref [setvantagepoint];
docref [getvantagepoint];
docref [clearvantagepoint];
docident [guidetoggle] [Enables or disables a special set of default textures while editing.];
docremark [The textures in "packages/textures/map_editor" are used.];
docident [heightfield] [Marks the current selection as a heightfield.];
docargument [T] [an integer denoting the type] [0 (floor), 2 (ceiling)] [0];
docremark [It marks the current selection as a heightfield, with T being floor or ceiling, as above. A surface marked as heightfield will use the vdelta values (see below) of its 4 corners to create a sloped surface. To mark a heightfield as normal again (ignoring vdelta values, set or not) use "solid 0".];
docremark [Heightfields should be made the exact size that is needed, not more not less. The most important reason for this is that cube automatically generates "caps" (side-faces for heightfields) only on the borders of the heightfield. This also means if you have 2 independent heightfields accidentally touch each other, you will not get correct caps. Also, a heightfield is slightly slower to render than a non-heightfield floor or ceiling. Last but not least, a heightfield should have all the same baseheight (i.e. the height determined by a normal editheight operation) to get correct results.];
dockey [H] [] [makes the selection on the floor a heightfield];
dockey [I] [] [makes the selection on the ceiling a heightfield];
docref [vdelta];
docident [hideeditinfopanel] [Hide the edit info panel.];
docargument [N] [0: show, 1: hide] [min 0/max 1/default 0];
docref [updateeditinfopanel];
docref [editinfopanelmillis];
docident [hideeditslotinfo] [Hide the closest entity filename info.];
docargument [N] [0: show info always, 1: only show "unassigned slot" if necessary, 2: never show info] [min 0/max 2/default 0];
docident [hudtexttl] [Show preview of textures during editing.];
docargument [T] [time to show texture preview [ms]] [min 0/max 10000/default 2500];
docremark [When textures of the map geometry are changed, five textures around the current pick from the "last used" stack are shown.];
docremark [The texture assigned to the "sky" slot is not shown. Instead, a plain blue rectangle is used.];
docref [edittex];
docident [listallmapmodelattributes] [Returns a table of all known mapmodels.];
docargument [N] [list of attribute names] [explodekeywords, sortby: keywords, desc, defaults, usage, author, license, distribution, version] [0];
docremark [Each model is listed with the modelpath and the values for the requested attributes. To be used instead of a fixed table in menu_edit.cfg.];
docremark [In addition to attribute names, the function also allows the keywords "explodekeywords" and "sortby:" as arguments. If "explodekeywords" is given, all mapmodels with more than one keyword are listed multiple times, once for each keyword. If an attribute name is preceeded by "sortby:" the list will be sorted by this table column. If "sortby:" is used several times, this first sort will have highest priority. The list is always sorted by path by default.];
docexample [listallmapmodelattributes sortby: author sortby: desc explodekeywords] [];
docref [mapmodel];
docref [getmapmodelattributes];
docref [mapmodelregister];
docref [mdlattribute];
docident [listheaderextras] [Returns a list with additional data ("header extras") from current map header.];
docremark [The header extras can be permanent, like the embedded config file, or can be used only once after map load, like the undo/redo data. Additional extra data can be easily added and will not break backward compatibility.];
docref [automapconfig];
docref [embedconfigfile];
docident [loadallmapmodels] [Tries to load mapmodels from all paths below packages/models/mapmodels.];
docremark [It will throw a lot of error messages, because not all directories contain models to load. This command can be used to build or rebuild the complete list of all available mapmodels. It is only necessary, if models are added manually to the directories, since every mapmodel gets added to the list when it is loaded - which takes care of all automatically downloaded models.];
docref [mapmodel];
docref [mapmodelregistryclear];
docident [mapareacheck] [Calculates some key values to determine map geometry viability.];
docargument [W] [what] [vdelta, steepest, total, pprest, pp (default)] [0];
docremark [It returns different sets of statistics, depending on the keyword "what":];
docremark ["vdelta" - returns table of numbers of cubes within a certain range of vdelta differences (steepness). First entry is "0..2 cubes steep", next is "2..4" and so on.];
docremark ["steepest" - returns the coordinates of the steepest heightfield cube.];
docremark ["total" - returns the number of non-solid cubes on the map.];
docremark ["pprest" - returns the number of cubes _not_ visible from one of the probe positions.];
docremark ["pp" (default) - returns a table of all (currently 64) probe points of the map. Each probe point is listed with: x-coordinate, y-coordinate, floor height, area visible, volume of visible area, average height in visible area.];
docident [mapartist] [Adds artist info to a map.];
docargument [N] [Prints the map artist player ID] [print] [0];
docargument [] [Sets the map artist player ID to the player currently logged in] [set] [0];
docargument [] [Returns the current map artist player ID] [get] [0];
docargument [] [Erases an existing map artist record in the current map] [clear] [0];
docref [modeinfo];
docident [mapbackupsonsave] [Determines if map backups (.bak) should be created when a map is saved.];
docargument [N] [0 off, 1 on] [min 0/max 1/default 1];
docident [mapenlarge] [Enlarges the current map.];
docremark [This command will make the current map 1 power of two bigger. So a size 6 map (64x64 units) will become a size 7 map (128x128), with the old map in the middle (from 32-96) and the new areas solid.];
docref [newmap];
docref [mapsize];
docref [mapshrink];
docident [mapinfo_comment] [Sets the map comment string.];
docargument [C] [comment] [string] [0];
docremark [The variable is stored withing the header of a map file. The comment string is ignored, as long as no map license string is set.];
docremark [You can get the comment string with the $mapinfo_comment variable.];
docref [mapinfo_license];
docident [mapinfo_license] [Sets the map license.];
docargument [L] [type of license] [string] [0];
docremark [The name of license is stored withing the header of a map file. The license string is meant to hold an abbreviated name of the license, picked from a list of known map licenses.];
docremark [You can get the type of map license with the $mapinfo_license variable.];
docref [mapinfo_comment];
docident [mapmodelchanged] [Set to "1" with every command that changes mapmodel slots.];
docargument [N] [0: not changed, 1: changed] [min 0/max 1/default 0];
docremark [Should be used to trigger a rebuild of mapmodel menus.];
docref [mapmodel];
docref [editmapmodelslot];
docref [deletemapmodelslot];
docident [mapmodelregister] [Adds values for all attributes to a specific mapmodel.];
docargument [P] [model path] [] [0];
docargument [V] [list of all attribute values] [] [0];
docremark [This is used to restore the cached values from config/mapmodelattributes.cfg during game start. It does not actually verify of load the model.];
docref [mapmodel];
docref [getmapmodelattributes];
docref [listallmapmodelattributes];
docref [mdlattribute];
docref [mapmodelregisterclear];
docident [mapmodelregistryclear] [Deletes all loaded mapmodel attributes.];
docref [mapmodel];
docref [mapmodelregister];
docref [getmapmodelattributes];
docref [listallmapmodelattributes];
docref [mdlattribute];
docref [loadallmapmodels];
docident [mapmodelslotbyname] [Returns the slot number registered in the map config file of the model with the given name.];
docargument [M] [mapmodel name (with path)] [] [0];
docexample [echo (mapmodelslotbyname "mapmodels/makke/platform_bridge")] [Output: 5];
docref [mapmodel];
docref [mapmodelslotname];
docref [mapmodelslotusage];
docref [editmapmodelslot];
docref [deletemapmodelslot];
docident [mapmodelslotname] [Returns the map model name (and path) of the mapmodel registered in the given slot number in the map config file.];
docargument [N] [mapmodel slot number] [] [0];
docref [mapmodel];
docref [mapmodelslotbyname];
docref [mapmodelslotusage];
docref [editmapmodelslot];
docref [deletemapmodelslot];
docident [mapmodelslotusage] [Returns a list of map entity indices which use a certain mapmodel slot.];
docargument [N] [mapmodel slot number] [] [0];
docremark [If the mapmodel is unused, it returns an empty string.];
docremark [It returns a single space, if the model slot is not used by any map entity, but is required by another model (with entities).];
docref [mapmodel];
docref [mapmodelslotname];
docref [mapmodelslotbyname];
docref [editmapmodelslot];
docref [deletemapmodelslot];
docident [mapmodelzoff] [Allows negative z-offsets for mapmodels.];
docargument [N] [mapmodel slot number] [] [0];
docremark [A mapmodel entity is placed at a z-coordinate that is based on the floor height of map geometry and a z-offset. The z-offset is a sum of the entity attribute 3 and the third mapmodel slot parameter. The entity z-offset can range from 0 to 255 while the mapmodel slot parameter can be any integer including negative numbers. So, to place a mapmodel below floor height, the mapmodel slot parameter has to be negative.];
docremark ["mapmodelzoff" script decreases the mapmodel slot parameter by one and increases the z-offset of every mapmodel which uses that slot also by one. This means, that all mapmodel are exact in the same place afterwards - but the entity z-offset now has room to lower the mapmodel by one more cube.];
docremark [If you need more z-offset available, run the script several times.];
docident [mapmrproper] [Cleanups hidden map attributes.];
docremark ["mapmrproper" tries to optimize hidden attributes of maps in a way, that the map can be handled in bigger chunks by the renderer.];
docremark [The mipmapping routine does not take into account, if certain textures of a cube are visible at all, when it collects otherwise identical cubes to be handled en-bloc. "mapmrproper" changes invisible textures in a way, that the cubes are in fact identical - so, that the mipmapper is satisfied. The optimizer does not change any map properties that are visible in any way.];
docremark [Before any changes are made, mapmrproper creates a backup, which can be restored by "undo" command. Enable mipstats ("showmip" command), to see, what has been done.];
docref [showmip];
docident [mapmsg] [Sets the map message, which will be displayed when the map loads.];
docargument [M] [The map message] [string] [0];
docremark [You will need to use quote marks around the message, otherwise it save the message correctly.];
docremark [For example: /mapmsg "Map By Author"];
docremark [You can get the current map message with the $mapmsg variable.];
docref [editmapmsg];
docident [mapshrink] [Reduces the world size by 1.];
docremark [This command will make the current map 1 power of two smaller. So a size 7 map (128x128) will become a 6 size map (64x64 units), by removing 32 cubes from each side. The area to be removed needs to be empty (= all solid).];
docref [newmap];
docref [mapsize];
docref [mapenlarge];
docident [mapsize] [Outputs the mapsize.];
docref [newmap];
docref [mapenlarge];
docref [mapshrink];
docident [mapsoundchanged] [Set to "1" with every command that changes mapsound slots.];
docargument [N] [0: not changed, 1: changed] [min 0/max 1/default 0];
docremark [Should be used to trigger a rebuild of mapsound menus.];
docref [mapsound];
docref [editmapsoundslot];
docref [deletemapsoundslot];
docident [mapsoundslotbyname] [Returns the list of numbers of all mapsound slots which use that sound file.];
docargument [N] [map sound filename] [] [0];
docref [mapsound];
docref [mapsoundslotusage];
docref [editmapsoundslot];
docref [deletemapsoundslot];
docident [mapsoundslotusage] [Returns a list of map entity indices which use a certain map sound slot.];
docargument [N] [map sound slot number] [] [0];
docremark [If the sound is unused, it returns an empty string.];
docref [mapsound];
docref [mapsoundslotbyname];
docref [editmapsoundslot];
docref [deletemapsoundslot];
docident [modeinfo] [Adds modeinfo info to a map.];
docargument [N] [Lists current modeinfo entries] [list] [0];
docargument [] [Returns list of current modeinfo entries] [get] [0];
docargument [] [Erases current list of modeinfo entries] [clear] [0];
docargument [] [Specifies flags for a list of modes] [<modelist> <modeflags>] [0];
docremark [See possibilities of mode list and flags (keywords) in config/maprot.cfg file. To use flags for all modes you can use "all" value instead of mode list.];
docref [mapartist];
docident [movemap] [Moves the whole map (including all entities) in the specified direction.];
docargument [dX] [x-offset] [] [0];
docargument [dY] [y-offset] [] [0];
docargument [dZ] [z-offset] [] [0];
docident [newent] [Adds a new entity.];
docargument [E] [the entity type or number] [light (1), playerstart (2), pistol (3), ammobox (4), grenades (5), health (6), helmet (7), armour (8), akimbo (9), mapmodel (10), ladder (12), ctf-flag (13), sound (14), clip (15), plclip (16)] [0];
docargument [attr1] [see newent 'type'] [] [0];
docargument [attr2] [see newent 'type'] [] [0];
docargument [attr3] [see newent 'type'] [] [0];
docargument [attr4] [see newent 'type'] [] [0];
docargument [attr5] [see newent 'type'] [] [0];
docargument [attr6] [see newent 'type'] [] [0];
docargument [attr7] [see newent 'type'] [] [0];
docremark [(x,y) is determined by the current selection (the red dot corner) and z by the camera height, of said type. The type of entity may optionally take attributes (depending on the entity).];
docident [newent akimbo] [Adds a new akimbo item.];
docident [newent ammobox] [Adds a new ammo box item.];
docident [newent armour] [Adds a new armour item.];
docident [newent clip] [Adds a clip entity.];
docargument [Z] [elevation above the ground] [integer] [0];
docargument [X] [X radius around the box center] [integer] [0];
docargument [Y] [Y radius around the box center] [integer] [0];
docargument [H] [height of the box] [integer] [0];
docremark [Defines a clipping box against which the player will collide.];
docremark [Use this clip type to clip visible obstacles like fences or the gas tank. If you only want to prevent a player from entering an area, use plclip instead.];
docident [newent ctf-flag] [Adds a CTF flag entity.];
docargument [T] [denotes the flag's team] [0 (CLA), 1 (RVSF)] [0];
docremark [Note that outside of edit mode, this entity is only rendered as flag if the current game mode is CTF.];
docident [newent grenades] [Adds a new grenades item.];
docident [newent health] [Adds a new health item.];
docident [newent helmet] [Adds a new helmet item.];
docident [newent ladder] [Adds a ladder entity.];
docargument [H] [the height of the ladder] [integer] [0];
docremark [Note that this entity is used for physics only, to create a visual ladder you will need to add a mapmodel entity too.];
docref [newent mapmodel];
docident [newent light] [Adds a new light entity.];
docargument [radius] [the light radius] [1..32] [0];
docargument [R] [red colour component, see remarks below] [1..255] [0];
docargument [G] [green colour component] [1..255] [0];
docargument [B] [blue colour component] [1..255] [0];
docremark [if only argument R is specified, it is interpreted as brightness for white light.];
docident [newent mapmodel] [Adds a map model to the map (i.e. a rendered md2/md3 model which you collide against but has no behaviour or movement).];
docargument [N] [The mapmodel identifier] [integer] [0];
docargument [Z] [Extra elevation above ground] [integer] [0];
docargument [T] [The map texture to use] [integer] [0];
docremark [The mapmodel identifier is the desired map model which is defined by the 'mapmodel' command. The order in which the mapmodel is placed in the map config file defines the mapmodel identifier. The map texture refers to a texture which is defined by the 'texture' command, if omitted the models default skin will be used. The 'mapmodel' and 'texture' commands are placed in the map config normally. Mapmodels are more expensive than normal map geometry, so do not use insane amounts of them to replace normal geometry.];
docident [newent pistol] [Adds a pistol magazine item.];
docident [newent playerstart] [Adds a new spawn spot.];
docremark [The yaw is taken from the current camera yaw.];
docident [newent plclip] [Adds a player clip entity.];
docargument [Z] [elevation above the ground] [integer] [0];
docargument [X] [X radius around the box center] [integer] [0];
docargument [Y] [Y radius around the box center] [integer] [0];
docargument [H] [height of the box] [integer] [0];
docremark [Defines a clipping box against which (only) the player will collide.];
docremark [Use this clip type to define no-go areas for players without visible obstacles, for example to prevent players from walking on a wall.];
docremark [Nades will not be affected by this clip type.];
docident [newent sound] [Adds a sound entity.];
docargument [N] [the sound to play] [integer] [0];
docargument [R] [the radius] [] [0];
docargument [S] [the size] [default 0] [0];
docargument [V] [the volume] [default 255] [0];
docremark [Will play map-specific sound so long as the player is within the radius. However, only up to the maxuses allowed for N (specified in the mapsound command) will play, even if the player is within the radius of more N sounds than the max. By default (size 0), the sound is a point source. Its volume is maximal at the entity's location, and tapers off to 0 at the radius. If size is specified, the volume is maximal within the specified size, and only starts tapering once outside this distance. Radius is always defined as distance from the entity's location, so a size greater than or equal to the radius will just make a sound that is always max volume within the radius, and off outside.];
docremark [A sound entity can be either ambient or non-ambient. Ambient sounds have no specific direction, they are 'just there'. Non-ambient sounds however appear to come from a specific direction (stereo panning). If S is set to 0, the sound is a single point and will therefore be non-ambient. However if S is greater than 0, the sound will be ambient as it covers a specified area instead of being a single point.];
docref [mapsound];
docident [newmap] [Creates a new map.];
docargument [S] [the size of the new map] [6..9] [0];
docremark [The new map has 2^S cubes. For S, 6 is small, 7 medium, 8 large.];
docref [mapsize];
docref [mapenlarge];
docref [mapshrink];
docident [nextclosestent] [Chooses another 'closest ent'.];
docremark [Use this, when two entities are placed in exactly the same location.];
docident [nextplayerstart] [Visit next player spawn entity.];
docargument [N] [team number] [0: CLA, 1: RVSF, 100: FFA] [0];
docref [gonextplayerstart];
docident [oldselstyle] [Enables or disables using squares to render the editing grid/current selection instead of triangles.];
docargument [N] [0 off, 1 on] [min 0/max 1/default 1];
docident [onNewMap] [This alias will automatically be executed when a new map is created via the "newmap" command.];
docremark [Does not affect the loading of an existing map.];
docref [newmap];
docref [mapstartonce];
docref [mapstartalways];
docident [paste] [Pastes a previously copied selection.];
docremark [To paste a selection back requires a same size selection at the destination location. If it is not the same size the selection will be resized automatically prior to the paste operation (with the red dot as anchor), which is easier for large selections.];
dockey [V] [] [];
docref [copy];
docident [pasteent] [Pastes a previously copied entity.];
docremark [It also works with the menu list of copied entities. It works only while in edit mode.];
docremark [Pressing "editmeta" while using "pasteent" opens the menu with a list of copied entities.];
docref [copyent];
docref [editmeta];
docident [perlin] [Generates a perlin noise landscape in the current selection.];
docargument [S] [the scale, frequency of the features] [default is 10] [0];
docargument [E] [the random seed] [integer] [0];
docargument [C] [cube size, how many cubes to generate a surface for at once (unused)] [] [0];
docremark [Keep the seed the same to create multiple perlin areas which fit with each other, or use different numbers if to create alternative random generations.];
docident [pointatent] [Enables or disables pointing at entity sparklies.];
docargument [B] [boolean] [0: nearest, 1: pointed at min 0/max 1/default 0];
docremark [If an entity is pointed at during disabling, it is pinned.];
docref [pointatentmaxangle];
docref [toggleclosestentpin];
docident [pointatentmaxangle] [Specifies the required precision for pointing at entities sparklies.];
docargument [N] [0: not changed, 1: changed] [float min 0.01/max 180.0/default 2.0];
docref [pointatent];
docident [preserveundosonsave] [Determines if undo data should be preserved on using "savemap" command.];
docargument [N] [0: don't preserve undos, 1: preserve undos] [min 0/max 1/default 0];
docremark [Undo data can be saved only in edit mode.];
docref [savemap];
docident [pushselections] [Stores the positions of all current selections.];
docremark [Can be used repeatedly. To restore the selections, type "popselections".];
docref [select];
docref [addselection];
docident [recalc] [Recomputes all there is to recompute about a map, currently only lighting.];
docident [redo] [Redoes editing operations undone by 'undo'.];
docremark [With editmeta pressed it also restores player position and selects the affected area.];
dockey [R] [] [];
docref [undo];
docref [editmeta];
docident [replace] [Repeats the last texture edit throughout the map.];
docremark [The way it works is intuitive: simply edit any texture anywhere, then using "replace" will replace all textures throughout the map in the same way (taking into account whether it was a floor/wall/ceil/upper too). If the there was more than one "old" texture in your selection, the one nearest to the red dot is used. This operation can't be undone.];
docident [rereadsoundlists] [Variable, which is set to "1" when a sound is downloaded.];
docargument [N] [is sound downloaded?] [0: no, 1: yes min 0/max 1/default 1];
docremark [Used to trigger menu rebuilds.];
docref [rereadtexturelists];
docident [rereadtexturelists] [Variable, which is set to "1" when a texture is downloaded.];
docargument [N] [is texture downloaded?] [0: no, 1: yes min 0/max 1/default 1];
docremark [Used to trigger menu rebuilds.];
docref [rereadsoundlists];
docident [resetselections] [Resets all current selections.];
docref [select];
docref [selectall];
docref [addselection];
docident [savemap] [Saves the current map.];
docargument [M] [file name of the map, see command 'map' for the naming scheme] [string] [0];
docremark [It makes a versioned backup (mapname_N.BAK) if a map by that name already exists. If the name argument is omitted, it is saved under the current map name.];
docremark [Where you store a map depends on the complexity of what you are creating: if its a single map (maybe with its own .cfg) then the "base" package is the best place. If its multiple maps or a map with new media (textures etc.) its better to store it in its own package (a directory under "packages"), which makes distributing it less messy.];
docremark [For "savemap" to save different maps during editing with undo data, the variable "preserveundosonsave" has to be "1". It is "0" by default. "savemap" when not editing saves optimised map, with no undo data.];
docref [map];
docref [savemapoptimised];
docref [preserveundosonsave];
docident [savemap9] [Saves a map in old map format 9 (may lose some map details that are not possible with format 9).];
docident [savemapoptimised] [Saves optimised the current map, with no undo data.];
docargument [M] [file name of the map, see command 'map' for the naming scheme] [string] [0];
docremark [It makes a versioned backup (mapname_N.BAK) if a map by that name already exists. If the name argument is omitted, it is saved under the current map name.];
docref [map];
docref [savemap];
docident [scalelights] [Scales all lights in the map.];
docargument [S] [size change (percentage)] [] [0];
docargument [I] [intensity change (percentage)] [] [0];
docremark [This command is useful if a map is too dark or bright but you want to keep the light entities where they are.];
docident [select] [Resets all current selections and selects the given area, as if dragged with the mouse.];
docargument [X] [the X coordinate] [] [0];
docargument [Y] [the Y coordinate] [] [0];
docargument [XS] [the length along the X axis] [] [0];
docargument [XY] [the length along the Y axis] [] [0];
docremark [This command is similar to addselection although "select" resets all selections.];
docref [addselection];
docref [selectall];
docref [resetselections];
docref [expandselection];
docref [shrinkselection];
docref [enlargevdeltaselections];
docref [selx];
docref [sely];
docref [selxs];
docref [selys];
docref [selectionwalk];
docref [pushselections];
docident [selectall] [Selects the whole map (minus the two cubes wide border).];
docref [select];
docref [addselection];
docref [resetselections];
docident [selectionflip] [Flips the selected part of the map at an axis.];
docargument [AXIS] [X or Y] [] [0];
docident [selectionrotate] [Rotates the selected part of the map in 90 degree steps.];
docargument [D] [steps] [] [0];
docremark [To rotate clockwise, use a positive number of steps. Note, that only quadratic selections can be rotated by 90 degrees.];
docident [selectionwalk] [Iterates over all cubes in all selections and executes "action" for each cube.];
docargument [action] [action] [] [0];
docargument [beginsel] [begin action before cubes action of each selection] [] [0];
docargument [endsel] [end action before cubes action of each selection] [] [0];
docremark [The cubes of every selection are framed by executions of "beginsel" and "endsel", i.e. for each new selection, before executing "action" for the cubes of that selection, "beginsel" is executed, and then, after actions for all cubes of that selection, "endsel" is executed. The action script is allowed to make changes to cube attributes, and if it does, an undo point is automatically added. "beginsel" and "endsel" are optional.];
docremark [While the scripts are executed, several aliases provide further info:];
docremark ["sw_cursel" - position and size of the current selection. Valid in all three scripts. Holds four integer values for x, y, xs, ys. See "select" command for details.];
docremark [(all following aliases are only valid during the execution of the action script and provide the attributes of one cube of the map)];
docremark ["sw_abs_x", "sw_abs_y", "sw_rel_x", "sw_rel_y" - absolute and relative (within the current selection) coordinates of the current cube. Read-only values.];
docremark ["sw_type" - type of the current cube. Can be 0..4 for SOLID, CORNER, FHF, CHF and SPACE. May be changed to other numerical value or keyword.];
docremark ["sw_floor", "sw_ceil" - floor and ceiling heights of the current cube. Range -128..127.];
docremark ["sw_wtex", "sw_ftex", "sw_ctex", "sw_utex" - texture slot indices for wall, floor, ceiling and upper wall of the current cube.];
docremark ["sw_vdelta", "sw_tag" - vdelta and tag values of current cube.];
docremark ["sw_r", "sw_g", "sw_b" - current light values of current cube. Can be edited, but only with temporary effect. Will be reset with the next light recalc.];
docremark [The command is mostly useful for statistics scripts (like counting cubes with certain attributes), but is can also be used for scripted editing, as the following (useless) example shows: selectionwalk [ += sw_floor (rnd 2) ]];
docref [select];
docref [addselection];
docident [selx] [Returns the x-coordinate of the westernmost (towards negative x) cube(s) in the current selection.];
docref [select];
docref [sely];
docref [selxs];
docref [selys];
docident [selxs] [Returns the x-span (size on the x-axis) of the current selection.];
docref [select];
docref [selx];
docref [sely];
docref [selys];
docident [sely] [Returns the y-coordinate of the northernmost (towards negative y) cube(s) in the current selection.];
docref [select];
docref [selx];
docref [selxs];
docref [selys];
docident [selys] [Returns the y-span (size on the y-axis) of the current selection.];
docref [select];
docref [selx];
docref [sely];
docref [selxs];
docident [settex] [Sets a texture for the current selection.];
docargument [T] [position of the texture to set in map cfg] [integer] [0];
docargument [t] [the type of the texture] [0 (floor), 1 (wall), 2 (ceil), 3 (upper wall)] [0];
docident [setvantagepoint] [Sets vantage point in current camera position.];
docremark [The vantage point is supposed to be a distinctive view on a map - like the angle from which the preview picture was taken. It is allowed to use when editing offline or spectating offline.];
docremark [A map can only have one vantage point.];
docref [gotovantagepoint];
docref [getvantagepoint];
docref [clearvantagepoint];
docident [setwatercolour] [Allows setting the components of the water colour independently.];
docargument [W] [what] [red (0), green (1), blue (2), alpha (3)] [0];
docargument [V] [value] [(0)1..255] [0];
docremark ["what" is either a keyword "red|green|blue|alpha" or the index number 0..3 and determines, which component is set to value.];
docexample [setwatercolour red 200] [- sets the red component to 200];
docref [watercolour];
docref [getwatercolour];
docident [shadowyaw] [Shadow yaw specifies the angle at which shadow stencils are drawn on a map.];
docargument [D] [degrees] [The angle in degrees to rotate the stencil shadows min 0/max 360/default 45];
docremark [When specifying shadowyaw, remember that the default angle is 45 degrees. The example below would make the shadows appear at 90 degrees (45 degrees more to the left).];
docexample [shadowyaw 90] [];
docident [showclips] [Show clips/plclips/mapmodel clips in edit mode.];
docargument [N] [-] [min 0/max 1/default 1];
docident [showeditingsettings] [A visual representation of hidden/shown entities. (may be used for more editing ephemerals later)];
docargument [P] [persistence] [0:off(*),1:short,2:text-short,3:permanent min 0/max 3/default 0];
docremark [If the value of edithideentmask is not 0 (meaning all entities shown) then even if showeditingsettings is 0 the display will show up on the first toggle into editmode.];
docremark [The values 1, 2 and 3 will make the display show up for every time you start editing. With 3 it will stay for ever.];
docremark [For 2 the text will disappear after a time but the boxes will stay for ever. For 1 everything is hidden after the duration of editingsettingsvisibletime.];
docref [edithideentmask];
docref [editingsettingsvisibletime];
docident [showfocuscubedetails] [Shows detailed geometry data of the cube inside editing focus.];
docremark [It shows on the HUD cube type, floor and ceiling heights, vdelta and all textures.];
dockey [F8] [] [];
docref [showmip];
docident [showgrid] [Show editing cursor grid.];
docargument [N] [-] [min 0/max 1/default 1];
docident [showladderentities] [Show ladder entities (as blue wireframes) in edit mode.];
docargument [N] [-] [min 0/max 1/default 0];
docident [showmapdims] [Prints map dimensions.];
docident [showmapstats] [Prints some map statistics.];
docident [showmip] [Toggles between showing what parts of the scenery are rendered.];
docremark [Shows what parts of the scenery are rendered using what size cubes and outputs some statistics about it. This can give map editors hints as to what architecture to align, textures to change, etc.];
docremark [If "showfocuscubedetails" is enabled, "showmip" stats on the HUD are hidden.];
dockey [F6] [] [];
docref [calcmipstats];
docref [showfocuscubedetails];
docident [showmodelclipping] [Show mapmodel clipping during edit mode.];
docargument [N] [-] [min 0/max 1/default 0];
docident [showplayerstarts] [Show all playerstarts in edit mode.];
docargument [N] [0: hide, 1: show] [min 0/max 1/default 0];
docremark [Set showplayerstarts to "1" to see a playermodel rendered at all playerstart entities.];
docident [showtagclipfocus] [Show the volume of a focused clip entity as a cloud of sparklies.];
docargument [B] [on/off] [0:off,1:on] [0];
docremark [To see the volume rather than the boundaries of a clip entity you can hold the B key in editing mode while pointing at it.];
dockey [B] [B] [while pressed clips are clouds of sparklies];
docident [showtagclips] [Show tagclips/tagplclips in edit mode.];
docargument [N] [-] [min 0/max 1/default 1];
docref [showtagclipfocus];
docref [taglife];
docref [tagnum];
docref [tagnumfull];
docident [shrinkselection] [Decreases the size of the current selection by N cubes on all sides.];
docargument [N] [number of cubes] [integer] [0];
docremark [Instead of manually executing this command, you can bind "domodifier 11" to a key. While holding this key you can expand/shrink the current selection with the mouse wheel.];
docremark [It works also with multiple selections.];
docref [select];
docref [addselection];
docref [expandselection];
docident [slope] [Makes a slope out of the current selection.];
docargument [X] [x delta step] [integer] [0];
docargument [Y] [y delta step] [integer] [0];
docremark [The selection must be a heightfield before this command can be used. The steps specify the slope with the red vertex as left-top, i.e. "slope 1 2" will make a slope that increases just 1 step from left to right, and is slightly steeper from top to bottom. "slope -6 0" decreases steeply from left to right, and does not slope at all from top to bottom. Note that like the vdelta command, an increasing vdelta goes further away from the player, regardless of floor or ceiling.];
docref [enlargearchslopeselections];
docident [solid] [Makes the current selection all solid (i.e. wall) or all non-solid.];
docargument [B] [an integer denoting the solid-ness] [0 (non-solid), 1..* (solid)] [0];
docremark [This operation retains floor/ceiling heights/textures while swapping between the two.];
dockey [F] [] [makes the selection a solid];
dockey [G] [] [makes the selection a space/non-heightfield];
docident [sortmapmodelslots] [Sorts all mapmoodel slots alphabetically and merges identical slots.];
docargument [nosort] [do not sort the list alphabetically] [] [0];
docargument [nomerge] [do not merge any slots] [] [0];
docargument [mergeused] [merge used and unused (identical) slots freely] [] [0];
docremark [By default, the list is sorted and only unused identical (with the same model and parameters) slots are merged. The keywords can be combined in any order. "nomerge" takes priority over "mergeused".];
docexample [sortmapmodelslots] [- sorts the mapmodel slot list alphabetically and merge unused identical slots. Merging an unused slot is pretty much the same as deleting it, so this command sorts the list and removes unneeded double entries];
docexample [sortmapmodelslots nosort] [- merges (deletes) unused double entries in the mapmodel slot list];
docexample [sortmapmodelslots nosort mergeused] [- merges double entries in the mapmodel slot list. If two identical entries are used in the map, all uses are mapped to the new combined slot. This leaves no visual changes on the map. Should be avoided, if mapmodel slots have been renamed manually - and the renaming isn't finished yet];
docexample [sortmapmodelslots mergeused] [- sorts the mapmodel slot list and merges all double entries];
docref [mapmodel];
docref [sorttextureslots];
docref [sortmapsoundslots];
docident [sortmapsoundslots] [Sorts all mapsound slots alphabetically and merges identical slots.];
docargument [nosort] [do not sort the list alphabetically] [] [0];
docargument [nomerge] [do not merge any slots] [] [0];
docargument [mergeused] [merge used and unused (identical) slots freely] [] [0];
docremark [By default, the list is sorted and only unused identical slots are merged. The keywords can be combined in any order. "nomerge" takes priority over "mergeused".];
docremark [See examples in the "sortmapmodelslots" reference.];
docref [mapsound];
docref [sortmapmodelslots];
docref [sorttextureslots];
docident [sorttextureslots] [Sorts all texture slots alphabetically and merges identical slots.];
docargument [nosort] [do not sort the list alphabetically] [] [0];
docargument [nomerge] [do not merge any slots] [] [0];
docargument [mergeused] [merge used and unused (identical) slots freely] [] [0];
docremark [By default, the list is sorted (except the first five) and only unused identical (with the same texture and scale factor) slots are merged. The keywords can be combined in any order. "nomerge" takes priority over "mergeused".];
docremark [It allows to manually sort also the first few slots by adding the slot number to move to the slots #1, #2, #3, #4 (for example "sorttextureslots 11 12 13 14" will move slot #11 to slot #1, #12 to #2, #13 to #3 and #14 to #4, and sort the rest texture slots).];
docremark [See examples in the "sortmapmodelslots" reference.];
docref [texture];
docref [sortmapmodelslots];
docref [sortmapsoundslots];
docident [stairs] [Places stairs in all selections.];
docargument [xs] [step width in x-direction] [] [0];
docargument [ys] [step width in y-direction] [] [0];
docremark ["xs" and "ys" determine the step width in x- and y-direction.];
docident [tagcliplinewidth] [The width of the tagclip lines.];
docargument [W] [width] [min 0.2/max 3/default 1];
docref [showtagclips];
docref [showtagclipfocus];
docident [taglife] [Fading time of sparklies in focused on tagclip volume];
docargument [T] [time] [milliseconds min 1/max 1000/default 30];
docremark [source comments suggest this may become hardwired in the future];
docref [showtagclips];
docref [showtagclipfocus];
docref [tagnum];
docident [tagnum] [Number of particles in the focused on tagclip volume.];
docargument [C] [count] [particle count min 1/max 100/default 14];
docremark [source comments suggest this may become hardwired in the future];
docref [showtagclips];
docref [tagnum];
docref [tagnumfull];
docident [tagnumfull] [Number of particles in any tagclip volume - if showtagclipfocus is not 1.];
docargument [C] [count] [particle count min 1/max 100/default 0];
docremark [source comments suggest this may become hardwired in the future];
docref [showtagclips];
docref [showtagclipfocus];
docident [textureslotbyname] [Returns the list of numbers of all texture slots which use that texture file.];
docargument [N] [texture filename] [] [0];
docref [texture];
docref [textureslotusage];
docref [textureslotusagelist];
docref [edittextureslot];
docref [deletetextureslot];
docref [edittexturestack];
docident [textureslotusage] [Returns a list of mapmodels who use that texture as skin.];
docargument [N] [texture slot number] [0..255] [0];
docremark [If no mapmodel uses the texture, but world geometry does, a string of whitespace is returned. If the mapmodel is unused, an empty string is returned.];
docref [texture];
docref [textureslotusagelist];
docref [textureslotbyname];
docref [edittextureslot];
docref [deletetextureslot];
docref [edittexturestack];
docident [textureslotusagelist] [Returns a list of 256 numbers representing the number of uses for every texture slot.];
docargument [W] [what] [onlygeometry, onlymodels, onlymostvisible] [0];
docremark [If "what" is "onlygeometry", the uses as map model skin do not count.];
docremark [If "what" is "onlymodels", the uses in map geometry do not count.];
docremark [It returns two values per slot: usage and visibility.];
docremark [If "what" is "onlymostvisible", instead of the regular list, a list of only the most used wall, floor, ceiling and upper wall textures (alternating with the keywords) is returned.];
docexample [echo (textureslotusagelist onlymostvisible)] [Output: wall 211 floor 45 ceiling 0 "upper wall" 79];
docref [texture];
docref [textureslotusage];
docref [textureslotbyname];
docref [edittextureslot];
docref [deletetextureslot];
docref [edittexturestack];
docident [togglecleanedit] [Inverses the on/off state of cleanedit];
docref [cleanedit];
docident [toggleclosestentpin] [Toggles the pin on the "closest entity" selector.];
docremark [The HUD will indicate the lock by showing "pinned" instead of "closest" entity. All actions, that would otherwise affect the closest entity, will affect the pinned entity instead. Deleting the locked entity will unlock it.];
dockey [MOUSE3] [middle mouse button] [];
docref [getclosestent];
docident [toggleocull] [Turns occlusion culling on and off.];
docremark [The reason one may want to turn it off is to get an overview of the map from above, without having all occluded bits stripped out.];
dockey [F5] [] [];
docident [transformclipentities] [Transforms all full height clip entities to tag clips.];
docref [edittagclip];
docident [undelent] [Restores deleted entity.];
docargument [I] [index] [] [0];
docremark [If no index is specified, the last deleted entity is restored. If an index is given, the specified entity from the list of deleted entities is restored.];
docremark [BACKSPACE in combination with editmeta undeletes the last deleted entity.];
docremark [BACKSPACE in combination with editmeta2 brings up the menu "deleted entities".];
docref [getdeletedentities];
docref [unlistdeletedentity];
docref [deleteentity];
docref [editmeta];
docref [editmeta2];
docident [undo] [Multi-level undo of any of the changes caused by editing operations.];
docremark [With editmeta pressed it also restores player position and selects the affected area.];
dockey [U] [] [];
docref [redo];
docref [undolevel];
docref [undomegs];
docref [editmeta];
docident [undolevel] [Returns the number of undo steps that can be undone.];
docargument [L] [level] [integer] [0];
docremark [If argument "level" is given, as many steps are undone, until "level" steps remain.];
docremark [Unless memory limits delete states, undolevel commands can be undone with "redo".];
docexample [echo (undolevel)] [- prints number of previous editing steps, for example "55". Do some editing and:];
docexample [undolevel 55] [- undoes all changes to restore the previous state (if that state is still in memory)];
docref [undo];
docref [redo];
docref [undomegs];
docident [undomegs] [Sets the number of megabytes used for the undo buffer.];
docargument [N] [number of megabytes] [integer min 0/max 50/default 5];
docremark [Undo's work for any size areas, so the amount of undo steps per megabyte is more for small areas than for big ones (a megabyte fits 280 undo steps on a 16x16 area, but only 4 steps on a 128x128 area).];
docref [undo];
docref [undolevel];
docident [unlistdeletedentity] [Removes entities from the list of deleted entities.];
docargument [W] [which] [[a number], all or last] [0];
docremark [If <which> is a number, the specified entry from the list of deleted entities gets removed.];
docremark [If <which> is "all", the whole list of deleted entities gets deleted.];
docremark [If <which> is "last" the last deleted entity is removed from the list of deleted entities.];
docremark [Returns the number of entities on the list of deleted entities (even if the parameter <which> was unknown or not specified).];
docref [getdeletedentities];
docref [undelent];
docref [deleteentity];
docident [unsavededits] [Holds the number of unsaved edits.];
docident [updateeditinfopanel] [A cubescript hook to provide additional information about the current edit situation.];
docremark [For example it provides additional information about the closest entity.];
docremark [The returned text is rendered on the right side of the screen.];
docremark [Default for "updateeditinfopanel" is "explainclosestentity" script which provides detailed info about the closest entity.];
docref [editinfopanelmillis];
docref [hideeditinfopanel];
docident [updatemapmodeldependencies] [Update map config with any mapmodels required by those in use.];
docident [vdelta] [Changes the vdelta value of the current selection.];
docargument [N] [vdelta value] [] [0];
docremark [Note that unlike all other editing functions, this function doesn't affect a cube, but its top-left vertex (market by the dot in the editing cursor). So to edit a N * M heightfield, you will likely have to edit the vdelta of (N+1) * (M+1) cubes, i.e. you have to select 1 row and 1 column more in the opposite direction of the red dot to affect all the vertices of a heightfield of a given size (try it, it makes sense :).];
docremark [A floor delta offsets vertices to beneath the level set by editheight (and a ceil delta to above). Delta offsets have a precision of a quarter of a unit, however you should use non-unitsize vertices only to touch other such vertices.];
docremark [This only works if the cube is a heightfield.];
dockey [8] [] [manipulates downwards the corner of the current selection];
dockey [9] [] [manipulates upwards the corner of the current selection];
docref [heightfield];
docident [waterlevel] [Sets the global water level for the map.];
docargument [H] [the water level] [float, -10000="no water" min -128/max 127/default -10000];
docremark [Every cube that has a lower floor than the water level will be rendered with a nice wavy water alpha texture. Water physics will be applied to any entity located below it.];
docremark [Performance notes: water is rendered for a whole square encapsulating all visible water areas in the map (try flying above the map in edit mode to see how). So the most efficient water is a single body of water, or multiple water areas that are mostly not visible from each other. Players can influence how accurate the water is rendered using the "watersubdiv" command (map config).];
docref [watersubdiv];
docident [worldiodebug] [Whether or not to output debugging information while loading/saving maps.];
docargument [B] [boolean] [1:debug output min 0/max 1/default 0];
docident [xmap_delete] [Deletes the named snapshot.];
docargument [N] [nickname] [] [0];
docref [xmap_list];
docident [xmap_delete_backup] [Deletes the backup xmap.];
docref [xmap_list];
docident [xmap_keep_backup] [Moves the backup xmap to a regular named spot.];
docargument [N] [nickname] [] [0];
docref [xmap_list];
docident [xmap_list] [Lists all xmaps currently in memory.];
docref [xmap_store];
docref [xmap_restore];
docref [xmap_delete];
docref [xmap_delete_backup];
docref [xmap_keep_backup];
docref [xmap_rename];
docref [getxmaplist];
docref [enumtodoentities];
docident [xmap_rename] [Changes the nickname of the xmap.];
docargument [O] [old nickname] [] [0];
docargument [N] [new nickname] [] [0];
docref [xmap_list];
docident [xmap_restore] [Restores the xmap snapshot.];
docargument [N] [nickname] [] [0];
docremark [1. If nickname is not given, it restores the last automatic backup snapshot. Automatic snapshots are taken:];
docremark [a) before a snapshot is restored,];
docremark [b) before a new map is loaded (if there were unsaved edits on the map) and];
docremark [c) when the game ends (if there were unsaved edits).];
docremark [2. If nickname is given, the command restores the named snapshot, it also creates a backup snapshot of the current editing data.];
docref [xmap_list];
docref [xmap_store];
docident [xmap_store] [Creates a snapshot and stores it under the given nickname.];
docargument [N] [nickname] [] [0];
docremark [Nicknames have to qualify as valid filenames.];
docref [xmap_list];
docref [xmap_restore];
docsection [Menus]
docident [browsefiledesc] [Toggles getting descriptive text from CGZ or DMO files in menudirlist.];
docargument [B] [] [min 0/max 1/default 1];
docref [menudirlist];
docident [chmenutexture] [Displays a texture on the right side of a menu.];
docargument [N] [the name of the menu] [] [0];
docargument [P] [the path to the texture] [] [0];
docargument [T] [the title of the picture] [] [0];
docremark [By specifying a title string in the third argument to chmenutexture, a picture is rendered instead of a texture. The title string is displayed instead of the texture resolution. The variable "menupicturesize" holds a size modifier for pictures, similar to "menutexturesize".];
docref [menutexturesize];
docref [menupicturesize];
docident [closecurmenu] [Closes the currently open menu.];
docremark [If more than one menu is open, only closes the topmost menu on the stack.];
docref [curmenu];
docref [refreshcurmenu];
docref [refreshcurmenudelayed];
docident [closemenu] [Closes the specified menu if it is open.];
docargument [N] [the name of a previously defined menu] [] [0];
docremark [If it is open multiple times in the stack only the topmost instance will be closed!];
docref [newmenu];
docref [showmenu];
docref [delmenu];
docref [closecurmenu];
docident [curmenu] [Returns the name of the currently open menu.];
docremark [If more than one menu is open, only the name of the topmost menu on the stack is returned.];
docref [closecurmenu];
docref [refreshcurmenu];
docref [refreshcurmenudelayed];
docident [delmenu] [Deletes the entire contents (all menu items) of the given menu.];
docargument [N] [the name of a previously defined menu] [] [0];
docref [newmenu];
docref [showmenu];
docref [closemenu];
docident [hidebigmenuimages] [Hide big images in menus.];
docargument [N] [0: show, 1: hide] [min 0/max 1/default 0];
docident [menucanblink] [Toggles the ability for menutext to have the blinking bit set.];
docargument [T] [0 = Off, any other integer = On] [Any integer is valid, positive or negative] [0];
docremark [The global setting of 'allowblinkingtext' overrides this.];
docref [allowblinkingtext];
docident [menudirlist] [Creates a menu listing of files from a path and perform an action on them when clicked.];
docargument [P] [the directory path from the assaultcube root] [] [0];
docargument [E] [file extension] [] [0];
docargument [A] [action] [] [0];
docargument [I] [show image from a file] [0 or 1] [0];
docargument [S] [string - search it in map/demo filenames and descriptions and show only matched files (case insensitive)] [] [0];
docremark [Use this inside menu definitions, almost always as the only command of that menu.];
docremark [Compare the usage inside config/menus.cfg];
docexample [menudirlist "packages/maps" "cgz" "map $arg1"] [will create a list of maps and load them when clicked];
docref [newmenu];
docref [menudirlistsub];
docref [browsefiledesc];
docident [menudirlistsub] [Adds subdirectory entries to a menu with a files list.];
docargument [A] [action, executed, when the menu entry is chosen] [] [0];
docargument [D] [if it is 1, an entry '..' is added (parent directory)] [] [0];
docremark [It has to come after the menudirlist command.];
docref [menudirlist];
docident [menufont] [Sets the font for a specific menu.];
docargument [N] [menu name] [] [0];
docargument [F] [font] [default, mono, serif] [0];
docremark [If menu is "", the currently initialised menu is used.];
docexample [menufont score mono] [sets the font on the scoreboard];
docref [font];
docident [menuheader] [Adds header and/or footer to the menu.];
docargument [H] [header] [] [0];
docargument [F] [footer] [] [0];
docident [menuinit] [Specifies commands to be executed when a menu opens.];
docargument [C] [the code to execute on init] [] [0];
docremark [This command should be placed after newmenu.];
docref [newmenu];
docident [menuinitselection] [Defines the initial selection for a menu.];
docargument [A] [line number] [] [0];
docident [menuitem] [Creates a new menuitem.];
docargument [T] [the text content in menu line] [] [0];
docargument [A] [the command to execute on selection of the menuitem] [] [0];
docargument [H] [the command to execute upon rolling over the menuitem] [] [0];
docargument [D] [the description of menu item, which is displayed on the menu footer] [] [0];
docremark [Upon activating the menuitem, the associated command will be executed (See config/menus.cfg for examples). If the command argument is omitted, then it will be set to the same value as the description. If -1 is specified instead of the command to execute, then no command is executed when activating the item. If the rollover option is used, the menuitem will execute that command when selecting (but not activating) the menuitem.];
docremark ['\n' in menuitem synchronizes further text with slider width (tab-like function).];
docremark [(Note: to activate the menu item, select it, and either: Click, press SPACE or press ENTER/Return).];
docref [newmenu];
docref [getigraph];
docident [menuitemaltfont] [Displays a menu line with a text which may contain chars from an alternate font.];
docargument [N] [the name of the alternate font] [default, mono, serif, huddigits, serverquality, bargraphs, radaricons] [0];
docargument [T] [text content in menu line] [] [0];
docargument [A] [action] [] [0];
docargument [H] [hoveraction] [] [0];
docargument [D] [description displayed on menu footer] [] [0];
docremark [Chars from the alternate font have to be marked with "\a". Alternate font chars have no width and are just rendered above the following text. Use spaces to counter that.];
docref [font];
docident [menuitemcheckbox] [Creates a checkbox menu item.];
docargument [T] [text] [] [0];
docargument [V] [value] [] [0];
docargument [A] [action] [] [0];
docargument [P] [position] [0..100] [0];
docremark [Optional fourth parameter "position" in the range from 0 o 100, default 0, which moves the position of the checkbox over the width of a text input or slider, with 100 being left and 0 being right.];
docident [menuitemeditkeyinput] [Menuitem which displays "text" and all keys, that bind "bindcmd" - in edit mode.];
docargument [T] [text] [] [0];
docargument [B] [bind command] [] [0];
docref [menuitemkeyinput];
docref [menuitemspectkeyinput];
docident [menuitemgreyedout] [Menu items added after this command are greyed out (1) or not (0).];
docargument [V] [value] [0: off 1: on] [0];
docremark [Greyed out menu items are grey and can't be operated.];
docident [menuitemimage] [];
docargument [N] [image filename] [] [0];
docargument [T] [text] [] [0];
docargument [A] [action] [] [0];
docargument [H] [hoveraction] [] [0];
docident [menuitemkeyinput] [Menuitem which displays "text" and all keys, that bind "bindcmd" - in game mode.];
docargument [T] [text] [] [0];
docargument [B] [bind command] [] [0];
docref [menuitemeditkeyinput];
docref [menuitemspectkeyinput];
docident [menuitemmapload] [Menuitem that loads a map, displays the title and the preview or a default image.];
docargument [M] [map] [] [0];
docargument [A] [action] [] [0];
docargument [H] [hoveraction] [] [0];
docargument [D] [description displayed on menu footer] [] [0];
docref [screenshotpreview];
docident [menuitemradio] [];
docargument [T] [text] [menu item text] [0];
docargument [L] [min] [min value] [0];
docargument [U] [max] [max value (or optionally -1 and set by display string length)] [0];
docargument [V] [value] [initial value] [0];
docargument [D] [display] [list of value descriptions or value step size] [0];
docargument [A] [action] [executed on value changes (new value in arg1)] [0];
docident [menuitemslider] [];
docargument [T] [text] [menu item text] [0];
docargument [L] [min] [min value] [0];
docargument [U] [max] [max value (or optionally -1 and set by display string length)] [0];
docargument [V] [value] [initial value] [0];
docargument [D] [display] [list of value descriptions or value step size] [0];
docargument [A] [action] [executed on value changes (new value in arg1)] [0];
docargument [W] [wrap] [if 1, wrap slider around] [0];
docident [menuitemspectkeyinput] [Menuitem which displays "text" and all keys, that bind "bindcmd" - in spectate mode.];
docargument [T] [text] [] [0];
docargument [B] [bind command] [] [0];
docref [menuitemkeyinput];
docref [menuitemeditkeyinput];
docident [menuitemtextinput] [Creates a new menuitem with text input field.];
docargument [T] [text] [] [0];
docargument [V] [value] [] [0];
docargument [A] [action] [] [0];
docargument [H] [hoveraction] [] [0];
docargument [M] [maxchars] [] [0];
docremark [If the last line of a menu is a text input item, pressing enter in that line will not only execute the assigned command, but also close the menu.];
docident [menumdl] [Specifies a model to render while displaying the specified menu.];
docargument [N] [the name of the menu] [] [0];
docargument [M] [the model] [] [0];
docargument [A] [the animation to play] [] [0];
docargument [R] [the rotation speed] [] [0];
docargument [S] [the scale] [] [0];
docremark [If menu is "", the currently initialised menu is used.];
docremark [It specifies, which model to render and how. If only menu is specified, no model is rendered.];
docident [menupicturesize] [Changes the size of pictures displayed in menus.];
docargument [N] [size factor] [min 0.1f/max 5.0f/default 1.6f];
docref [chmenutexture];
docref [menutexturesize];
docident [menurenderoffset] [Moves a menu away from the middle of the screen.];
docargument [X] [x-offset] [] [0];
docargument [Y] [y-offset] [] [0];
docremark [Values of "0" represent half the screen width and height.];
docident [menuselection] [Selects a line in a menu.];
docargument [A] [menu name] [] [0];
docargument [B] [line number] [] [0];
docident [menuselectionbgcolor] [Defines the background color for the menu selection bar.];
docargument [R] [red] [0..100] [0];
docargument [G] [green] [0..100] [0];
docargument [B] [blue] [0..100] [0];
docargument [A] [alpha] [0..100] [0];
docident [menuselectiondescbgcolor] [Defines the background color for the description of selected active menu items (checkbox, slider, text input).];
docargument [R] [red] [0..100] [0];
docargument [G] [green] [0..100] [0];
docargument [B] [blue] [0..100] [0];
docargument [A] [alpha] [0..100] [0];
docident [menuselectionpersistent] [Enables persistent selections for the currently displayed menu.];
docremark [When enabled, it restores a previously saved selection.];
docremark [Probably most efficient inside "menuinit". The position is restored during execution of this command, so the menu entry has to already exist and the alias with the last position has to be read from saved.cfg. In automatically created menus it may be necessary to execute the command with a short delay.];
docident [menusynctabstops] [Synchronizes tabs in menus.];
docargument [V] [value] [0: off (default), 1: on] [0];
docremark [If enabled (1), tab positions in a menu are synchronised. It affects menu title, header and items, but not footer or descriptions.];
docident [menutexturesize] [Changes the size of textures displayed in menus (mostly for testing purposes).];
docargument [N] [size factor] [min 0.1f/max 5.0f/default 1.0f];
docref [chmenutexture];
docref [menupicturesize];
docident [menutitle] [Make a different title show up than the menu's internal name.];
docargument [N] [name] [human friendly title] [0];
docremark [Intended to pretty up the menus with more readable titles than the sometimes short but technical values that make the scripting easier!];
docref [newmenu];
docref [curmenu];
docident [newmenu] [Creates a new menu.];
docargument [N] [the name of the menu] [] [0];
docremark [All menu commands placed after newmenu (i.e. menuitem, menuitemcheckbox, etc.) are added into the menu until another "newmenu" command is specified.];
docref [menuitem];
docident [refreshcurmenu] [Refreshes (closes and opens again) the current menu.];
docref [curmenu];
docref [refreshcurmenudelayed];
docref [closecurmenu];
docident [refreshcurmenudelayed] [Refreshes (closes and opens again, after very short delay) the current menu.];
docref [curmenu];
docref [refreshcurmenu];
docref [closecurmenu];
docident [screenshotpreview] [Creates a screenshot cropped to 4:3 with a given number of lines and jpeg quality 80.];
docargument [N] [number of lines] [144..480, default 240 or last given value] [0];
docremark [Pressing CTRL+F12 during spectating creates a clean screenshot and saves it as map preview picture.];
dockey [CTRL+F12] [Ctrl+F12] [creates map preview pictures during spectating];
docref [menuitemmapload];
docident [showmenu] [Displays the specified menu.];
docargument [N] [the name of a previously defined menu] [] [0];
docremark [The menu allows the user to pick an item with the cursor keys. Upon pressing return, the associated action will be executed. Pressing ESC will cancel the menu.];
docref [newmenu];
docref [closemenu];
docref [delmenu];
docident [wrapslider] [If wrapslider is set the menuitemslider will toggle to the min/max value if at end of the range.];
docargument [N] [0 off, 1 on] [min 0/max 1/default 0];
docsection [Heads-Up Display]
docident [accuracy] [Sets whether or not to display the accuracy information window.];
docargument [N] [1: on, 0: off] [min 0/max 1/default 0];
docremark [Accuracy is displayed for current weapon and only then, if scoreboard is turned on.];
docref [accuracyinfo];
docref [accuracyreset];
docident [accuracyinfo] [Shows in the console accuracy of all used weapons.];
docref [accuracy];
docident [accuracyreset] [Resets accuracy counters.];
docref [accuracy];
docident [altconsize] [Sets the percent of screen height for text lines on an alternate F11 history display.];
docargument [V] [] [min 0/max 100/default 0];
docref [consize];
docref [fullconsize];
docident [blankouthud] [Hides most of elements on the HUD for X frames.];
docargument [X] [blank out the HUD] [min 0/max 10000/default 0];
docremark [Used for "clean" screenshot. The parameter is "frames", so for example 1000 will take 20 seconds at 50 fps or second at 1000 fps.];
docref [cleanshot];
docident [clearminimap] [Recreates the minimap for the current map.];
docref [minimapres];
docident [cncolumncolor] [Colour of CN column in scoreboard.];
docargument [C] [color] [0 (green), 1 (blue), 2 (yellow), 3 (red), 4 (gray), 5 (white), 6 (dark brown), 7 (dark red), 8 (purple), 9 (orange) min 0/max 9/default 5];
docident [conalpha] [Sets the transparency of the console.];
docargument [N] [Alpha value] [min 0/max 255/default 255];
docident [confade] [Sets how many seconds before the console text rolls (disappears) up the screen.];
docargument [V] [time before the text rolls up] [min 0/max 60/default 20];
docident [consize] [Sets how many lines of text the console displays.];
docargument [V] [] [min 0/max 100/default 6];
docref [altconsize];
docref [fullconsize];
docident [crosshairfx] [Turns on or off crosshair effects.];
docargument [V] [turn off all effects] [0] [0];
docargument [] [turn on all effects (color and size change)] [1 (default)] [0];
docargument [] [turn on color change/turn off size change] [2] [0];
docargument [] [turn off color change/turn on size change] [3] [0];
docremark [When on, the crosshair will go orange when health is 50 or red when is 25. Size change of crosshair occurs when player holds assault rifle and has more than 3 shots in a row.];
docident [crosshairsize] [Sets the size of your crosshair.];
docargument [N] [the crosshair size] [min 0/max 50/default 15];
docremark [The crosshair is turned off entirely if the size is set to 0.];
docident [crosshairteamsign] [Turns on/off display of team warning crosshair.];
docargument [V] [enable/disable warning crosshair] [min 0/max 1/default 1];
docident [damageindicatoralpha] [Sets the level of transparency of the damage indicator, 100 = totally solid.];
docargument [V] [damage indicator alpha value] [min 1/max 100/default 50];
docident [damageindicatordist] [Sets the separation of the arrows in the damage indicator.];
docargument [V] [damage indicator separation size] [min 0/max 10000/default 500];
docident [damageindicatorsize] [Sets the size of the damage indicator.];
docargument [V] [damage indicator icon size] [min 0/max 10000/default 200];
docident [damageindicatortime] [Sets how long the damage indicator stays on screen.];
docargument [V] [damage indicator display time] [min 1/max 10000/default 1000];
docident [damagescreen] [Show the blood-spat overlay when receiving damage?];
docargument [N] [damagescreen] [0 (false), 1 (true) min 0/max 1/default 1];
docident [damagescreenalpha] [If overlay of blood-spat, at what blending (transparency) level?];
docargument [N] [damagescreen transparency] [min 1/max 100/default 45];
docident [damagescreenfactor] [If overlay of blood-spat, use which factor?];
docargument [N] [damagescreen factor] [min 1/max 100/default 7];
docident [damagescreenfade] [If overlay of blood-spat, at what speed does it fade?];
docargument [N] [damagescreen fade] [min 0/max 1000/default 125];
docident [dbgpos] [Displays local player's current x,y,z position in map, showstats 1 must be enabled.];
docargument [V] [display current position] [min 0/max 1/default 0];
docref [showstats];
docident [flagscorehudtransparency] [Options for flag score hud transparency.];
docargument [V] [flag score hud transparency] [ 0: no transparency, icon set 'flag gone'; 1: transparency, icon set 'flag gone'; 2: transparency, classic icon set min 0/max 2/default 2];
docident [fullconsize] [Sets the percent of screen height for text lines on the F11 history display.];
docargument [V] [] [min 0/max 100/default 40];
docref [consize];
docref [altconsize];
docident [gametimedisplay] [Show the game-time clock on the HUD.];
docargument [D] [off (0), count backward (1), count forward (2)] [min 0/max 2/default 1];
docremark [The clock can count backward (from time limit to 0s) or forward (from 0s to time limit).];
docref [wallclockformat];
docident [hidecompass] [Turns on/off the radar compass.];
docargument [V] [enable/disable radar compass] [min 0/max 1/default 0];
docident [hideconsole] [Turns on or off the display of console text.];
docargument [V] [enable/disable console text] [min 0/max 1/default 0];
docident [hidedamageindicator] [Turns on/off the damage indicator.];
docargument [V] [enable/disable damage indicator] [min 0/max 1/default 0];
docident [hidehudequipment] [Turns on or off the display of equipment icons.];
docargument [V] [enable/disable equipment icons] [min 0/max 1/default 0];
docident [hidehudmsgs] [Turns on or off the display of messages at the bottom of the screen.];
docargument [V] [enable/disable messages] [min 0/max 1/default 0];
docident [hidektfindicator] [Turns on or off the display of ktf flag direction indicator.];
docargument [V] [enable/disable ktf indicator] [min 0/max 1/default 0];
docref [ktfindicatoralpha];
docident [hideradar] [Turns on or off the display of the on-screen radar.];
docargument [V] [enable/disable radar] [min 0/max 1/default 0];
docident [hidespecthud] [Turns on or off the display of spectator status.];
docargument [V] [enable/disable spectator status] [min 0/max 1/default 0];
docident [hideteam] [Turns on or off the display of local player team icons.];
docargument [V] [enable/disable team icons] [min 0/max 1/default 0];
docident [hideteamscorehud] [Turns on or off the display of team score icons.];
docargument [V] [enable/disable team score icons] [min 0/max 1/default 0];
docident [hidevote] [Turns on or off the display of vote icons.];
docargument [V] [0=on; 1=on, but hide after own vote; 2=off] [min 0/max 2/default 0];
docident [hudgun] [Turns on or off the display of the current selected gun.];
docargument [V] [show/hide guns 3D models] [min 0/max 1/default 1];
docident [ktfindicatoralpha] [Sets the level of transparency of ktf flag direction indicator, 100 = totally solid.];
docargument [V] [ktf indicator alpha value] [min 1/max 100/default 70];
docref [hidektfindicator];
docident [minimapres] [Sets the resolution for the minimap.];
docargument [N] [the resolution] [min 7/max 10/default 9];
docref [clearminimap];
docident [oldfashionedgunstats] [Shows ammo statistics like in version 1.0.];
docargument [N] [0: new, 1: old] [min 0/max 1/default 0];
docident [radarentsize] [Sets the icon size of the players shown in the radar and the minimap.];
docargument [V] [size of icons inside radar] [min 4/max 64/default 12];
docident [radarheight] [Changes at what height you are floating in the radar-view.];
docargument [H] [height] [min 5/max 500/default 150];
docident [sc_clientnum] [Sets the order priority for the column cn on the scoreboard.];
docargument [V] [low priority: left, high priority: right] [min 0/max 100/default 6];
docident [sc_deaths] [Sets the order priority for the column deaths or disables it on the scoreboard.];
docargument [V] [-1: disable, low priority: left, high priority: right] [min -1/max 100/default 2];
docident [sc_flags] [Sets the order priority for the column flags on the scoreboard.];
docargument [V] [low priority: left, high priority: right] [min 0/max 100/default 0];
docident [sc_frags] [Sets the order priority for the column frags on the scoreboard.];
docargument [V] [low priority: left, high priority: right] [min 0/max 100/default 1];
docident [sc_lag] [Sets the order priority for the column pj/ping or disables it on the scoreboard.];
docargument [V] [-1: disable, low priority: left, high priority: right] [min -1/max 100/default 5];
docident [sc_name] [Sets the order priority for the column name on the scoreboard.];
docargument [V] [low priority: left, high priority: right] [min 0/max 100/default 7];
docident [sc_ratio] [Sets the order priority for the column ratio or disables it on the scoreboard.];
docargument [V] [-1: disable, low priority: left, high priority: right] [min -1/max 100/default -1];
docident [sc_score] [Sets the order priority for the column score or disables it on the scoreboard.];
docargument [V] [-1: disable, low priority: left, high priority: right] [min -1/max 100/default 4];
docident [showmap] [Determines if the mini-map should be shown on screen.];
docargument [B] [show mini-map] [min 0/max 1/default 0];
dockey [LALT] [left Alt] [toggles minimap];
docident [showmapbackdrop] [Determines whether to have a see-through map overview (0), or render it on a black backdrop (1) or a combination of both (2).];
docargument [B] [backdrop-style] [min 0/max 2/default 0];
docident [showmapbackdroptransparency] [Transparency of the black map backdrop (in percent) rendered if showmapbackdrop is set to 2.];
docargument [T] [transparency] [min 0/max 100/default 75];
docref [showmapbackdrop];
docident [showscores] [Shows or hides the scores.];
dockey [TAB] [] [];
docref [showscoresondeath];
docident [showscoresondeath] [Determines if scores should be shown on death.];
docargument [V] [] [min 0/max 1/default 1];
docref [showscores];
docident [showspeed] [Enables or disables showing the player's horizontal speed (vector).];
docargument [N] [0: off, 1: on] [min 0/max 1/default 0];
docident [showstats] [Turns on/off display of FPS/rendering statistics on the HUD.];
docargument [N] [0: Show no stats, 1: Only show FPS stats, 2: Show all stats] [min 0/max 2/default 1];
docident [showtargetname] [Enables or disables showing the player name on the HUD when in your crosshair.];
docargument [N] [0: off, 1: on] [min 0/max 1/default 1];
docident [specthudgun] [Turns on/off the display of the hudgun while spectating a player in first-person view.];
docargument [V] [show/hide hudgun when spectating] [min 0/max 1/default 1];
docremark [Works in demo mode as well.];
docident [toggleconsole] [Toggles the console.];
dockey [F11] [] [];
docident [votealpha] [Sets the transparency of the vote display.];
docargument [N] [Alpha value] [min 0/max 255/default 255];
docident [wallclockformat] [Show the wall clock with time (usually local, not game-time) on the HUD.];
docremark ["wallclockformat" alias should contain string in strftime format to show the clock with proper time. If the alias is empty, the wall clock is hidden.];
docref [gametimedisplay];
docsection [Visuals]
docident [aadynshadow] [Sets the size/resolution of the dynamic shadow data.];
docargument [] [the size] [min 0/max 3/default 2];
docident [aboveheadiconfadetime] [Time in milliseconds before the abovehead icon dissapears.];
docargument [V] [abovehead icon display time] [min 1/max 10000/default 2000];
docident [aboveheadiconsize] [Sets the size for the icon shown above a player using comunications voices.];
docargument [V] [Icon size] [min 0/max 1000/default 50];
docident [allowblinkingtext] [For toggling on the ability for any text to have the blinking bit set.];
docargument [T] [0 = Off, 1 = On] [min 0/max 1/default 0];
docref [menucanblink];
docident [animationinterpolationtime] [Sets the time available for interpolation between model animations.];
docargument [N] [the amount of milliseconds for the interpolation] [min 0/max 1000/default 100];
docident [aniso] [Sets the level of anisotropic filtering.];
docargument [V] [anisotropic filtering] [min 0/max 16/default 0];
docref [hwmaxaniso];
docident [ati_mda_bug] [];
docargument [V] [] [min 0/max 1/default 0];
docident [bilinear] [];
docargument [V] [] [min 0/max 1/default 1];
docident [blood] [Turns on and off the display of blood.];
docargument [V] [Enable/Disable blood] [min 0/max 1/default 1];
docident [bloodttl] [Sets the amount of time in milliseconds that blood is displayed on the ground.];
docargument [V] [Blood display time] [min 0/max 30000/default 10000];
docident [bullethole] [Turns on/off the display of bullet holes.];
docargument [V] [Enable/Disable bullet holes] [min 0/max 1/default 1];
docident [bulletholettl] [Specifies how long (in milliseconds) to display bullet holes.];
docargument [V] [Bullethole display time] [min 0/max 30000/default 10000];
docident [curfont] [Returns a name of the current font.];
docargument [S] [name of font] [<empty>, default, mono, serif min /max /default ];
docref [font];
docref [setfont];
docident [depthbits] [Sets the bits for the depth buffer.];
docargument [] [depth pixels] [min 0/max 32/default 0];
docident [depthoffset] [];
docargument [V] [] [min /max /default 0.005f];
docident [desktoph] [Returns a height of the desktop resolution (or zero, if not available).];
docref [desktopw];
docref [screenres];
docident [desktopw] [Returns a width of the desktop resolution (or zero, if not available).];
docref [desktoph];
docref [screenres];
docident [dynlight] [Determines whether dynamic shadows and lights are rendered, provided just incase they slow your fps down too much.];
docargument [R] [0 off, 1 on] [min 0/max 1/default 1];
docident [dynshadow] [Sets the alpha value (transparency) for dynamic shadows.];
docargument [] [the alpha value] [min 0/max 100/default 40];
docident [dynshadowdecay] [];
docargument [V] [] [min 0/max 3000/default 1000];
docident [dynshadowquad] [];
docargument [V] [] [min 0/max 1/default 0];
docident [dynshadowsize] [Sets the display size of the dynamic shadows.];
docargument [] [the size] [min 4/max 8/default 5];
docident [font] [Loads a font texture to use as text within AssaultCube.];
docargument [NAME] [the font name] [] [0];
docargument [PATH] [the path to the font texture] [] [0];
docargument [A] [the default width] [] [0];
docargument [B] [the default height] [] [0];
docargument [C] [offset (co-ordinate X)] [] [0];
docargument [D] [offset (co-ordinate Y)] [] [0];
docargument [E] [offset (width)] [] [0];
docargument [F] [offset (height)] [] [0];
docref [fontchar];
docref [fontskip];
docref [setfont];
docref [menufont];
docref [menuitemaltfont];
docident [fontchar] [Specifies a region of an image to be used as a font character.];
docargument [A] [X co-ordinates (from top-left corner)] [] [0];
docargument [B] [Y co-ordinates (from top-left corner)] [] [0];
docargument [C] [width] [] [0];
docargument [D] [height] [] [0];
docref [font];
docref [fontskip];
docident [fontskip] [Specifies, at what char the font definition proceeds.];
docargument [A] [the ascii code of the first char] [] [0];
docremark [For example "fontskip 48" means the ascii code of the first char in defined font will be "48", which is '0'; "fontskip 65" would start at 'A'.];
docref [font];
docref [fontchar];
docident [fov] [Sets the field of view (fov).];
docargument [N] [the FOV value] [min 75/max 120/default 90];
docref [scopefov];
docref [spectfov];
docref [spectfovremote];
docident [fpsrange] [Sets the range of FPS (AC will adjust LOD to achieve it).];
docargument [A] [min] [] [0];
docargument [B] [max] [] [0];
docref [maxfps];
docident [fsaa] [Sets the level of full-scene antialiasing (FSAA).];
docargument [V] [full-scene antialiasing] [min -1/max 16/default 0];
docremark [-1 uses the default settings obtained from the system. 0 disables, 1..16 enables FSAA.];
docident [fullscreen] [Enables or disables fullscreen.];
docargument [] [fullscreen] [min 0/max 1/default 1];
docref [fullscreentoggle];
docref [fullscreendesktop];
docident [fullscreendesktop] [Enables using always desktop resolution in fullscreen mode.];
docargument [V] [Use desktop resolution for fullscreen] [min 0/max 1/default 1];
docref [fullscreen];
docident [fullscreentoggle] [Toggles fullscreen on or off.];
docref [fullscreen];
docident [gamma] [Sets the temporary (to next map start) hardware gamma value.];
docargument [N] [the gamma value] [min 30/max 300/default 100];
docremark [May not work if your card/driver doesn't support it.];
docident [getdisplayresolutions] [Returns a list of available screen resolutions.];
docref [screenres];
docident [getigraph] [Returns an encoded string to display an inlined image outside the console.];
docargument [M] [mnemonic] [] [0];
docremark [Images are stored in packages/misc/igraph/*.png and loaded during game start. Filenames consist of the image shorthand (mnemonic) and optional frame times, separated by "_". Media file names may only contain letters, digits and "_-.()".];
docremark [All texts displayed in the game console are scanned for mnemonics prefixed with ":". All found matches are replaced by the image.];
docremark [The images are displayed as squares with width and height the same as the regular font height. To create animations, put several square images side by side into the file. For example, a 128x32 image is interpreted as four frames. Frame duration is encoded in the filename, so, for example the file "nop_1000_200_100.png" shows the first frame for 1000 milliseconds, the second frame for 200 msec and the third (as the rest) for 100 msec.];
docremark [Igraphs "1" to "9" are hardcoded and can be manually encoded in menu texts. Use the new escape code "\i" plus the number of the image: "\i\1".."\i\9". Other images can be used in menus as well, but the codes have to be fetched by "getigraph".];
docremark [If the mnemonic was not found, then "getigraph" returns an empty string.];
docref [updateigraphs];
docref [igraphsize];
docref [igraphsizehardcoded];
docref [igraphanimate];
docref [igraphdefaultframetime];
docref [hideigraphs];
docident [gib] [Enables or disables the gib animation entirely.];
docargument [B] [off OR on] [0 (false), 1 (true) min 0/max 1/default 1];
docref [gibnum];
docref [gibspeed];
docref [gibsgore];
docref [gibttl];
docref [popdeadplayers];
docident [gibnum] [Sets the number of gibs to display when performing a "messy" kill (grenade, knife, sniper headshot).];
docargument [N] [number of gibs] [min 0/max 1000/default 6];
docremark [Larger values are more spectacular, but can slow down less powerful machines. Reducing gibttl may help in this case.];
docref [gibttl];
docref [gibspeed];
docident [gibsgore] [Adjusts gib/gibnum/gibspeed/gibttl variables collectively.];
docargument [] [] [0 - Off] [0];
docargument [] [] [1 - Default/Normal values] [0];
docargument [] [] [2 - Good] [0];
docargument [] [] [3 - Messy] [0];
docargument [] [] [4 - Unrealistic] [0];
docargument [N] [] [min 0/max 4/default 1];
docident [gibspeed] [Sets the velocity at which gibs will fly from a victim.];
docargument [N] [velocity] [min 1/max 100/default 30];
docref [gibnum];
docref [gibttl];
docident [gibttl] [Sets the time for gibs to live (in milliseconds), after which they will disappear.];
docargument [N] [time to live] [min 0/max 60000/default 7000];
docref [gibnum];
docref [gibspeed];
docident [glext] [Checks for the searchstring in all loaded extensions.];
docargument [E] [extension] [] [0];
docexample [if (glext shadow_funcs) [echo you have shadow functionality] [echo no shadows for you]] [];
docident [hidecustomskins] [];
docargument [B] [] [min 0/max 1/default 0];
docident [hideigraphs] [Hides inlined images in the console.];
docargument [N] [0: show, 1: hide] [min 0/max 1/default 0];
docref [getigraph];
docident [hirestextures] [Controls whether textures with a scale higher than 1.0 will be scaled down while loading (0) or not (1).];
docargument [S] [scale down?] [min 0/max 1/default 1];
docref [texture];
docident [hwmaxaniso] [Shows the maximum level of anisotropic filtering supported by the graphics hardware.];
docref [aniso];
docident [hwtexsize] [Shows the maximum texture size (in pixels) supported by the graphics hardware.];
docref [maxtexsize];
docident [ignoreoverride_limitwaveheight] [Ignores per-map overrides to limit waveheight on the client.];
docargument [B] [boolean] [1:ignore min /max /default 0];
docremark [Ignores the overrides set by the mappers (for their maps only). If "1", mapoverride_limitwaveheight is ignored, and "waveheight" is used unchanged.];
docref [mapoverride_limitwaveheight];
docref [ignoreoverride_nowaterreflect];
docref [ignoreoverride_nostencilshadows];
docident [ignoreoverride_nostencilshadows] [Ignores per-map overrides to disable stencil shadows on the client.];
docargument [B] [boolean] [1:ignore min /max /default 0];
docremark [Ignores the overrides set by the mappers (for their maps only). If "1", mapoverride_nostencilshadows is ignored.];
docref [mapoverride_nostencilshadows];
docref [ignoreoverride_nowaterreflect];
docref [ignoreoverride_limitwaveheight];
docident [ignoreoverride_nowaterreflect] [Ignores per-map overrides to disable water reflection on the client.];
docargument [B] [boolean] [1:ignore min /max /default 0];
docremark [Ignores the overrides set by the mappers (for their maps only). If "1", mapoverride_nowaterreflect is ignored and regular client settings are used.];
docref [mapoverride_nowaterreflect];
docref [ignoreoverride_limitwaveheight];
docref [ignoreoverride_nostencilshadows];
docident [igraphanimate] [Enables animation of inlined images with multiple frames.];
docargument [N] [0: display only first frame, 1: enable animation] [min 0/max 1/default 1];
docref [getigraph];
docref [igraphdefaultframetime];
docref [igraphsize];
docident [igraphdefaultframetime] [Default frame time for inlined images with multiple frames.];
docargument [N] [frame time for images] [min 5/max 2000/default 200];
docremark [Used for images with no frame duration specified in the filename.];
docref [getigraph];
docref [igraphanimate];
docref [igraphsize];
docident [igraphsize] [Scales inlined images (in percent).];
docargument [N] [size of images (in percent)] [min 80/max 300/default 120];
docref [getigraph];
docref [igraphsizehardcoded];
docident [igraphsizehardcoded] [Scales the hardcoded inlined images: "1".."9" (in percent).];
docargument [N] [size of images (in percent)] [min 80/max 160/default 106];
docref [getigraph];
docref [igraphsize];
docident [lighterror] [Allows to finetune the amount of "error" the mipmapper/stripifier allow themselves for changing lightlevels.];
docargument [E] [the error value, 1 being the best quality] [min 1/max 100/default 4];
docremark [If this variable is changed this during play, a "recalc" is needed to see the effect.];
docref [recalc];
docident [lightscale] [Scaling factor for all light in the game.];
docargument [D] [divisor] [values will be divided by this min 1/max 100/default 4];
docremark [Any change will not take effect until a new world is loaded.];
docident [mapoverride_limitwaveheight] [Per-map override to limit waveheight on the client.];
docargument [B] [boolean] [1:ignore min /max /default 0];
docremark [Set by the mapper, for his map only. The overrides are stored in the map header.];
docremark [If "1", waveheight is capped at 0.1 max. Useful for small water areas (like puddles), where higher waves would look weird.];
docref [mapoverride_nowaterreflect];
docref [mapoverride_nostencilshadows];
docref [ignoreoverride_limitwaveheight];
docident [mapoverride_nostencilshadows] [Per-map override to disable stencil shadows on the client.];
docargument [B] [boolean] [1:ignore min /max /default 0];
docremark [Set by the mapper, for his map only. The overrides are stored in the map header.];
docremark [If "1", stencil shadows are disabled. On clients, where stencil shadows are otherwise enabled, blob shadows are used instead. If shadows are disabled anyway, they stay disabled. Useful for dim maps, where hard shadows make no sense.];
docref [mapoverride_nowaterreflect];
docref [mapoverride_limitwaveheight];
docref [ignoreoverride_nostencilshadows];
docident [mapoverride_nowaterreflect] [Per-map override to disable water reflection on the client.];
docargument [B] [boolean] [1:ignore min /max /default 0];
docremark [Set by the mapper, for his map only. The overrides are stored in the map header.];
docremark [If "1", water reflection is disabled. Useful, when odd water colours are used to emulate other liquids that are not supposed to be that reflective.];
docref [mapoverride_limitwaveheight];
docref [mapoverride_nostencilshadows];
docref [ignoreoverride_nowaterreflect];
docident [maxfps] [Limits the FPS (frames per second) of AssaultCube's video output.];
docargument [V] [maximum FPS] [0 disables maxfps min 25 or 0/max 1000/default 200];
docremark [Remark: limit to '200' is optimal.];
docref [fpsrange];
docident [maxroll] [Sets the maximum value the display will roll on strafing.];
docargument [N] [the roll value] [min 0/max 20/default 0];
docref [maxrolleffect];
docref [maxrollremote];
docident [maxrolleffect] [Sets the maximum value the display will roll when you get damages.];
docargument [N] [the roll value] [min 0/max 30/default 10];
docref [maxrolleffect];
docref [maxrollremote];
docident [maxrollremote] [Limits the maximum value the display will roll on strafing or if player gets damages, when spectating other players.];
docargument [N] [The roll value] [min 0/max 50/default 10];
docref [maxroll];
docref [maxrolleffect];
docident [maxtexsize] [The maximum texture size that will be used by the engine, larger textures will be scaled down.];
docargument [V] [maximum texture size] [min 0/max 4096/default 0];
docremark [If this value is zero, hwtexsize will be used.];
docref [hwtexsize];
docident [maxtmus] [Gets the maximum number of supported textures when performing multitexturing.];
docident [maxtrail] [Maximum number of smoke particles along shotline of sniper rifle.];
docargument [N] [maximum number of smoke particles] [min 1/max 10000/default 500];
docident [mdldlist] [];
docargument [N] [] [min 0/max 1/default 1];
docident [mdldyncache] [];
docargument [V] [] [min 1/max 32/default 2];
docident [mdlstatcache] [];
docargument [V] [] [min 1/max 32/default 1];
docident [mergestrips] [];
docargument [V] [] [min 0/max 1/default 1];
docident [minlod] [Minimal level of detail.];
docargument [V] [] [min 25/max 250/default 60];
docident [mtexplosion] [];
docargument [V] [] [min 0/max 1/default 1];
docident [mtwater] [];
docargument [V] [] [min 0/max 1/default 1];
docident [nosway] [];
docargument [V] [] [min 0/max 1/default 0];
docident [particlesize] [Scales all particles.];
docargument [P] [the scale percentage] [min 20/max 500/default 100];
docident [polygonoffsetfactor] [];
docargument [V] [] [min /max /default -3.0f];
docident [polygonoffsetunits] [];
docargument [V] [] [min /max /default -3.0f];
docident [popdeadplayers] [Makes dead players instantly pop out of existence, instead of falling over and sinking into the ground.];
docargument [B] [BOOL] [min 0/max 1/default 0];
docref [gib];
docident [reflectclip] [];
docargument [V] [] [min 0/max 100/default 1];
docident [reflectscissor] [];
docargument [V] [] [min 0/max 1/default 1];
docident [reflectsize] [];
docargument [V] [] [min 6/max 10/default 8];
docident [resetgl] [Resets the OpenGL rendering settings.];
docident [righthanded] [Chooses whether the players hand carrying the weapon appears as right or left handed.];
docargument [N] [0: lefty, 1: righty] [min 0/max 1/default 1];
docident [saveshadows] [Sets if dynamic shadows should be saved to disk.];
docargument [] [auto save] [min 0/max 1/default 1];
docident [scorch] [];
docargument [V] [] [min 0/max 1/default 1];
docident [scorchttl] [];
docargument [V] [] [min 0/max 30000/default 10000];
docident [scr_h] [Sets the screen height.];
docargument [H] [the screen height] [min 200/max 10000/default 768];
docident [scr_w] [Sets the screen width.];
docargument [W] [the screen width] [min 320/max 10000/default 1024];
docident [screenh] [Returns the actual height of the screen/window.];
docargument [H] [the screen/window height] [ read-only];
docident [screenres] [Changes the screen resolution.];
docargument [W] [width] [] [0];
docargument [H] [height] [] [0];
docref [desktopw];
docref [desktoph];
docref [getdisplayresolutions];
docident [screenw] [Returns the actual width of the screen/window.];
docargument [W] [the screen/window width] [ read-only];
docident [setfont] [Changes the current font.];
docargument [N] [font name] [default, mono, serif] [0];
docref [font];
docref [curfont];
docident [setgamma] [Sets a persistent gamma value for a map.];
docargument [G] [the gamma value] [30..300, default 100] [0];
docref [gamma];
docident [shadowcasters] [];
docident [shadowclip] [];
docargument [V] [] [min 0/max 1/default 1];
docident [shadowtile] [];
docargument [V] [] [min 0/max 1/default 1];
docident [shotline] [];
docargument [V] [] [min 0/max 1/default 1];
docident [shotlinettl] [];
docargument [V] [] [min 0/max 10000/default 75];
docident [skin] [Determines the skin of the current player.];
docargument [N] [skin id] [value] [0];
docremark [See the player model folder for the according skin-id.];
docident [skin_cla] [Chooses skin when playing for team CLA.];
docargument [N] [skin id] [] [0];
docident [skin_rvsf] [Chooses skin when playing for team RVSF.];
docargument [N] [skin id] [] [0];
docident [skyclip] [];
docargument [V] [] [min 0/max 1/default 1];
docident [smoothdist] [Determines the valid distance when extrapolating a players position.];
docargument [V] [distance] [min 0/max 16/default 8];
docident [smoothmove] [Determines the speed when extrapolating a players position.];
docargument [V] [movement speed] [min 0/max 100/default 75];
docident [spectfov] [Specifies the Field Of View when in spectating/ghost mode.];
docargument [V] [Spectate FOV size] [min 5/max 120/default 110];
docref [fov];
docref [spectfovremote];
docident [spectfovremote] [Chooses between local or remote player's FOV when spectating.];
docargument [V] [0: uses 'spectfov' and the local 'scopefov', 1: uses 'fov' and 'scopefov' of the spectated player] [min 0/max 1/default 0];
docref [fov];
docref [spectfov];
docref [scopefov];
docident [stencilbits] [];
docargument [V] [] [min 0/max 32/default 0];
docident [stencilshadow] [Sets the transparency/opacity level of stencil shadows.];
docargument [V] [Alpha level] [min 0/max 100/default 40];
docident [swaymovediv] [];
docargument [V] [] [min 1/max 1000/default 200];
docident [swayspeeddiv] [];
docargument [V] [] [min 1/max 1000/default 105];
docident [swayupmovediv] [];
docargument [V] [] [min 1/max 1000/default 200];
docident [swayupspeeddiv] [];
docargument [V] [] [min 1/max 1000/default 105];
docident [teamdisplaymode] [Sets the team display mode.];
docargument [N] [the team display mode] [0 (none), 1 (color vests), 2 (color skins) min 0/max 2/default 1];
docremark [In mode 0 team display is disabled In mode 1 players will be rendered with a colored vest to make the teams distinguishable. In mode 2 almost the whole suit of the players will be colored. These display modes are only applied in team gameodes.];
docident [texreduce] [Reduces the size of all texture by the selected factor:];
docargument [S] [scale selection] [min -1/max 3/default 0];
docident [trilinear] [];
docargument [V] [] [min 0/max 1/default 1];
docident [tsswap] [Swaps vertices of model triangles.];
docargument [V] [] [min 0/max 1/default 1];
docident [updateigraphs] [Checks for new files in packages/misc/igraph/ folder.];
docremark [Only necessary, if new files are added during the game - for example, by mod package download.];
docref [getigraph];
docident [vsync] [Enables or disables vsync.];
docargument [V] [vsync] [min -1/max 1/default -1];
docremark [-1 uses the default settings obtained from the system. 0 disables, 1 enables vsync.];
docident [waterreflect] [Turns on/off the reflections in the water surface.];
docargument [V] [enable/disable water reflections] [min 0/max 1/default 1];
docident [waterrefract] [Turns on/off water refractions.];
docargument [V] [enable/disable water refractions] [min 0/max 1/default 0];
docident [watersubdiv] [Determines the subdivision of the water surface in maps.];
docargument [N] [the subdivisioin value] [min 1/max 64/default 4];
docremark [Must be a power of 2: 4 is the default, 8 is recommended for people on slow machines, 2 is nice for fast machines, and 1 is quite OTT. See "waterlevel" (edit reference) on how to add water to your own levels.];
docref [waterlevel];
docident [waveheight] [Sets the wave height of water, between 0 (completely still, no waves at all) and 1 (very choppy).];
docargument [F] [wave height (floating-point value)] [min 0/max 1/default 0.3];
docsection [Sound]
docident [al_referencedistance] [The distance from the source emitting the sound to the listener.];
docargument [V] [] [min 0/max 1000000/default 400];
docident [al_rollofffactor] [This value indicates the relative "strength" of a sound (how far away the sound can be heard).];
docargument [V] [] [min 0/max 1000000/default 100];
docident [audio] [Enables or disables the audio subsystem in AC.];
docargument [B] [enable] [min 0/max 1/default 1];
docident [audiodebug] [Enables verbose output for debugging purposes.];
docargument [B] [enable audio debug] [min 0/max 1/default 0];
docident [bulletairsound] [];
docargument [V] [] [min 0/max 1/default 1];
docident [bulletairsounddestrad] [];
docargument [V] [] [min 0/max 1000/default 8];
docident [bulletairsoundrad] [];
docargument [V] [] [min 0/max 1000/default 15];
docident [bulletairsoundsourcerad] [];
docargument [V] [] [min 0/max 1000/default 8];
docident [bulletbouncesound] [];
docargument [V] [] [min 0/max 1/default 1];
docident [bulletbouncesoundrad] [];
docargument [V] [] [min 0/max 1000/default 15];
docident [enumsounds] [Lists sound index numbers and short descriptions for all sounds of one or more categories.];
docargument [C] [list of sound categories (flags)] [PAIN, OWNPAIN, WEAPON, PICKUP, MOVEMENT, BULLET, OTHER, VOICECOM, TEAM, PUBLIC, FFA, FLAGONLY] [0];
docremark [All sounds with at least one of the flags will be listed. Flag names prefixed with "!" will exclude all matching sound from the list. If no such entities exist or the entity type could not be recognised, the list is empty.];
docexample [echo (enumsounds "VOICECOM !PUBLIC")] [It will list all voicecom sounds that are for teams only];
docexample [echo (enumsounds (listoptions soundcategories))] [It will list all sounds];
docref [sound];
docref [registersound];
docident [footsteps] [Indicates if the footsteps sound should be played.];
docargument [B] [enable footsteps] [1 (true), 0 (false) min 0/max 1/default 1];
docref [localfootsteps];
docident [gainscale] [Each subsequent played sound's gain-value is scaled by this percentage.];
docargument [N] [percentage] [min 0/max 100/default 100];
docremark [This lowers the gain of the sounds before they are mixed, this might be useful in cases when the mixer has problems with too high gain values.];
docident [heartbeat] [Defines the health level at or below which a heartbeat sound will be played.];
docargument [H] [health value] [min 0/max 99/default 0];
docident [hitsound] [Plays a sound upon every successful hit if enabled.];
docargument [B] [off OR on] [0 (disabled), 1 (server), 2 (local) min 0/max 2/default 0];
docremark [If hitsound is set to 2, the sound will be played instantly rather than after server acknowledgment.];
docident [localfootsteps] [Indicates if the footsteps sound for the local player should be played.];
docargument [B] [enable footsteps] [1 (true), 0 (false) min 0/max 1/default 1];
docref [footsteps];
docident [mapsoundrefresh] [Specifies the interval for checking mapsounds.];
docargument [N] [interval in milliseconds] [min 0/max 1000/default 10];
docremark [If set to value 0, the map sounds will be checked in every frame without any interval limitation.];
docref [mapsound];
docref [newent sound];
docident [maxsoundsatonce] [];
docargument [V] [] [min 0/max 100/default 32];
docident [music] [Plays music in the background.];
docargument [A] [music file name] [] [0];
docargument [B] [playtime] [] [0];
docargument [C] [command to be executed, when music is done] [] [0];
docident [musicpreload] [Preloads the sound track.];
docargument [N] [soundtrack number] [0 (flag grab), 1 (last minute #1), 2 (last minute #2)] [0];
docremark [Can be helpful if you experience a delay, e.g. when picking up a flag.];
docident [musicvol] [Sets the music volume.];
docargument [N] [the volume] [min 0/max 255/default 128];
docref [soundvol];
docident [mutesound] [Mutes a specific game sound.];
docargument [N] [ID of the sound to mute] [see 'enumsounds', starting at ID 0] [0];
docargument [A] [audible?] [(mute) 0 or 1 (unmute)] [0];
docref [soundmuted];
docref [unmuteallsounds];
docref [enumsounds];
docident [registermusic] [Registers a track as music.];
docargument [M] [music file] [] [0];
docremark [The first three tracks have special meaning: Track #1 is for "flag grab" the second and third are used as "last minute" tracks.];
docident [registersound] [Registers a sound.];
docargument [N] [sound name] [path below packages/audio/, without file extension] [0];
docargument [V] [volume] [0..255] [0];
docargument [L] [loop] [0 (off), 1 (on)] [0];
docargument [R] [audible radius] [] [0];
docremark [This command returns the sound number, which is assigned from 0 onwards, and which can be used with "sound" command. If the sound was already registered, its existing index is returned. "registersound" does not actually load the sound, this is done on first play.];
docexample [registersound "player/jump" 80] [It registers packages/audio/player/jump.ogg sound with volume 80];
docref [sound];
docident [sound] [Plays the specified sound.];
docargument [N] [number of the sound to play] [integer] [0];
docremark [See source/src/server.h file or use "enumsounds" command for default sounds, and use "registersound" to register your own. For example, 'sound 0' and 'sound (registersound "player/jump")' both play the standard jump sound.];
docref [enumsounds];
docref [registersound];
docident [soundchannels] [Sets the desired amount of allocated sound channels.];
docargument [] [number of channels] [min 4/max 1024/default 128];
docremark [AC will try to allocate that number of channels but it is not guaranteed to succeed.];
docident [soundmuted] [Returns 1 if sound N is muted, else 0.];
docargument [N] [sound ID] [see 'enumsounds' for valid sound ID] [0];
docexample [mutesound 5; if (soundmuted 5) [echo Sound 5 is muted!] [echo Sound 5 is not muted!]] [Output: Sound 5 is muted!];
docref [mutesound];
docref [unmuteallsounds];
docref [enumsounds];
docident [soundscheddistancescore] [];
docargument [V] [] [min 0/max 1000/default 5];
docident [soundschedoldbonus] [];
docargument [V] [] [min 0/max 1000/default 100];
docident [soundschedpriorityscore] [];
docargument [V] [] [min 0/max 1000/default 100];
docident [soundschedreserve] [];
docargument [V] [] [min 0/max 100/default 2];
docident [soundtest] [Plays all hardcoded sounds in order.];
docident [soundvol] [Sets the sound volume for all sounds.];
docargument [N] [the volume] [min 0/max 255/default 128];
docident [unmuteallsounds] [Unmutes all previously muted sounds.];
docref [mutesound];
docsection [Ingame reference]
docident [docargument] [Adds a new argument documentation to the last added identifier.];
docargument [T] [the token] [] [0];
docargument [D] [the description] [] [0];
docargument [V] [the value notes] [] [0];
docargument [I] [flags this argument as variable-length] [1 (true), 0 (false)] [0];
docremark [An argument represents either a command argument or a variable value.];
docremark [The last argument of an identifier can be flagged as variable-length to indicate that it represents an unknown number of arguments.];
docref [docident];
docident [docexample] [Adds an example to the last added identifier.];
docargument [C] [the example code] [] [0];
docargument [E] [the explanation] [] [0];
docident [docfind] [Searches for pattern in all ingame identifier documentations (reference) entries.];
docargument [P] [the pattern] [] [0];
docargument [S] [silent?] [] [0];
docremark [If "silent" is zero or omitted, all found references are listed.];
docremark [A table of all found entries is returned as result. For each entry, the index of the doc entry string that contains the pattern is listed.];
docref [docident];
docref [docundone];
docref [docinvalid];
docref [getdoc];
docident [docident] [Adds a new identifier documentation to the last added section.];
docargument [N] [name of the identifier] [] [0];
docargument [D] [the description] [] [0];
docremark [An identifier represents a command or variable.];
docremark [The name may contain spaces to create a "multipart" identifier documentation that can be used to describe a complex argument as a single pseudo identifier, look at the examples.];
docexample [docident fov "Sets the field of view."] [];
docexample [docident "newent light" "Adds a new light entity."] [];
docref [docsection];
docref [docargument];
docref [docremark];
docref [docref];
docref [docundone];
docref [docinvalid];
docref [docfind];
docref [docwritebaseref];
docref [docvisible];
docref [docidentverbose];
docident [docidentverbose] [Enables identifier details or statement analyser.];
docargument [V] [level of displaying the additional informations] [min 0/max 3/default 1];
docref [docident];
docref [docvisible];
docref [docrefvisible];
docident [docinvalid] [Outputs a list of identifier documentations that do not match any existing identifier.];
docremark [Multipart identifiers are not included in this list, see 'docident'.];
docref [docident];
docref [docundone];
docref [docfind];
docident [dockey] [Adds a new default key to an identifier.];
docargument [A] [] [value] [0];
docident [docref] [Adds a new documentation reference to an identifier.];
docargument [N] [the display name] [] [0];
docargument [I] [the identifier to refer to] [] [0];
docargument [U] [the URL to refer to] [] [0];
docremark [The new reference is added to the last added identifier documentation.];
docref [docident];
docident [docrefvisible] [Render documentation references (docrefs) of the identifiers.];
docargument [V] [0: hide, 1: render] [min 0/max 1/default 1];
docref [docref];
docref [docvisible];
docref [docidentverbose];
docident [docremark] [Adds a new documentation remark to the last added identifier.];
docargument [S] [the remark] [] [0];
docref [docident];
docident [docsection] [Adds a new section to the ingame documentation.];
docargument [S] [the section name] [] [0];
docref [docident];
docident [docskip] [Allows to scroll through the rendered identifier documentation.];
docargument [V] [offset (number of lines)] [min 0/max 1000/default 0];
docident [docundone] [Outputs a list of yet undocumented identifiers (commands, variables, etc.).];
docargument [A] [output all identifiers] [1 (true), 0 (false)] [0];
docremark [If the one argument is omitted, only the builtin identifiers will be listed. Therefore specify the argument other identifiers like aliases should be included too.];
docremark [Note that the list also includes identifiers that contain the substrings "TODO" or "UNDONE" in their documentation.];
docref [docident];
docref [docinvalid];
docref [docfind];
docident [docvisible] [Render identifier documentation for the typed command in the console.];
docargument [V] [0: hide, 1: render] [min 0/max 1/default 1];
docref [docident];
docref [docidentverbose];
docref [docrefvisible];
docident [docwritebaseref] [Writes out a base XML documentation reference containing templates for the builtin identifiers.];
docargument [R] [the reference name] [] [0];
docargument [S] [the XML schema location string] [] [0];
docargument [T] [XML stylesheet to use] [] [0];
docremark [The generated reference is written to "docs/autogenerated_base_reference.xml" by default. The three arguments can be changed later on in the generated XML document.];
docref [docident];
docref [docundone];
docref [docinvalid];
docref [docfind];
docident [docwritetodoref] [Writes out an XML documentation reference file containing undocumented identifiers or identifiers marked with "TODO".];
docargument [I] [Also include aliases?] [0: don't include aliases (default), 1: include aliases] [0];
docident [getdoc] [Returns a string of the specified identifier documentation (reference) entry.];
docargument [N] [name of the identifier] [] [0];
docargument [I] [the string index number of entry] [0: name, 1: description, 2: remarks] [0];
docremark [String index numbers match with the result of "docfind".];
docref [docident];
docref [docfind];
docsection [Serverbrowser]
docident [addfavcategory] [Adds a new category in the serverbrowser favourites.];
docargument [A] [reference designator (keep short and unique)] [] [0];
docremark [Add new categories to your autoexec.cfg, check favourites.cfg for examples.];
docident [addserver] [Adds a server to the list of server to query in the server list menu.];
docargument [S] [the address of the server (hostname or IP)] [] [0];
docargument [P] [the port] [] [0];
docident [clearservers] [Clears the server list.];
docident [hidefavicons] [Hides favourites icons in serverbrowser.];
docargument [N] [0: show, 1: hide] [min 0/max 1/default 0];
docident [listfavcats] [Lists all registered serverbrowser favourites categories.];
docident [mastertype] [Sets the method which client will use to contact the masterserver.];
docargument [V] [0: direct TCP connection, 1: HTTP connection (via proxy)] [min 0/max 1/default 1];
docref [updatefrommaster];
docident [masterupdatefrequency] [];
docargument [V] [] [min 1/max 24*60*60/default 60*60];
docref [updatefrommaster];
docident [maxservpings] [Sets the number of servers to be pinged at once.];
docargument [V] [] [min 0/max 1000/default 10];
docident [searchlan] [];
docargument [V] [] [min 0/max 2/default 1];
docident [searchnickname] [Search a nickname (or -part) on all servers.];
docargument [N] [nickname to search] [] [0];
docident [serverbrowserhidefavtag] [Hides favourites tag column in serverbrowser.];
docargument [N] [-] [min 0/max 2/default 1];
docident [serverbrowserhideip] [Hides server IP and port in serverbrowser.];
docargument [N] [-] [min 0/max 2/default 2];
docident [serversort] [];
docargument [V] [] [min 0/max NUMSERVSORT-1/default 0];
docident [serversortdir] [Selects ascending of descending sort order in serverbrowser.];
docident [serversortpreferofficial] [Sort official maps over custom maps in serverbrowser.];
docargument [N] [-] [min 0/max 1/default 1];
docident [servpingrate] [];
docargument [V] [] [min 1000/max 60000/default 5000];
docident [showallplayersnumber] [Shows on serverbrowser number of all players on the all servers.];
docargument [N] [] [min 0/max 1/default 0];
docident [showallservers] [Whether servers that have not yet responded to a ping should be shown in the server list.];
docargument [V] [] [min 0/max 1/default 1];
docident [showminremain] [Show 'minutes remaining' in serverbrowser.];
docargument [N] [] [min 0/max 1/default 1];
docident [shownamesinbrowser] [Show player names in serverbrowser.];
docargument [N] [-] [min 0/max 1/default 0];
docident [showonlyfavourites] [Show only servers of one favourites category in serverbrowser.];
docargument [N] [category index] [min 0/max 100/default 0];
docident [showonlygoodservers] [Show only servers with the correct protocol in serverbrowser.];
docargument [N] [-] [min 0/max 1/default 0];
docident [showweights] [Show 'weights' in serverbrowser.];
docargument [N] [] [min 0/max 1/default 1];
docremark ['weights' are the sort criteria with the highest priority. Favourites categories can change the weights. Use 'showweights' to debug problems with serverbrowser sorting.];
docident [updatefrommaster] [Contacts the masterserver and adds any new servers to the server list.];
docargument [B] [force update] [0 (delayed), 1 (immediate)] [0];
docremark [The servers are written to the config/servers.cfg file. This menu can be reached through the Multiplayer menu.];
docref [mastertype];
docref [masterupdatefrequency];
docsection [Server commands]
docident [autoteam] [Sets automated team assignment.];
docargument [B] [Enables or disables auto team] [1 (On), 0 (Off)] [0];
docref [setadmin];
docident [ban] [Temporary ban of the specified player from the server.];
docargument [C] [The player to ban] [client number] [0];
docargument [R] [The reason] [at least 4 characters] [0];
docremark [Temporary ban duration is fixed at 20 minutes.];
docref [removebans];
docref [setadmin];
docident [callvote] [Calls a vote on the server.];
docargument [T] [Vote type] [value] [0];
docargument [A] [First argument] [] [0];
docargument [B] [Second argument] [] [0];
docremark [This command is wrapped by aliases for better usability and is used to action votes such as ban, kick, etc. See config/admin.cfg for actual uses.];
docident [cleardemo] [Clears specific demo currently in memory on the server.];
docargument [X] [number in list] [0 (all), 1..] [0];
docref [listdemos];
docref [cleardemos];
docident [cleardemos] [Clears all demos currently in memory on the server.];
docref [cleardemo];
docident [deleteservermap] [Deletes a map from the current server.];
docargument [A] [map name] [] [0];
docident [forceme] [Calls a vote to forceteam yourself to the specified team.];
docargument [T] [the team to force yourself to] [0-4] [0];
docremark [By default, if you are on team CLA or RVSF, this command will force you to the enemy team, no arguments necessary.];
docref [forceteam];
docident [forceteam] [Calls a vote to force the specified player to switch to the specified team.];
docargument [C] [client number of player] [integer] [0];
docargument [T] [the team to force to] [0-4] [0];
docref [forceme];
docref [setadmin];
docident [getvita] [Get vita for a client.];
docargument [C] [client number] [] [0];
docremark [TODO: elaborate];
docident [giveadmin] [Gives admin state to the specified player.];
docargument [C] [The player to become admin] [client number] [0];
docremark [Requires admin state. The admin will lose his admin state after successfully issuing this command.];
docref [setadmin];
docident [kick] [Kicks the specified player from the server.];
docargument [C] [The player to kick] [client number] [0];
docargument [R] [The reason] [at least 4 characters] [0];
docref [setadmin];
docident [mastermode] [Sets the mastermode for the server.];
docargument [N] [The master mode] [0 (Open), 1 (Private), 2 (Match)] [0];
docremark [If the mastermode is set to 'private', no more clients can join the server. Default is 'open' which allows anyone to join the server.];
docref [setadmin];
docident [removebans] [Removes all temporary bans from the server.];
docremark [Temporary bans are normally automatically removed after 20 minutes.];
docref [ban];
docref [setadmin];
docident [sendmap] [Sends a map to the server.];
docargument [M] [map to send] [] [0];
docremark [During coop edit, the current map gets saved to file and sent to the server. Other players can use 'getmap' to download it.];
docremark [When not in edit mode, the map will not be saved. The new map will be used, when the next game on that map starts on the server.];
docref [getmap];
docref [dlmap];
docident [serverdebug] [Whether or not to output debugging information.];
docargument [B] [boolean] [1:debug output min 0/max 1/default 0];
docremark [Only applies if you're running a client, the standalone server has DEBUGCOND(true) already set.];
docident [serverdesc] [Sets user-define server description.];
docargument [D] [description] [] [0];
docremark [If the server was run with -n1 and -n2 arguments (prefix and suffix of descriptive title) a serveradmin can set a user-defined server description with this command, if it wasn't this command results in "invalid vote". This title will only stay until the next map is loaded.];
docremark [If, for example, the server was run with -n"Fred's Server" -n1"Fred's " -n2" Server", then you could call "/serverdesc [pWn4g3 TOSOK]" and it would show up as "Fred's pWn4g3 TOSOK Server" in the serverbrowser.];
docident [serverextension] [Sends the extension name and argument string to the server, which can use it for custom action.];
docargument [E] [extension name] [] [0];
docargument [A] [argument] [] [0];
docremark [See source/src/server.cpp ["case SV_EXTENSION:"].];
docident [setadmin] [Claims or drops admin status.];
docargument [B] [Status] [1 (Claim), 0 (Drop)] [0];
docargument [PASS] [Password] [case sensitive] [0];
docremark [Failed logins result in an auto kick. The admin is granted the right to kick, ban, remove bans, set autoteam, set shuffleteam, change server description (if enabled), change map, change mastermode, force team, change mode, record demos, stop demos and clear demo(s) - All without needing votes from other users. If the admin votes on any (other players) call, his vote is final. In the scoreboard, the admin will be shown as a red colour.];
docref [kick];
docref [autoteam];
docref [mastermode];
docref [ban];
docref [removebans];
docident [shuffleteams] [Shuffles the teams.];
docremark [The server will attempt to restore balance, but the result may be less that optimal, and there are certainly better ways to keep teams balanced.];
docref [forceteam];
docref [forceme];
docsection [Authentication]
docident [authkey] [Manages a list of keys other than the game key (which is managed by authsetup).];
docargument [P] [parameter] [clear, list, delete keyname, new keyname,              add keyname privkey, selfcert keyname [comment]] [0];
docremark [For example, this can be server owner keys or clan boss keys. Options:];
docremark ["authkey clear" - empties the list and comments out all lines in config/authkeys.cfg.];
docremark ["authkey list" - lists all authkeys that are currently in memory.];
docremark ["authkey delete keyname" - deletes the key "keyname" from memory.];
docremark ["authkey new keyname" - generates a new key with the name "keyname". If a key of that name already exists, it is deleted. The key is added to the list in memory and also written to the file config/authkeys.cfg.];
docremark ["authkey add keyname privkey" - adds a key with the name "keyname" to the list in memory. The privkey is a 32-byte hexadecimal string, preferrably generated by authkey new. The matching public key is generated automatically from the private key.];
docremark ["authkey selfcert keyname [comment]" - generates a self-signed certificate for the key "keyname". Being able to create such a cert is proof, that you own the private key of a certain public key.];
docref [authsetup];
docident [authmaxtime] [Sets an amount of time (in ms), new password hashes are created with this fixed amount of time.];
docargument [N] [amount of time [ms]] [min 1<<9/max 1<<16/default 1<<12];
docref [authsetup];
docref [authmemusage];
docref [authrounds];
docident [authmemusage] [Sets a number of megabytes of RAM that are used for the password hash calculation (when new passwords are created).];
docargument [N] [number of RAM [MB]] [min 2/max (1<<10)-1/default 24];
docref [authsetup];
docref [authrounds];
docref [authmaxtime];
docident [authrounds] [Sets a number of rounds, if greater than 0, then new password hashes are created with this fixed number of rounds.];
docargument [N] [number of rounds] [min 0/max 2^31-1/default 0];
docref [authsetup];
docref [authmemusage];
docref [authmaxtime];
docident [authsetup] [Manages player authentication.];
docargument [P] [parameter] [[empty], pre preprivhex [psalthex pwdcfg],              priv privhex [salthex pwdcfg], pub pubhex, ppass preprivpass, pass privpass, passd privpass [commandwhendone],              needpass, genpre [prelen], genpriv, genpub, newppass preprivpass [preprivfilename],              newpass privpass [privatefilename], unarmed] [0];
docremark ["authsetup" contains all the funtionality needed to generate, load and save private and public keys, and to lock and unlock the private key with a password.];
docremark [Private and public keys are used to authenticate the player to servers, and are loaded from private/authprivate.cfg. Private keys can be stored in an "encrypted with password" version - in which case the player has to enter the password after game start. To prevent brute-force cracking of the password, the key-derivation function uses a constant time to encode (usually several seconds). Because of that, the decoding at game start can be done in the background.];
docremark [The private key is actually itself a public key generated from the prepriv key. The prepriv key should be kept away from the computer, either as hardcopy or on a thumbdrive. The prepriv key is not required to play the game. It can be used to prove ownership of the private key, in case the private key gets stolen. It can also be used to regenerate private and public keys, in case they are lost. The prepriv key can also be encrypted by its own password.];
docremark [----------];
docremark [Options:];
docremark ["authsetup" - checks private and public key and returns "1", if they match.];
docremark ["authsetup pre preprivhex [psalthex pwdcfg]" - loads prepriv key into memory. Optionally supports encrypted keys.];
docremark ["authsetup priv privhex [salthex pwdcfg]" - loads private key into memory. Optionally supports encrypted keys.];
docremark ["authsetup pub pubhex" - loads public key into memory.];
docremark ["authsetup ppass preprivpass" - decrypts prepriv key with password.];
docremark ["authsetup pass privpass" - decrypts private key with password.];
docremark ["authsetup passd privpass [commandwhendone]" - decrypts private key with password in background. Optionally executes cubescript command when done.];
docremark ["authsetup needpass" - returns "1", if the private key needs decryption.];
docremark ["authsetup genpre [prelen]" - generates new prepriv key.];
docremark ["authsetup genpriv" - generates private key from prepriv key.];
docremark ["authsetup genpub" - generates public key from private key.];
docremark ["authsetup savepre [preprivfilename]" - saves the prepriv key. The default filename is private/authpreprivate.cfg];
docremark ["authsetup savepre [privatefilename]" - saves the private key. The default filename is private/authprivate.cfg];
docremark ["authsetup newppass preprivpass [preprivfilename]" - encrypts prepriv key with new password and saves the result to file. The default filename is private/authpreprivate.cfg and an existing file gets overwritten - but the former file content is kept and also written, each line commented out.];
docremark ["authsetup newpass privpass [privatefilename]" - encrypts private key with new password and saves the encrypted private key and the public key to file. The default filename is private/authprivate.cfg and an existing file gets overwritten - but the former file content is kept and also written, each line commented out.];
docremark ["authsetup unarmed" - sets private and public keys to a fixed value. For testing only. Can be used to "log out". Only available in development versions of the game];
docremark [----------];
docremark ["authmemusage", "authrounds", "authmaxtime" are only used, when new passwords are created (authsetup new[p]pass). "authmemusage" is the number of megabytes of RAM that are used for the password hash calculation. If "authrounds" is zero (as is default), then the hash algorithm calculates as many rounds as possible in the number of milliseconds specified in "authmaxtime". If "authrounds" is a positive number, then that is the number of rounds to be done, regardless the required time. Note that, since the password hash algorithm is not endianness-aware, it is not possible to move an encrypted password to a machine with different endianness. Moving between 32- and 64-bit machines should be no problem.];
docref [authmemusage];
docref [authrounds];
docref [authmaxtime];
docref [authkey];
docref [mypubkey];
docref [cryptodebug];
docident [cryptodebug] [Enables some debug messages in crypto.cpp file.];
docargument [N] [enable debugging] [min 0/max 1/default 1];
docref [authsetup];
docident [listcerts] [List all certificates.];
docremark [TODO: elaborate];
docident [mypubkey] [Returns a public key of game account.];
docremark [It returns empty string, if no account exists or it is unusable (due to missing password, for example).];
docref [authsetup];
docident [newcert] [Create and sign certificates from Cubescript.];
docargument [X] [command] [clear, start, line, sign] [0];
docargument [A] [linename or pubkey] [X:line => pubkey or name; X:sign => actual privkey] [0];
docargument [B] [value or comment] [X:line => actual pubkey, actual privkey or actual name, X:sign => a descriptive comment] [0];
docargument [C] [comment] [newcert line name KEY => a descriptive comment] [0];
docremark [TODO: elaborate];
docsection [Game modes]
docident [bdm] [Starts a map with the mode "Bot Deathmatch".];
docargument [M] [The name of the map you wish to play] [] [0];
docargument [T] [The time limit, in minutes (default 10 minutes if T is 0 or not specified)] [1..60] [0];
docexample [bdm ac_complex] [];
docident [blss] [Starts a map with the mode "Bot Last Swiss Standing".];
docargument [M] [The name of the map you wish to play] [] [0];
docargument [T] [The time limit, in minutes (default 10 minutes if T is 0 or not specified)] [1..60] [0];
docexample [blss ac_complex] [];
docident [bosok] [Starts a map with the mode "Bot One Shot, One Kill".];
docargument [M] [The name of the map you wish to play] [] [0];
docargument [T] [The time limit, in minutes (default 10 minutes if T is 0 or not specified)] [1..60] [0];
docexample [bosok ac_complex] [];
docident [bpf] [Starts a map with the mode "Bot Pistol Frenzy".];
docargument [M] [The name of the map you wish to play] [] [0];
docargument [T] [The time limit, in minutes (default 10 minutes if T is 0 or not specified)] [1..60] [0];
docexample [bpf ac_complex] [];
docident [btdm] [Starts a map with the mode "Bot Team Deathmatch".];
docargument [M] [The name of the map you wish to play] [] [0];
docargument [T] [The time limit, in minutes (default 15 minutes if T is 0 or not specified)] [1..60] [0];
docexample [btdm ac_complex] [];
docident [btosok] [Starts a map with the mode "Bot Team One Shot, One Kill".];
docargument [M] [The name of the map you wish to play] [] [0];
docargument [T] [The time limit, in minutes (default 15 minutes if T is 0 or not specified)] [1..60] [0];
docexample [btosok ac_complex] [];
docident [btsurv] [Starts a map with the mode "Bot Team Survivor".];
docargument [M] [The name of the map you wish to play] [] [0];
docargument [T] [The time limit, in minutes (default 15 minutes if T is 0 or not specified)] [1..60] [0];
docexample [btsurv ac_complex] [];
docident [coop] [Starts a map with the mode "Co-operative Editing".];
docargument [M] [The name of the map you wish to edit] [] [0];
docremark [See the "Co-operative map editing" section on the "Tips, tricks and advice" chapter of the map editing guide for more information.];
docexample [coop ac_newmap] [];
docident [ctf] [Starts a map with the mode "Capture the Flag".];
docargument [M] [The name of the map you wish to play] [] [0];
docargument [T] [The time limit, in minutes (default 15 minutes if T is 0 or not specified)] [1..60] [0];
docexample [ctf ac_mines] [];
docident [curmodeattr] [Checks the current game mode for certain attributes.];
docargument [A] [attribute name] [] [0];
docremark [Possible attributes are: team, arena, flag and bot.];
docref [mode];
docref [gamemode];
docref [getmode];
docident [dm] [Starts a map with the mode "Deathmatch".];
docargument [M] [The name of the map you wish to play] [] [0];
docargument [T] [The time limit, in minutes (default 10 minutes if T is 0 or not specified)] [1..60] [0];
docexample [dm ac_complex] [];
docident [gamemode] [Returns the number of current game mode.];
docexample [echo $gamemode] [Output: 5];
docref [mode];
docref [getmode];
docref [curmodeattr];
docident [gamemodedesc] [];
docargument [M] [mode] [integer] [0];
docargument [D] [description] [string] [0];
docref [mode];
docref [showmodedescriptions];
docident [getmode] [Returns the name of current game mode.];
docargument [N] [0 = full mode name, 1 = mode acronym] [min 0/max 1/default 0] [0];
docexample [echo (getmode)] [Example output: capture the flag];
docexample [echo (getmode 1)] [Example output: CTF];
docref [mode];
docref [modeacronyms];
docref [gamemode];
docref [curmodeattr];
docident [htf] [Starts a map with the mode "Hunt the Flag".];
docargument [M] [The name of the map you wish to play] [] [0];
docargument [T] [The time limit, in minutes (default 15 minutes if T is 0 or not specified)] [1..60] [0];
docexample [htf ac_mines] [];
docident [ktf] [Starts a map with the mode "Keep the Flag".];
docargument [M] [The name of the map you wish to play] [] [0];
docargument [T] [The time limit, in minutes (default 10 minutes if T is 0 or not specified)] [1..60] [0];
docexample [ktf ac_mines] [];
docident [lms] [Starts a map with the mode "Survivor". Some players prefer the name "Last Man Standing" for this mode.];
docargument [M] [The name of the map you wish to play] [] [0];
docargument [T] [The time limit, in minutes (default 10 minutes if T is 0 or not specified)] [1..60] [0];
docexample [lms ac_complex] [];
docident [lss] [Starts a map with the mode "Last Swiss Standing".];
docargument [M] [The name of the map you wish to play] [] [0];
docargument [T] [The time limit, in minutes (default 10 minutes if T is 0 or not specified)] [1..60] [0];
docexample [lss ac_complex] [];
docident [mode] [Sets the gameplay mode to N for the next map loaded.];
docargument [N] [Team Deathmatch] [0] [0];
docargument [] [Co-op edit] [1] [0];
docargument [] [Deathmatch] [2] [0];
docargument [] [Survivor] [3] [0];
docargument [] [Team Survivor] [4] [0];
docargument [] [Capture the Flag] [5] [0];
docargument [] [Pistol Frenzy] [6] [0];
docargument [] [Bot Team Deathmatch] [7] [0];
docargument [] [Bot Deathmatch] [8] [0];
docargument [] [Last Swiss Standing] [9] [0];
docargument [] [One Shot, One Kill] [10] [0];
docargument [] [Team One Shot, One Kill] [11] [0];
docargument [] [Bot One Shot, One Kill] [12] [0];
docargument [] [Hunt the Flag] [13] [0];
docargument [] [Team Keep the Flag] [14] [0];
docargument [] [Keep the Flag] [15] [0];
docargument [] [Team Pistol Frenzy] [16] [0];
docargument [] [Team Last Swiss Standing] [17] [0];
docargument [] [Bot Pistol Frenzy] [18] [0];
docargument [] [Bot Last Swiss Standing] [19] [0];
docargument [] [Bot Team Survivor] [20] [0];
docargument [] [Bot Team One Shot, One Kill] [21] [0];
docremark [You will need to define mode before loading the map or it will stay as the last mode played.];
docremark [There are many aliases for you to use instead of remembering the numeric mapping.];
docexample [mode 7; map ac_complex; echo "Bot Team Deathmatch on ac_complex"] [];
docexample [mode 8; map ac_mines 4; echo "Bot Deathmatch on ac_mines for 4 minutes"] [];
docexample [mode 5; map ac_shine; echo "CTF @ ac_shine"] [];
docref [map];
docref [gamemode];
docref [getmode];
docref [curmodeattr];
docref [modeacronyms];
docref [modenum];
docref [tdm];
docref [coop];
docref [dm];
docref [surv];
docref [tsurv];
docref [ctf];
docref [tpf];
docref [pf];
docref [tlss];
docref [lss];
docref [osok];
docref [tosok];
docref [htf];
docref [tktf];
docref [ktf];
docref [btdm];
docref [bdm];
docref [bpf];
docref [blss];
docref [btsurv];
docref [bosok];
docref [btosok];
docident [modeacronyms] [Toggles use of acronyms instead of full modenames in the serverbrowser, scoreboard, voting info.];
docargument [B] [] [min 0/max 1/default 0];
docref [mode];
docref [getmode];
docref [modenum];
docident [modenum] [Returns the mode number for a specified mode acronym.];
docargument [M] [the mode acronym] [] [0];
docremark [Returns -1 if not found.];
docexample [echo (modenum ctf)] [Output: 5];
docexample [echo (modenum btosok)] [Output: 21];
docref [mode];
docref [modeacronyms];
docident [osok] [Starts a map with the mode "One Shot, One Kill".];
docargument [M] [The name of the map you wish to play] [] [0];
docargument [T] [The time limit, in minutes (default 10 minutes if T is 0 or not specified)] [1..60] [0];
docexample [osok ac_complex] [];
docident [pf] [Starts a map with the mode "Pistol Frenzy".];
docargument [M] [The name of the map you wish to play] [] [0];
docargument [T] [The time limit, in minutes (default 10 minutes if T is 0 or not specified)] [1..60] [0];
docexample [pf ac_complex] [];
docident [showmodedescriptions] [Enables or disables the showing of game mode descriptions on the console after map starts.];
docargument [B] [0 off, 1 on] [min 0/max 1/default 1];
docref [mode];
docref [gamemodedesc];
docident [surv] [Starts a map with the mode "Survivor".];
docargument [M] [The name of the map you wish to play] [] [0];
docargument [T] [The time limit, in minutes (default 10 minutes if T is 0 or not specified)] [1..60] [0];
docexample [surv ac_complex] [];
docident [tdm] [Starts a map with the mode "Team Deathmatch".];
docargument [M] [The name of the map you wish to play] [] [0];
docargument [T] [The time limit, in minutes (default 15 minutes if T is 0 or not specified)] [1..60] [0];
docexample [tdm ac_complex] [];
docident [tktf] [Starts a map with the mode "Team Keep the Flag".];
docargument [M] [The name of the map you wish to play] [] [0];
docargument [T] [The time limit, in minutes (default 15 minutes if T is 0 or not specified)] [1..60] [0];
docexample [tktf ac_mines] [];
docident [tlss] [Starts a map with the mode "Team Last Swiss Standing".];
docargument [M] [The name of the map you wish to play] [] [0];
docargument [T] [The time limit, in minutes (default 15 minutes if T is 0 or not specified)] [1..60] [0];
docexample [tlss ac_complex] [];
docident [tosok] [Starts a map with the mode "Team One Shot, One Kill".];
docargument [M] [The name of the map you wish to play] [] [0];
docargument [T] [The time limit, in minutes (default 15 minutes if T is 0 or not specified)] [1..60] [0];
docexample [tosok ac_complex] [];
docident [tpf] [Starts a map with the mode "Team Pistol Frenzy".];
docargument [M] [The name of the map you wish to play] [] [0];
docargument [T] [The time limit, in minutes (default 15 minutes if T is 0 or not specified)] [1..60] [0];
docexample [tpf ac_complex] [];
docident [tsurv] [Starts a map with the mode "Team Survivor".];
docargument [M] [The name of the map you wish to play] [] [0];
docargument [T] [The time limit, in minutes (default 15 minutes if T is 0 or not specified)] [1..60] [0];
docexample [tsurv ac_complex] [];
docident [vip] [Starts a map with the mode "Hunt the Flag". Some players prefer the name "VIP" for this mode.];
docargument [M] [The name of the map you wish to play] [] [0];
docargument [T] [The time limit, in minutes (default 15 minutes if T is 0 or not specified)] [1..60] [0];
docexample [vip ac_mines] [];
docsection [Editing configs]
docident [fog] [Sets the fog distance.];
docargument [N] [The fog distance] [distance in cubes min 64/max 1024/default 180];
docremark [You can do this for tweaking the visual effect of the fog, or if you are on a slow machine, setting the fog to a low value can also be a very effective way to increase fps (if you are geometry limited). Try out different values on big maps / maps which give you low fps. It is also good for aesthetic features of maps especially when combined with "fogcolour".];
docref [fogcolour];
docident [fogcolour] [Sets the fog and clearing colour.];
docargument [C] [The colour] [Hexadecimal colour min 0/max 16777215/default 0x8099B3];
docref [fog];
docident [getnotexture] [Returns the current "notexture" path (set by loadnotexture).];
docexample [echo (getnotexture)] [];
docref [loadnotexture];
docident [hexbinchunk] [Part of a map file];
docargument [C] [chunk of mapdata] [up to 24 bytes in hex] [0];
docremark [Internal – for XMAP – not intended for manual use];
docref [restorexmap];
docident [loadnotexture] [Binds a texture to be used if a slot couldn't be loaded with a given textures path.];
docargument [F] [file name of the texture to bind] [string] [0];
docremark [Binds the texture indicated in the filename to the texture slot of any textures that aren't found. The path is given exactly as with the texture-command, if it is omitted (or can't be loaded) the default is used. The default is located in packages/misc/notexture.jpg (not in packages/textures - where custom ones must reside!)];
docexample [loadnotexture // Reset to default] [];
docexample [loadnotexture "makke/black.jpg" // Any missing texture will show up black] [];
docref [texture];
docref [texturereset];
docref [getnotexture];
docident [loadsky] [Loads a skymap for a map.];
docargument [P] [path to skymap textures] [string] [0];
docremark [The available skymaps reside in packages/textures/skymaps/..];
docremark [The skymap name in the argument is required to start with "textures/skymaps/", but that part of the path can be omitted, and it should be used only up to the underscore "_" in the filename.];
docremark [You can get the current skymap name with the $loadsky variable.];
docexample [loadsky makke/mountain] [];
docexample [loadsky textures/skymaps/makke/mountain] [];
docident [mapmodel] [Registers a mapmodel that can be placed in maps.];
docargument [R] [The square radius of the bounding box.] [integer] [0];
docargument [H] [The height of the bounding box.] [integer] [0];
docargument [Z] [The initial height offset from the ground.] [integer] [0];
docargument [0] [This integer is redundant. Leave it at zero so you don't break the command.] [0] [0];
docargument [N] [The name of the map model] [string] [0];
docargument [F] [If '1', the model is preloaded, even if no entities use it] [1] [0];
docremark [A mapmodel registered with this command can be placed in a map using the 'newent mapmodel' command. The bounding box is an invisible force surrounding the model, allowing players to collide against it, instead of walking through the mapmodel. For more information about this command, read mapediting5.xml.];
docremark [Example: mapmodel 4 2 4 0 "modelname"];
docremark [This mapmodel has a bounding box of 8x8x2 in size (X/Y/Z) and by default hovers 4 units above ground.];
docremark [It also returns the number of the created slot, example: echo (mapmodel ...)];
docref [newent mapmodel];
docref [mapmodelreset];
docref [loadallmapmodels];
docref [mapmodelslotname];
docref [mapmodelslotbyname];
docref [mapmodelslotusage];
docref [editmapmodelslot];
docref [deletemapmodelslot];
docref [sortmapmodelslots];
docref [mapmodelchanged];
docref [listallmapmodelattributes];
docref [getmapmodelattributes];
docident [mapmodelreset] [Resets the mapmodel slots/indices to 0 for the subsequent "mapmodel" commands.];
docremark [Each subsequent mapmodel command increases it again. See config/default_map_settings.cfg for an example.];
docref [mapmodel];
docref [newent mapmodel];
docident [mapsound] [Defines a mapsound.];
docargument [P] [Path to the sound file] [] [0];
docargument [M] [Maximum simultaneous sounds/maxuses] [default -1 (unlimited)] [0];
docremark [Registers the sound as a map-specific sound. These map-specific sounds may currently only be used with "sound" entities within a map. The first map sound registered in a map has slot/index number 0 and increases afterwards.];
docremark [It also returns the number of the created slot, example: echo (mapsound ...)];
docref [newent sound];
docref [mapsoundreset];
docref [getmapsoundlist];
docref [getmapsoundorigin];
docref [mapsoundslotbyname];
docref [mapsoundslotusage];
docref [editmapsoundslot];
docref [deletemapsoundslot];
docref [sortmapsoundslots];
docref [mapsoundchanged];
docident [mapsoundreset] [Resets the mapsound slots/indices to 0 for the subsequent "mapsound" commands.];
docremark [Each subsequent mapsound command increases it again. See config/default_map_settings.cfg for an example.];
docref [newent sound];
docref [mapsound];
docident [md2anim] [];
docargument [A] [anim] [] [0];
docargument [F] [frame] [] [0];
docargument [R] [range] [] [0];
docargument [S] [speed] [] [0];
docident [md2emit] [];
docargument [T] [tag name] [] [0];
docargument [Y] [particle type (integer or name)] [SPARK (0), SMOKE (1), ECLOSEST (2),             BLOOD (3), DEMOTRACK (4), FIREBALL (5), SHOTLINE (6), BULLETHOLE (7), BLOODSTAIN (8), SCORCH (9), HUDMUZZLEFLASH (10),             MUZZLEFLASH (11), ELIGHT (12), ESPAWN (13), EAMMO (14), EPICKUP (15), EMODEL (16), ECARROT (17), ELADDER (18), EFLAG (19)] [0];
docargument [A] [attribute 1] [] [0];
docargument [B] [attribute 2] [] [0];
docident [md2tag] [];
docargument [N] [name] [] [0];
docargument [A] [vert1] [] [0];
docargument [B] [vert2] [] [0];
docargument [C] [vert3] [] [0];
docargument [D] [vert4] [] [0];
docident [md3anim] [];
docargument [A] [anim] [] [0];
docargument [S] [startframe] [] [0];
docargument [R] [range] [] [0];
docargument [V] [speed] [] [0];
docident [md3emit] [];
docargument [T] [tag name] [] [0];
docargument [Y] [particle type (integer or name)] [SPARK (0), SMOKE (1), ECLOSEST (2),             BLOOD (3), DEMOTRACK (4), FIREBALL (5), SHOTLINE (6), BULLETHOLE (7), BLOODSTAIN (8), SCORCH (9), HUDMUZZLEFLASH (10),             MUZZLEFLASH (11), ELIGHT (12), ESPAWN (13), EAMMO (14), EPICKUP (15), EMODEL (16), ECARROT (17), ELADDER (18), EFLAG (19)] [0];
docargument [A] [attribute 1] [] [0];
docargument [B] [attribute 2] [] [0];
docident [md3link] [];
docargument [P] [parentno] [] [0];
docargument [C] [childno] [] [0];
docargument [T] [tag name] [] [0];
docident [md3load] [];
docargument [M] [model] [] [0];
docident [md3skin] [];
docargument [N] [object name] [] [0];
docargument [S] [skin texture] [] [0];
docident [mdlalphablend] [];
docargument [A] [alphablend] [] [0];
docident [mdlalphatest] [];
docargument [A] [alphatest] [] [0];
docident [mdlattribute] [Adds a value for a specified attribute to the model.];
docargument [A] [attribute] [keywords, desc, defaults, usage, author, license, distribution, version, requires] [0];
docargument [V] [value] [] [0];
docremark [If used, specifies that the current model depends on parts of another custom model (which therefore also has to be downloaded) can only be used once per model config.];
docremark [Example: 'mdlattribute' requires 'makke/signs/exit' could be used in 'signs/loading-dock/md2.cfg' to reuse 'makke/signs/exit/tris.md2' .];
docref [getmapmodelattributes];
docref [listallmapmodelattributes];
docref [mapmodelregister];
docident [mdlcachelimit] [];
docargument [L] [cachelimit] [] [0];
docident [mdlcullface] [];
docargument [C] [cullface] [0 or 1] [0];
docident [mdlscale] [];
docargument [P] [percent] [0..100..N*100] [0];
docident [mdlshadowdist] [];
docargument [D] [shadow distance] [] [0];
docident [mdltrans] [Translates (= moves) the model.];
docargument [X] [] [] [0];
docargument [Y] [] [] [0];
docargument [Z] [] [] [0];
docident [mdltranslucent] [];
docargument [T] [translucency] [0..100..N*100] [0];
docident [mdlvertexlight] [];
docargument [V] [vertexligh] [0 or 1] [0];
docident [persistentxmaps] [Whether or not to save all xmaps on exist and restore them at game start.];
docargument [B] [boolean] [1:persistent min 0/max 1/default 1];
docremark [XMAP allows for visual comparison between maps.];
docremark [TODO: elaborate];
docref [xmap_list];
docident [restorexmap] [Declaration of map parts.];
docargument [*] [many combinations] [read the source] [0];
docremark [Internal – for XMAP – not intended for manual use];
docref [hexbinchunk];
docident [texture] [Binds a texture to the current texture slot.];
docargument [S] [Scale of the texture to load (should be a power of two).] [Float] [0];
docargument [F] [File name of the texture to bind] [string] [0];
docremark [Binds the texture indicated in the filename to the current texture slot and increments the slot number.];
docremark [The texture is rendered at the given scale. At scale 1.0 (or if scale is 0), 32x32 texels cover one cube. At scale 2.0, which is the current maximum, it's 64x64.];
docremark [It also returns the number of the created slot, example: echo (texture ...)];
docref [loadnotexture];
docref [texturereset];
docref [hirestextures];
docref [gettexturelist];
docref [gettextureorigin];
docref [textureslotusage];
docref [textureslotusagelist];
docref [textureslotbyname];
docref [deletetextureslot];
docref [edittextureslot];
docref [edittexturestack];
docref [sorttextureslots];
docident [texturereset] [Sets the texture slots/indicies to 0 for the subsequent "texture" commands.];
docremark [Each subsequent texture command increases it again. See config/default_map_settings.cfg for an example.];
docref [texture];
docident [watercolour] [Determines the water colour in a map.];
docargument [R] [red colour intensity] [1..255] [0];
docargument [G] [green colour intensity] [1..255] [0];
docargument [B] [blue colour intensity] [1..255] [0];
docargument [A] [alpha value (transparency)] [0..255 (default 178)] [0];
docremark [You must define at least 3 first values, otherwise this command may not work correctly (use "1" as a placeholder if needed).];
docref [getwatercolour];
docref [setwatercolour];
docref [waterlevel];
docsection [Bot mode]
docident [addbot] [Adds a bot for a given team with a given skill calling him a given name.];
docargument [T] [team] [RVSF or CLA] [0];
docargument [S] [skill] [best, good, medium, worse, bad] [0];
docargument [N] [name] [name for the bot] [0];
docremark [This command only works for single player modes.];
docexample [addbot RVSF medium Robbie] [Will add a bot named Robbie with a medium skill level to the RVSF team.];
docident [addnbot] [Adds a given count of bots for the given team with the given skill and select random names for them.];
docargument [C] [count] [how many bots to add] [0];
docargument [T] [team] [RVSF or CLA] [0];
docargument [S] [skill] [best, good, medium, worse, bad] [0];
docremark [This command only works for single player modes.];
docremark [The name of the bots will be selected randomly.];
docexample [addnbot 2 CLA bad] [Will add 2 bots with a bad skill level to the CLA team.];
docident [addpath1way1] [];
docident [addpath1way2] [];
docident [addpath2way1] [];
docident [addpath2way2] [];
docident [addwp] [Adds a bot waypoint at the current position.];
docargument [A] [connect automatically] [0 or 1] [0];
docident [autowp] [Automatically places waypoints.];
docident [botskill] [Changes the skill level for the given bot.];
docargument [N] [botname] [the name of the bot] [0];
docargument [S] [botskill] [best, good, medium, worse, bad] [0];
docexample [botskill Robbie best] [Changes the previous bot skill level of the bot named Robbie to a 'best' skill level.];
docident [botskillall] [Changes the skill level for all bots.];
docargument [S] [botskill] [best, good, medium, worse, bad] [0];
docexample [botskillall worse] [Changes the previous bot skill level for all bots to a 'worse' skill level.];
docident [botsshoot] [Enables or disables the ability of the bots to fire their weapons.];
docargument [T] [shooting bots?] [0 or 1] [0];
docexample [botsshoot 0] [Bots won't shoot.];
docident [delpath1way1] [];
docident [delpath1way2] [];
docident [delpath2way1] [];
docident [delpath2way2] [];
docident [delwp] [Deletes the selected waypoint.];
docident [idlebots] [Enables or disables the processing of the bots artificial intelligence.];
docargument [T] [off OR on] [0 or 1] [0];
docexample [idlebots 1] [Will make the bots stand still.];
docexample [idlebots 0] [Will enable the bots to move and shoot.];
docident [kickallbots] [Kicks all bots out of the current game.];
docident [kickbot] [Kicks the bot with the given name out of the current game.];
docargument [N] [botname] [name of the bot to kick.] [0];
docexample [kickbot Robbie] [Will make the bot named "Robbie" dissapear from the current game.];
docident [setjumpwp] [];
docref [unsetjumpwp];
docident [setwptriggernr] [Assigns a number to the nearest waypoint.];
docargument [N] [number] [] [0];
docremark [This is only used for trigger waypoints, so that the bots go to triggers in the right order. If you don't do this bots will search for every trigger, even when they are not reachable yet.];
docident [setwpyaw] [Takes the current player yaw for the current waypoint.];
docident [togglebotview] [When used you will see what the bot sees.];
docargument [N] [botname] [the name of the bot] [0];
docremark [Type it again (with or without name) to return to the game (you will respawn).];
docident [unsetjumpwp] [];
docref [setjumpwp];
docident [wpclear] [];
docident [wpflood] [];
docident [wpinfo] [Makes waypoints visible and either turns on or off the waypoint information display.];
docargument [Y] [show info?] [0 or 1] [0];
docident [wpload] [];
docident [wpsave] [];
docident [wpvisible] [];
docargument [V] [visible] [0 or 1] [0];
docident [xhairwpsel] [Determines if bot waypoints should be selected/placed using the crosshair or by the nearest location to your player.];
docargument [V] [Note: This is turned on by default.] [min 0/max 1/default 1];
docsection [Optional]
docident [--] [Decrements an alias by 1.];
docargument [A] [the alias name] [] [0];
docexample [i = 0; -- i; echo $i] [Output: -1];
docref [++];
docref [--f];
docref [++f];
docident [--f] [Decrements an alias by floating-point 1.];
docargument [A] [the alias name] [] [0];
docexample [i = 4.14; --f i; echo $i] [Output: 3.14];
docref [++f];
docref [--];
docref [++];
docident [++] [Increments an alias by 1.];
docargument [A] [the alias name] [] [0];
docexample [i = 0; ++ i; echo $i] [Output: 1];
docref [--];
docref [++f];
docref [--f];
docident [++f] [Increments an alias by floating-point 1.];
docargument [A] [the alias name] [] [0];
docexample [i = 2.14; ++f i; echo $i] [Output: 3.14];
docref [--f];
docref [++];
docref [--];
docident [alive] [Returns 1 if the local player is alive.];
docexample [echo (alive)] [Output: 1];
docref [load_compatibility];
docident [breakparse] [Breaks out of a parsestring loop.];
docremark [Important: this command should only be used within the 3rd argument (the cubescript to execute) of parsestring.];
docref [load_parsestring];
docref [parsestring];
docident [changegamma] [Smoothly changes your gamma to the specified value.];
docargument [G] [the gamma to change to] [] [0];
docargument [M] [milliseconds between gamma changes] [] [0];
docremark [Remark: that's optional command, disabled by default, to enable it execute "run opt/survival" or start bot surival mode from menu.];
docexample [changegamma 300 30] [Every 30 milliseconds your gamma is changed by 1 until it reaches its goal of gamma 300.];
docref [load_survival];
docref [gamma];
docref [changespeed];
docident [changespeed] [Smoothly changes your gamespeed to the specified value.];
docargument [S] [the gamespeed to change to] [] [0];
docargument [M] [milliseconds between gamespeed changes] [] [0];
docremark [Remark: that's optional command, disabled by default, to enable it execute "run opt/survival" or start bot surival mode from menu.];
docexample [changespeed 1000 30] [Every 30 milliseconds your gamespeed is changed by 1 until it reaches its goal of gamespeed 1000.];
docref [load_survival];
docref [gamespeed];
docref [changegamma];
docident [curmode] [Returns the mode number for the current game.];
docref [load_compatibility];
docref [gamemode];
docref [curmap];
docref [map];
docref [mode];
docident [currole] [Returns 1 if the local player has admin privileges, 0 otherwise.];
docref [load_compatibility];
docref [setadmin];
docref [connectadmin];
docident [curteam] [Returns an integer indicating what team a client is currently on.];
docargument [C] [client number] [returns the specified client's team instead] [0];
docremark [Returns 0 for CLA, 1 for RVSF.];
docremark [Returns 2 for CLA-spectator, 3 for RVSF-spectator.];
docremark [Returns 4 for spectator.];
docremark [By default this command returns what team *you* (player1) are currently on.];
docref [load_compatibility];
docref [team];
docref [forceteam];
docref [skin];
docident [findpn] [Finds player name with this client number.];
docargument [CN] [client number] [] [0];
docref [load_compatibility];
docident [getclientmode] [Returns the current game mode number.];
docref [load_compatibility];
docident [load_autosave] [Loads optional obsolete autosave settings.];
docremark [To see the obsolete autosave settings, look at config/opt/autosave.cfg file.];
docident [load_compatibility] [Loads optional compatibility settings for old scripts.];
docremark [To see the compatibility settings, look at config/opt/compatibility.cfg file.];
docident [load_convmap] [Loads batch map conversion tools.];
docremark [To see the map conversion tools, look at config/opt/convmap.cfg file.];
docident [load_faq] [Loads optional FAQ settings.];
docremark [To see the FAQ settings, look at config/opt/faq.cfg file.];
docremark [The settings are loaded, when FAQ is open in menu.];
docident [load_mapeditscripts] [Loads extra map editing scripts.];
docremark [To see the map editing scripts, look at config/opt/mapeditscripts.cfg file.];
docident [load_parsestring] [Loads optional settings for string parsing.];
docremark [To see the string parsing settings, look at config/opt/parsestring.cfg file.];
docident [load_survival] [Loads optional settings for bot survival mode.];
docremark [To see the settings for survival, look at config/opt/survival.cfg file.];
docremark [The settings are loaded, when bot survival mode is started via menu.];
docident [orderscorecolumns] [Show the client number column on the scoreboard first?];
docargument [N] [CN column order] [0 (false), 1 (true) min 0/max 1/default 0];
docref [load_compatibility];
docident [parsestring] [Loops through every character in the given string and executes the given block of cubescript on each iteration.];
docargument [S] [string] [string to parse] [0];
docargument [A] [string] [name of alias to use as iterator] [0];
docargument [C] [string] [cubescript to execute on each iteration] [0];
docargument [B] [integer] [non-zero to force backwards parse] [0];
docremark [Important: A secondary iterator alias (prefixed with a double underscore "__") is automatically created before each iteration that contains the character position data.];
docexample [parsestring "Hello world" iter [echo $iter]] [Uses echo on every character in the string: "Hello world"];
docexample [parsestring "Hello world" iter [echo (concatword "Char #" $__iter ": " $iter)]] [Uses echo on every character in the string: "Hello world" --- Also outputs the position of each character in the string.];
docexample [backwardsstring = []; parsestring "This will look interesting backwards." iter [backwardsstring = (concatword $backwardsstring $iter); if (= $__iter 0) [echo $backwardsstring]] 1] [Outputs: ".sdrawkcab gnitseretni kool lliw sihT"];
docexample [parsestring "abcdefghijklmnopqrstuvwxyz" iter [if (> $__iter 4) breakparse [echo $iter]]] [Example usage of the breakparse command. Uses echo on characters a through e, then breaks out of the parse.];
docref [load_parsestring];
docref [breakparse];
docref [substr];
docref [trimAllWhitespace];
docref [trimAllUnnecessaryWhitespace];
docident [pstat_score] [Returns the score statistics for the player with the given client number.];
docargument [CN] [client number] [0..N] [0];
docexample [echo (pstat_score 0)] [Output: 0 5 3 43 1 1 unarmed];
docref [load_compatibility];
docref [start_intermission];
docref [pstat_weap];
docident [setedithide] [Hides the list of entity types you set.];
docargument [L] [list of entity types to hide] [light, playerstart, pistol, ammobox, grenades, health, helmet, armour, akimbo, mapmodel, ladder, ctf-flag, sound, clip, plclip] [0];
docremark [Call "setedithide [lights mapmodels]" to just hide all lights and mapmodels.];
docremark [Only shown entity types are potential 'closest entity'.];
docremark ["setedithide" without any arguments restores visibility of all entities.];
docref [seteditshow];
docref [showedithide];
docident [seteditshow] [Hides all but the single entity type you give.];
docargument [T] [the entity type to show exclusively] [light, playerstart, pistol, ammobox, grenades, health, helmet, armour, akimbo, mapmodel, ladder, ctf-flag, sound, clip, plclip] [0];
docremark [Just run "seteditshow mapmodel" and see just the mapmodel entities.];
docremark [The other entity types are ignored as closestentity too.];
docremark ["seteditshow" without any argument hides all entities.];
docref [setedithide];
docref [showedithide];
docident [showedithide] [Shows the settings for hidden entities (sparklies).];
docref [setedithide];
docref [seteditshow];
docident [survival] [Prepares a round of bot survival mode on the specified map.];
docargument [M] [the map to use] [] [0];
docargument [D] [the difficulty] [0 = easy, 1 = intermediate, 2 = hard, 3 = impossible] [0];
docremark [All official maps are compatible with survival, if you want to play survival on a custom map, prior edits/additions to the script are necessary, such as adding a zone for that specific map.];
docref [load_survival];
docident [trimAllUnnecessaryWhitespace] [Removes all unnecessary leading and trailing whitespace characters from the given string.];
docargument [S] [string] [string to modify] [0];
docexample [echo (trimAllUnnecessaryWhitespace " H e ll o w o r l d ")] [Outputs: "H e ll o w o r l d"];
docref [load_parsestring];
docref [trimAllWhitespace];
docref [parsestring];
docident [trimAllWhitespace] [Removes all whitespace characters from the given string.];
docargument [S] [string] [string to modify] [0];
docexample [echo (trimAllWhitespace " H e ll o w o r l d ")] [Outputs: Helloworld];
docref [load_parsestring];
docref [trimAllUnnecessaryWhitespace];
docref [parsestring];
docsection [TODO]
